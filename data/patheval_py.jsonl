{"index": 0, "humaneval_task_id": "Python/0", "focal_method_name": "has_close_elements", "focal_method_para": "(numbers: List[float], threshold: float)", "focal_method_return_type": "bool", "focal_method": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "target": "\nassert has_close_elements(<FILL_ME>) == True"}
{"index": 1, "humaneval_task_id": "Python/0", "focal_method_name": "has_close_elements", "focal_method_para": "(numbers: List[float], threshold: float)", "focal_method_return_type": "bool", "focal_method": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "target": "\nassert has_close_elements(<FILL_ME>) == False"}
{"index": 2, "humaneval_task_id": "Python/1", "focal_method_name": "separate_paren_groups", "focal_method_para": "(paren_string: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "target": "\nassert separate_paren_groups(<FILL_ME>) == True"}
{"index": 3, "humaneval_task_id": "Python/1", "focal_method_name": "separate_paren_groups", "focal_method_para": "(paren_string: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "target": "\nassert separate_paren_groups(<FILL_ME>) == ['()', '(())', '(()())']"}
{"index": 4, "humaneval_task_id": "Python/1", "focal_method_name": "separate_paren_groups", "focal_method_para": "(paren_string: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "target": "\nassert separate_paren_groups(<FILL_ME>) == False"}
{"index": 5, "humaneval_task_id": "Python/2", "focal_method_name": "truncate_number", "focal_method_para": "(number: float)", "focal_method_return_type": "float", "focal_method": "def truncate_number(number: float) -> float:\n    return number % 1.0\n", "target": "\nassert truncate_number(<FILL_ME>) == 0.5"}
{"index": 6, "humaneval_task_id": "Python/2", "focal_method_name": "truncate_number", "focal_method_para": "(number: float)", "focal_method_return_type": "float", "focal_method": "def truncate_number(number: float) -> float:\n    return number % 1.0\n", "target": "\nassert truncate_number(<FILL_ME>) == 1e-6"}
{"index": 7, "humaneval_task_id": "Python/3", "focal_method_name": "below_zero", "focal_method_para": "(operations: List[int])", "focal_method_return_type": "bool", "focal_method": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "target": "\nassert below_zero(<FILL_ME>) == True"}
{"index": 8, "humaneval_task_id": "Python/3", "focal_method_name": "below_zero", "focal_method_para": "(operations: List[int])", "focal_method_return_type": "bool", "focal_method": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "target": "\nassert below_zero(<FILL_ME>) == False"}
{"index": 9, "humaneval_task_id": "Python/4", "focal_method_name": "mean_absolute_deviation", "focal_method_para": "(numbers: List[float])", "focal_method_return_type": "float", "focal_method": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "target": "\nassert mean_absolute_deviation(<FILL_ME>) == 1e-6"}
{"index": 10, "humaneval_task_id": "Python/5", "focal_method_name": "intersperse", "focal_method_para": "(numbers: List[int], delimeter: int)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "target": "\nassert intersperse(<FILL_ME>) == []"}
{"index": 11, "humaneval_task_id": "Python/5", "focal_method_name": "intersperse", "focal_method_para": "(numbers: List[int], delimeter: int)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "target": "\nassert intersperse(<FILL_ME>) == [5, 8, 6, 8, 3, 8, 2]"}
{"index": 12, "humaneval_task_id": "Python/5", "focal_method_name": "intersperse", "focal_method_para": "(numbers: List[int], delimeter: int)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "target": "\nassert intersperse(<FILL_ME>) == [2, 2, 2, 2, 2]"}
{"index": 13, "humaneval_task_id": "Python/6", "focal_method_name": "parse_nested_parens", "focal_method_para": "(paren_string: str)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "target": "\nassert parse_nested_parens(<FILL_ME>) == [4]"}
{"index": 14, "humaneval_task_id": "Python/6", "focal_method_name": "parse_nested_parens", "focal_method_para": "(paren_string: str)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "target": "\nassert parse_nested_parens(<FILL_ME>) == [1, 2, 3, 4]"}
{"index": 15, "humaneval_task_id": "Python/6", "focal_method_name": "parse_nested_parens", "focal_method_para": "(paren_string: str)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "target": "\nassert parse_nested_parens(<FILL_ME>) == [2, 3, 1, 3]"}
{"index": 16, "humaneval_task_id": "Python/7", "focal_method_name": "filter_by_substring", "focal_method_para": "(strings: List[str], substring: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n", "target": "\nassert filter_by_substring(<FILL_ME>) == []"}
{"index": 17, "humaneval_task_id": "Python/7", "focal_method_name": "filter_by_substring", "focal_method_para": "(strings: List[str], substring: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n", "target": "\nassert filter_by_substring(<FILL_ME>) == ['xxx', 'xxxAAA', 'xxx']"}
{"index": 18, "humaneval_task_id": "Python/7", "focal_method_name": "filter_by_substring", "focal_method_para": "(strings: List[str], substring: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n", "target": "\nassert filter_by_substring(<FILL_ME>) == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']"}
{"index": 19, "humaneval_task_id": "Python/7", "focal_method_name": "filter_by_substring", "focal_method_para": "(strings: List[str], substring: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n", "target": "\nassert filter_by_substring(<FILL_ME>) == ['grunt', 'prune']"}
{"index": 20, "humaneval_task_id": "Python/8", "focal_method_name": "sum_product", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "Tuple[int, int]", "focal_method": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "target": "\nassert sum_product(<FILL_ME>) == (10, 10)"}
{"index": 21, "humaneval_task_id": "Python/8", "focal_method_name": "sum_product", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "Tuple[int, int]", "focal_method": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "target": "\nassert sum_product(<FILL_ME>) == (0, 1)"}
{"index": 22, "humaneval_task_id": "Python/8", "focal_method_name": "sum_product", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "Tuple[int, int]", "focal_method": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "target": "\nassert sum_product(<FILL_ME>) == (3, 1)"}
{"index": 23, "humaneval_task_id": "Python/8", "focal_method_name": "sum_product", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "Tuple[int, int]", "focal_method": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "target": "\nassert sum_product(<FILL_ME>) == (100, 0)"}
{"index": 24, "humaneval_task_id": "Python/8", "focal_method_name": "sum_product", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "Tuple[int, int]", "focal_method": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "target": "\nassert sum_product(<FILL_ME>) == (3 + 5 + 7, 3 * 5 * 7)"}
{"index": 25, "humaneval_task_id": "Python/9", "focal_method_name": "rolling_max", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "List[int]", "focal_method": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "target": "\nassert rolling_max(<FILL_ME>) == []"}
{"index": 26, "humaneval_task_id": "Python/9", "focal_method_name": "rolling_max", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "List[int]", "focal_method": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "target": "\nassert rolling_max(<FILL_ME>) == [1, 2, 3, 4]"}
{"index": 27, "humaneval_task_id": "Python/9", "focal_method_name": "rolling_max", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "List[int]", "focal_method": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "target": "\nassert rolling_max(<FILL_ME>) == [3, 3, 3, 100, 100]"}
{"index": 28, "humaneval_task_id": "Python/9", "focal_method_name": "rolling_max", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "List[int]", "focal_method": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "target": "\nassert rolling_max(<FILL_ME>) == [4, 4, 4, 4]"}
{"index": 29, "humaneval_task_id": "Python/10", "focal_method_name": "make_palindrome", "focal_method_para": "(string: str)", "focal_method_return_type": "bool", "focal_method": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "target": "\nassert make_palindrome(<FILL_ME>) == ''"}
{"index": 30, "humaneval_task_id": "Python/10", "focal_method_name": "make_palindrome", "focal_method_para": "(string: str)", "focal_method_return_type": "bool", "focal_method": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "target": "\nassert make_palindrome(<FILL_ME>) == 'x'"}
{"index": 31, "humaneval_task_id": "Python/10", "focal_method_name": "make_palindrome", "focal_method_para": "(string: str)", "focal_method_return_type": "bool", "focal_method": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "target": "\nassert make_palindrome(<FILL_ME>) == 'jerryrrej'"}
{"index": 32, "humaneval_task_id": "Python/10", "focal_method_name": "make_palindrome", "focal_method_para": "(string: str)", "focal_method_return_type": "bool", "focal_method": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "target": "\nassert make_palindrome(<FILL_ME>) == 'xyzyx'"}
{"index": 33, "humaneval_task_id": "Python/10", "focal_method_name": "make_palindrome", "focal_method_para": "(string: str)", "focal_method_return_type": "bool", "focal_method": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "target": "\nassert make_palindrome(<FILL_ME>) == 'xyx'"}
{"index": 34, "humaneval_task_id": "Python/11", "focal_method_name": "string_xor", "focal_method_para": "(a: str, b: str)", "focal_method_return_type": "str", "focal_method": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "target": "\nassert string_xor(<FILL_ME>) == '0'"}
{"index": 35, "humaneval_task_id": "Python/11", "focal_method_name": "string_xor", "focal_method_para": "(a: str, b: str)", "focal_method_return_type": "str", "focal_method": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "target": "\nassert string_xor(<FILL_ME>) == '010010'"}
{"index": 36, "humaneval_task_id": "Python/11", "focal_method_name": "string_xor", "focal_method_para": "(a: str, b: str)", "focal_method_return_type": "str", "focal_method": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "target": "\nassert string_xor(<FILL_ME>) == '0101'"}
{"index": 37, "humaneval_task_id": "Python/12", "focal_method_name": "longest", "focal_method_para": "(strings: List[str])", "focal_method_return_type": "Optional[str]", "focal_method": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "target": "\nassert longest(<FILL_ME>) == None"}
{"index": 38, "humaneval_task_id": "Python/12", "focal_method_name": "longest", "focal_method_para": "(strings: List[str])", "focal_method_return_type": "Optional[str]", "focal_method": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "target": "\nassert longest(<FILL_ME>) == 'x'"}
{"index": 39, "humaneval_task_id": "Python/12", "focal_method_name": "longest", "focal_method_para": "(strings: List[str])", "focal_method_return_type": "Optional[str]", "focal_method": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "target": "\nassert longest(<FILL_ME>) == 'zzzz'"}
{"index": 40, "humaneval_task_id": "Python/13", "focal_method_name": "greatest_common_divisor", "focal_method_para": "(a: int, b: int)", "focal_method_return_type": "int", "focal_method": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "target": "\nassert greatest_common_divisor(<FILL_ME>) == 5"}
{"index": 41, "humaneval_task_id": "Python/13", "focal_method_name": "greatest_common_divisor", "focal_method_para": "(a: int, b: int)", "focal_method_return_type": "int", "focal_method": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "target": "\nassert greatest_common_divisor(<FILL_ME>) == 1"}
{"index": 42, "humaneval_task_id": "Python/13", "focal_method_name": "greatest_common_divisor", "focal_method_para": "(a: int, b: int)", "focal_method_return_type": "int", "focal_method": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "target": "\nassert greatest_common_divisor(<FILL_ME>) == 7"}
{"index": 43, "humaneval_task_id": "Python/13", "focal_method_name": "greatest_common_divisor", "focal_method_para": "(a: int, b: int)", "focal_method_return_type": "int", "focal_method": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "target": "\nassert greatest_common_divisor(<FILL_ME>) == 12"}
{"index": 44, "humaneval_task_id": "Python/14", "focal_method_name": "all_prefixes", "focal_method_para": "(string: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "target": "\nassert all_prefixes(<FILL_ME>) == []"}
{"index": 45, "humaneval_task_id": "Python/14", "focal_method_name": "all_prefixes", "focal_method_para": "(string: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "target": "\nassert all_prefixes(<FILL_ME>) == ['W', 'WW', 'WWW']"}
{"index": 46, "humaneval_task_id": "Python/14", "focal_method_name": "all_prefixes", "focal_method_para": "(string: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "target": "\nassert all_prefixes(<FILL_ME>) == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']"}
{"index": 47, "humaneval_task_id": "Python/15", "focal_method_name": "string_sequence", "focal_method_para": "(n: int)", "focal_method_return_type": "str", "focal_method": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n", "target": "\nassert string_sequence(<FILL_ME>) == '0'"}
{"index": 48, "humaneval_task_id": "Python/15", "focal_method_name": "string_sequence", "focal_method_para": "(n: int)", "focal_method_return_type": "str", "focal_method": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n", "target": "\nassert string_sequence(<FILL_ME>) == '0 1 2 3 4 5 6 7 8 9 10'"}
{"index": 49, "humaneval_task_id": "Python/15", "focal_method_name": "string_sequence", "focal_method_para": "(n: int)", "focal_method_return_type": "str", "focal_method": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n", "target": "\nassert string_sequence(<FILL_ME>) == '0 1 2 3'"}
{"index": 50, "humaneval_task_id": "Python/16", "focal_method_name": "count_distinct_characters", "focal_method_para": "(string: str)", "focal_method_return_type": "int", "focal_method": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "target": "\nassert count_distinct_characters(<FILL_ME>) == 5"}
{"index": 51, "humaneval_task_id": "Python/16", "focal_method_name": "count_distinct_characters", "focal_method_para": "(string: str)", "focal_method_return_type": "int", "focal_method": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "target": "\nassert count_distinct_characters(<FILL_ME>) == 1"}
{"index": 52, "humaneval_task_id": "Python/16", "focal_method_name": "count_distinct_characters", "focal_method_para": "(string: str)", "focal_method_return_type": "int", "focal_method": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "target": "\nassert count_distinct_characters(<FILL_ME>) == 0"}
{"index": 53, "humaneval_task_id": "Python/17", "focal_method_name": "parse_music", "focal_method_para": "(music_string: str)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "target": "\nassert parse_music(<FILL_ME>) == []"}
{"index": 54, "humaneval_task_id": "Python/17", "focal_method_name": "parse_music", "focal_method_para": "(music_string: str)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "target": "\nassert parse_music(<FILL_ME>) == [2, 1, 2, 1, 4, 2, 4, 2]"}
{"index": 55, "humaneval_task_id": "Python/17", "focal_method_name": "parse_music", "focal_method_para": "(music_string: str)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "target": "\nassert parse_music(<FILL_ME>) == [4, 4, 4, 4]"}
{"index": 56, "humaneval_task_id": "Python/17", "focal_method_name": "parse_music", "focal_method_para": "(music_string: str)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "target": "\nassert parse_music(<FILL_ME>) == [2, 2, 1, 1, 4, 4, 4, 4]"}
{"index": 57, "humaneval_task_id": "Python/17", "focal_method_name": "parse_music", "focal_method_para": "(music_string: str)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "target": "\nassert parse_music(<FILL_ME>) == [1, 1, 1, 1]"}
{"index": 58, "humaneval_task_id": "Python/18", "focal_method_name": "how_many_times", "focal_method_para": "(string: str, substring: str)", "focal_method_return_type": "int", "focal_method": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "target": "\nassert how_many_times(<FILL_ME>) == 1"}
{"index": 59, "humaneval_task_id": "Python/18", "focal_method_name": "how_many_times", "focal_method_para": "(string: str, substring: str)", "focal_method_return_type": "int", "focal_method": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "target": "\nassert how_many_times(<FILL_ME>) == 0"}
{"index": 60, "humaneval_task_id": "Python/18", "focal_method_name": "how_many_times", "focal_method_para": "(string: str, substring: str)", "focal_method_return_type": "int", "focal_method": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "target": "\nassert how_many_times(<FILL_ME>) == 4"}
{"index": 61, "humaneval_task_id": "Python/19", "focal_method_name": "sort_numbers", "focal_method_para": "(numbers: str)", "focal_method_return_type": "str", "focal_method": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "target": "\nassert sort_numbers(<FILL_ME>) == 'zero one two three four five six'"}
{"index": 62, "humaneval_task_id": "Python/19", "focal_method_name": "sort_numbers", "focal_method_para": "(numbers: str)", "focal_method_return_type": "str", "focal_method": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "target": "\nassert sort_numbers(<FILL_ME>) == 'three'"}
{"index": 63, "humaneval_task_id": "Python/19", "focal_method_name": "sort_numbers", "focal_method_para": "(numbers: str)", "focal_method_return_type": "str", "focal_method": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "target": "\nassert sort_numbers(<FILL_ME>) == ''"}
{"index": 64, "humaneval_task_id": "Python/19", "focal_method_name": "sort_numbers", "focal_method_para": "(numbers: str)", "focal_method_return_type": "str", "focal_method": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "target": "\nassert sort_numbers(<FILL_ME>) == 'three five nine'"}
{"index": 65, "humaneval_task_id": "Python/19", "focal_method_name": "sort_numbers", "focal_method_para": "(numbers: str)", "focal_method_return_type": "str", "focal_method": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "target": "\nassert sort_numbers(<FILL_ME>) == 'zero four five seven eight nine'"}
{"index": 66, "humaneval_task_id": "Python/20", "focal_method_name": "find_closest_elements", "focal_method_para": "(numbers: List[float])", "focal_method_return_type": "Tuple[float, float]", "focal_method": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "target": "\nassert find_closest_elements(<FILL_ME>) == (5.0, 5.9)"}
{"index": 67, "humaneval_task_id": "Python/20", "focal_method_name": "find_closest_elements", "focal_method_para": "(numbers: List[float])", "focal_method_return_type": "Tuple[float, float]", "focal_method": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "target": "\nassert find_closest_elements(<FILL_ME>) == (2.2, 3.1)"}
{"index": 68, "humaneval_task_id": "Python/20", "focal_method_name": "find_closest_elements", "focal_method_para": "(numbers: List[float])", "focal_method_return_type": "Tuple[float, float]", "focal_method": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "target": "\nassert find_closest_elements(<FILL_ME>) == (2.0, 2.2)"}
{"index": 69, "humaneval_task_id": "Python/20", "focal_method_name": "find_closest_elements", "focal_method_para": "(numbers: List[float])", "focal_method_return_type": "Tuple[float, float]", "focal_method": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "target": "\nassert find_closest_elements(<FILL_ME>) == (3.9, 4.0)"}
{"index": 70, "humaneval_task_id": "Python/20", "focal_method_name": "find_closest_elements", "focal_method_para": "(numbers: List[float])", "focal_method_return_type": "Tuple[float, float]", "focal_method": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "target": "\nassert find_closest_elements(<FILL_ME>) == (2.0, 2.0)"}
{"index": 71, "humaneval_task_id": "Python/21", "focal_method_name": "rescale_to_unit", "focal_method_para": "(numbers: List[float])", "focal_method_return_type": "List[float]", "focal_method": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "target": "\nassert rescale_to_unit(<FILL_ME>) == [0.25, 0.0, 1.0, 0.5, 0.75]"}
{"index": 72, "humaneval_task_id": "Python/21", "focal_method_name": "rescale_to_unit", "focal_method_para": "(numbers: List[float])", "focal_method_return_type": "List[float]", "focal_method": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "target": "\nassert rescale_to_unit(<FILL_ME>) == [1.0, 0.0]"}
{"index": 73, "humaneval_task_id": "Python/21", "focal_method_name": "rescale_to_unit", "focal_method_para": "(numbers: List[float])", "focal_method_return_type": "List[float]", "focal_method": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "target": "\nassert rescale_to_unit(<FILL_ME>) == [0.0, 1.0]"}
{"index": 74, "humaneval_task_id": "Python/21", "focal_method_name": "rescale_to_unit", "focal_method_para": "(numbers: List[float])", "focal_method_return_type": "List[float]", "focal_method": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "target": "\nassert rescale_to_unit(<FILL_ME>) == [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"index": 75, "humaneval_task_id": "Python/22", "focal_method_name": "filter_integers", "focal_method_para": "(values: List[Any])", "focal_method_return_type": "List[int]", "focal_method": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n", "target": "\nassert filter_integers(<FILL_ME>) == []"}
{"index": 76, "humaneval_task_id": "Python/22", "focal_method_name": "filter_integers", "focal_method_para": "(values: List[Any])", "focal_method_return_type": "List[int]", "focal_method": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n", "target": "\nassert filter_integers(<FILL_ME>) == [3, 3, 3]"}
{"index": 77, "humaneval_task_id": "Python/22", "focal_method_name": "filter_integers", "focal_method_para": "(values: List[Any])", "focal_method_return_type": "List[int]", "focal_method": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n", "target": "\nassert filter_integers(<FILL_ME>) == [4, 9]"}
{"index": 78, "humaneval_task_id": "Python/23", "focal_method_name": "strlen", "focal_method_para": "(string: str)", "focal_method_return_type": "int", "focal_method": "def strlen(string: str) -> int:\n    return len(string)\n", "target": "\nassert strlen(<FILL_ME>) == 1"}
{"index": 79, "humaneval_task_id": "Python/23", "focal_method_name": "strlen", "focal_method_para": "(string: str)", "focal_method_return_type": "int", "focal_method": "def strlen(string: str) -> int:\n    return len(string)\n", "target": "\nassert strlen(<FILL_ME>) == 0"}
{"index": 80, "humaneval_task_id": "Python/23", "focal_method_name": "strlen", "focal_method_para": "(string: str)", "focal_method_return_type": "int", "focal_method": "def strlen(string: str) -> int:\n    return len(string)\n", "target": "\nassert strlen(<FILL_ME>) == 9"}
{"index": 81, "humaneval_task_id": "Python/24", "focal_method_name": "largest_divisor", "focal_method_para": "(n: int)", "focal_method_return_type": "int", "focal_method": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "target": "\nassert largest_divisor(<FILL_ME>) == 5"}
{"index": 82, "humaneval_task_id": "Python/24", "focal_method_name": "largest_divisor", "focal_method_para": "(n: int)", "focal_method_return_type": "int", "focal_method": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "target": "\nassert largest_divisor(<FILL_ME>) == 1"}
{"index": 83, "humaneval_task_id": "Python/24", "focal_method_name": "largest_divisor", "focal_method_para": "(n: int)", "focal_method_return_type": "int", "focal_method": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "target": "\nassert largest_divisor(<FILL_ME>) == 7"}
{"index": 84, "humaneval_task_id": "Python/24", "focal_method_name": "largest_divisor", "focal_method_para": "(n: int)", "focal_method_return_type": "int", "focal_method": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "target": "\nassert largest_divisor(<FILL_ME>) == 50"}
{"index": 85, "humaneval_task_id": "Python/25", "focal_method_name": "factorize", "focal_method_para": "(n: int)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "target": "\nassert factorize(<FILL_ME>) == [3, 19]"}
{"index": 86, "humaneval_task_id": "Python/25", "focal_method_name": "factorize", "focal_method_para": "(n: int)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "target": "\nassert factorize(<FILL_ME>) == [2, 2]"}
{"index": 87, "humaneval_task_id": "Python/25", "focal_method_name": "factorize", "focal_method_para": "(n: int)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "target": "\nassert factorize(<FILL_ME>) == [2, 3, 3]"}
{"index": 88, "humaneval_task_id": "Python/25", "focal_method_name": "factorize", "focal_method_para": "(n: int)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "target": "\nassert factorize(<FILL_ME>) == [3, 3, 19, 19]"}
{"index": 89, "humaneval_task_id": "Python/25", "focal_method_name": "factorize", "focal_method_para": "(n: int)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "target": "\nassert factorize(<FILL_ME>) == [2]"}
{"index": 90, "humaneval_task_id": "Python/25", "focal_method_name": "factorize", "focal_method_para": "(n: int)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "target": "\nassert factorize(<FILL_ME>) == [2, 2, 2]"}
{"index": 91, "humaneval_task_id": "Python/25", "focal_method_name": "factorize", "focal_method_para": "(n: int)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "target": "\nassert factorize(<FILL_ME>) == [3, 19, 19, 19]"}
{"index": 92, "humaneval_task_id": "Python/25", "focal_method_name": "factorize", "focal_method_para": "(n: int)", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "target": "\nassert factorize(<FILL_ME>) == [3, 3, 3, 19, 19, 19]"}
{"index": 93, "humaneval_task_id": "Python/26", "focal_method_name": "remove_duplicates", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "target": "\nassert remove_duplicates(<FILL_ME>) == []"}
{"index": 94, "humaneval_task_id": "Python/26", "focal_method_name": "remove_duplicates", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "target": "\nassert remove_duplicates(<FILL_ME>) == [1, 2, 3, 4]"}
{"index": 95, "humaneval_task_id": "Python/26", "focal_method_name": "remove_duplicates", "focal_method_para": "(numbers: List[int])", "focal_method_return_type": "List[int]", "focal_method": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "target": "\nassert remove_duplicates(<FILL_ME>) == [1, 4, 5]"}
{"index": 96, "humaneval_task_id": "Python/27", "focal_method_name": "flip_case", "focal_method_para": "(string: str)", "focal_method_return_type": "str", "focal_method": "def flip_case(string: str) -> str:\n    return string.swapcase()\n", "target": "\nassert flip_case(<FILL_ME>) == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'"}
{"index": 97, "humaneval_task_id": "Python/27", "focal_method_name": "flip_case", "focal_method_para": "(string: str)", "focal_method_return_type": "str", "focal_method": "def flip_case(string: str) -> str:\n    return string.swapcase()\n", "target": "\nassert flip_case(<FILL_ME>) == 'hELLO!'"}
{"index": 98, "humaneval_task_id": "Python/27", "focal_method_name": "flip_case", "focal_method_para": "(string: str)", "focal_method_return_type": "str", "focal_method": "def flip_case(string: str) -> str:\n    return string.swapcase()\n", "target": "\nassert flip_case(<FILL_ME>) == ''"}
{"index": 99, "humaneval_task_id": "Python/28", "focal_method_name": "concatenate", "focal_method_para": "(strings: List[str])", "focal_method_return_type": "str", "focal_method": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "target": "\nassert concatenate(<FILL_ME>) == 'xyzwk'"}
{"index": 100, "humaneval_task_id": "Python/28", "focal_method_name": "concatenate", "focal_method_para": "(strings: List[str])", "focal_method_return_type": "str", "focal_method": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "target": "\nassert concatenate(<FILL_ME>) == 'xyz'"}
{"index": 101, "humaneval_task_id": "Python/28", "focal_method_name": "concatenate", "focal_method_para": "(strings: List[str])", "focal_method_return_type": "str", "focal_method": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "target": "\nassert concatenate(<FILL_ME>) == ''"}
{"index": 102, "humaneval_task_id": "Python/29", "focal_method_name": "filter_by_prefix", "focal_method_para": "(strings: List[str], prefix: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n", "target": "\nassert filter_by_prefix(<FILL_ME>) == []"}
{"index": 103, "humaneval_task_id": "Python/29", "focal_method_name": "filter_by_prefix", "focal_method_para": "(strings: List[str], prefix: str)", "focal_method_return_type": "List[str]", "focal_method": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n", "target": "\nassert filter_by_prefix(<FILL_ME>) == ['xxx', 'xxxAAA', 'xxx']"}
{"index": 104, "humaneval_task_id": "Python/30", "focal_method_name": "get_positive", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n", "target": "\nassert get_positive(<FILL_ME>) == []"}
{"index": 105, "humaneval_task_id": "Python/30", "focal_method_name": "get_positive", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n", "target": "\nassert get_positive(<FILL_ME>) == [5, 3, 2, 3, 3, 9, 123, 1]"}
{"index": 106, "humaneval_task_id": "Python/30", "focal_method_name": "get_positive", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n", "target": "\nassert get_positive(<FILL_ME>) == [4, 5, 6]"}
{"index": 107, "humaneval_task_id": "Python/31", "focal_method_name": "is_prime", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "target": "\nassert is_prime(<FILL_ME>) == True"}
{"index": 108, "humaneval_task_id": "Python/31", "focal_method_name": "is_prime", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "target": "\nassert is_prime(<FILL_ME>) == False"}
{"index": 109, "humaneval_task_id": "Python/32", "focal_method_name": "find_zero", "focal_method_para": "(xs: list)", "focal_method_return_type": null, "focal_method": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "target": "\nassert find_zero(<FILL_ME>) == 1e-4"}
{"index": 110, "humaneval_task_id": "Python/33", "focal_method_name": "sort_third", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "target": "\nassert sort_third(<FILL_ME>) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))"}
{"index": 111, "humaneval_task_id": "Python/33", "focal_method_name": "sort_third", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "target": "\nassert sort_third(<FILL_ME>) == tuple(sort_third([1, 2, 3]))"}
{"index": 112, "humaneval_task_id": "Python/33", "focal_method_name": "sort_third", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "target": "\nassert sort_third(<FILL_ME>) == tuple([2, 8, 3, 4, 6, 9, 5])"}
{"index": 113, "humaneval_task_id": "Python/33", "focal_method_name": "sort_third", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "target": "\nassert sort_third(<FILL_ME>) == tuple([2, 6, 3, 4, 8, 9, 5])"}
{"index": 114, "humaneval_task_id": "Python/33", "focal_method_name": "sort_third", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "target": "\nassert sort_third(<FILL_ME>) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))"}
{"index": 115, "humaneval_task_id": "Python/33", "focal_method_name": "sort_third", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "target": "\nassert sort_third(<FILL_ME>) == tuple([2, 6, 3, 4, 8, 9, 5, 1])"}
{"index": 116, "humaneval_task_id": "Python/33", "focal_method_name": "sort_third", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "target": "\nassert sort_third(<FILL_ME>) == tuple([2, 6, 9, 4, 8, 3, 5])"}
{"index": 117, "humaneval_task_id": "Python/34", "focal_method_name": "unique", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def unique(l: list):\n    return sorted(list(set(l)))\n", "target": "\nassert unique(<FILL_ME>) == [0, 2, 3, 5, 9, 123]"}
{"index": 118, "humaneval_task_id": "Python/35", "focal_method_name": "max_element", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "target": "\nassert max_element(<FILL_ME>) == 3"}
{"index": 119, "humaneval_task_id": "Python/35", "focal_method_name": "max_element", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "target": "\nassert max_element(<FILL_ME>) == 124"}
{"index": 120, "humaneval_task_id": "Python/36", "focal_method_name": "fizz_buzz", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "target": "\nassert fizz_buzz(<FILL_ME>) == 3"}
{"index": 121, "humaneval_task_id": "Python/36", "focal_method_name": "fizz_buzz", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "target": "\nassert fizz_buzz(<FILL_ME>) == 639"}
{"index": 122, "humaneval_task_id": "Python/36", "focal_method_name": "fizz_buzz", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "target": "\nassert fizz_buzz(<FILL_ME>) == 2"}
{"index": 123, "humaneval_task_id": "Python/36", "focal_method_name": "fizz_buzz", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "target": "\nassert fizz_buzz(<FILL_ME>) == 0"}
{"index": 124, "humaneval_task_id": "Python/36", "focal_method_name": "fizz_buzz", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "target": "\nassert fizz_buzz(<FILL_ME>) == 192"}
{"index": 125, "humaneval_task_id": "Python/36", "focal_method_name": "fizz_buzz", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "target": "\nassert fizz_buzz(<FILL_ME>) == 6"}
{"index": 126, "humaneval_task_id": "Python/36", "focal_method_name": "fizz_buzz", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "target": "\nassert fizz_buzz(<FILL_ME>) == 8026"}
{"index": 127, "humaneval_task_id": "Python/37", "focal_method_name": "sort_even", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "target": "\nassert sort_even(<FILL_ME>) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"}
{"index": 128, "humaneval_task_id": "Python/37", "focal_method_name": "sort_even", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "target": "\nassert sort_even(<FILL_ME>) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])"}
{"index": 129, "humaneval_task_id": "Python/37", "focal_method_name": "sort_even", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "target": "\nassert sort_even(<FILL_ME>) == tuple([1, 2, 3])"}
{"index": 130, "humaneval_task_id": "Python/38", "focal_method_name": "decode_cyclic", "focal_method_para": "(s: str)", "focal_method_return_type": null, "focal_method": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(encode_cyclic(s))\n", "target": "\nassert decode_cyclic(<FILL_ME>) == str"}
{"index": 131, "humaneval_task_id": "Python/39", "focal_method_name": "prime_fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "target": "\nassert prime_fib(<FILL_ME>) == 514229"}
{"index": 132, "humaneval_task_id": "Python/39", "focal_method_name": "prime_fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "target": "\nassert prime_fib(<FILL_ME>) == 3"}
{"index": 133, "humaneval_task_id": "Python/39", "focal_method_name": "prime_fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "target": "\nassert prime_fib(<FILL_ME>) == 433494437"}
{"index": 134, "humaneval_task_id": "Python/39", "focal_method_name": "prime_fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "target": "\nassert prime_fib(<FILL_ME>) == 2"}
{"index": 135, "humaneval_task_id": "Python/39", "focal_method_name": "prime_fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "target": "\nassert prime_fib(<FILL_ME>) == 233"}
{"index": 136, "humaneval_task_id": "Python/39", "focal_method_name": "prime_fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "target": "\nassert prime_fib(<FILL_ME>) == 5"}
{"index": 137, "humaneval_task_id": "Python/39", "focal_method_name": "prime_fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "target": "\nassert prime_fib(<FILL_ME>) == 13"}
{"index": 138, "humaneval_task_id": "Python/39", "focal_method_name": "prime_fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "target": "\nassert prime_fib(<FILL_ME>) == 89"}
{"index": 139, "humaneval_task_id": "Python/39", "focal_method_name": "prime_fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "target": "\nassert prime_fib(<FILL_ME>) == 28657"}
{"index": 140, "humaneval_task_id": "Python/39", "focal_method_name": "prime_fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "target": "\nassert prime_fib(<FILL_ME>) == 1597"}
{"index": 141, "humaneval_task_id": "Python/40", "focal_method_name": "triples_sum_to_zero", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "target": "\nassert triples_sum_to_zero(<FILL_ME>) == True"}
{"index": 142, "humaneval_task_id": "Python/40", "focal_method_name": "triples_sum_to_zero", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "target": "\nassert triples_sum_to_zero(<FILL_ME>) == False"}
{"index": 143, "humaneval_task_id": "Python/41", "focal_method_name": "car_race_collision", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def car_race_collision(n: int):\n    return n**2\n", "target": "\nassert car_race_collision(<FILL_ME>) == 4"}
{"index": 144, "humaneval_task_id": "Python/41", "focal_method_name": "car_race_collision", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def car_race_collision(n: int):\n    return n**2\n", "target": "\nassert car_race_collision(<FILL_ME>) == 16"}
{"index": 145, "humaneval_task_id": "Python/41", "focal_method_name": "car_race_collision", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def car_race_collision(n: int):\n    return n**2\n", "target": "\nassert car_race_collision(<FILL_ME>) == 9"}
{"index": 146, "humaneval_task_id": "Python/41", "focal_method_name": "car_race_collision", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def car_race_collision(n: int):\n    return n**2\n", "target": "\nassert car_race_collision(<FILL_ME>) == 100"}
{"index": 147, "humaneval_task_id": "Python/41", "focal_method_name": "car_race_collision", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def car_race_collision(n: int):\n    return n**2\n", "target": "\nassert car_race_collision(<FILL_ME>) == 64"}
{"index": 148, "humaneval_task_id": "Python/42", "focal_method_name": "incr_list", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n", "target": "\nassert incr_list(<FILL_ME>) == []"}
{"index": 149, "humaneval_task_id": "Python/42", "focal_method_name": "incr_list", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n", "target": "\nassert incr_list(<FILL_ME>) == [6, 3, 6, 3, 4, 4, 10, 1, 124]"}
{"index": 150, "humaneval_task_id": "Python/42", "focal_method_name": "incr_list", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n", "target": "\nassert incr_list(<FILL_ME>) == [4, 3, 2]"}
{"index": 151, "humaneval_task_id": "Python/43", "focal_method_name": "pairs_sum_to_zero", "focal_method_para": "(l)", "focal_method_return_type": null, "focal_method": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "target": "\nassert pairs_sum_to_zero(<FILL_ME>) == True"}
{"index": 152, "humaneval_task_id": "Python/43", "focal_method_name": "pairs_sum_to_zero", "focal_method_para": "(l)", "focal_method_return_type": null, "focal_method": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "target": "\nassert pairs_sum_to_zero(<FILL_ME>) == False"}
{"index": 153, "humaneval_task_id": "Python/44", "focal_method_name": "change_base", "focal_method_para": "(x: int, base: int)", "focal_method_return_type": null, "focal_method": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "target": "\nassert change_base(<FILL_ME>) == \"10000\""}
{"index": 154, "humaneval_task_id": "Python/44", "focal_method_name": "change_base", "focal_method_para": "(x: int, base: int)", "focal_method_return_type": null, "focal_method": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "target": "\nassert change_base(<FILL_ME>) == \"111\""}
{"index": 155, "humaneval_task_id": "Python/44", "focal_method_name": "change_base", "focal_method_para": "(x: int, base: int)", "focal_method_return_type": null, "focal_method": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "target": "\nassert change_base(<FILL_ME>) == \"100\""}
{"index": 156, "humaneval_task_id": "Python/44", "focal_method_name": "change_base", "focal_method_para": "(x: int, base: int)", "focal_method_return_type": null, "focal_method": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "target": "\nassert change_base(<FILL_ME>) == \"1000\""}
{"index": 157, "humaneval_task_id": "Python/44", "focal_method_name": "change_base", "focal_method_para": "(x: int, base: int)", "focal_method_return_type": null, "focal_method": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "target": "\nassert change_base(<FILL_ME>) == str(x)"}
{"index": 158, "humaneval_task_id": "Python/44", "focal_method_name": "change_base", "focal_method_para": "(x: int, base: int)", "focal_method_return_type": null, "focal_method": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "target": "\nassert change_base(<FILL_ME>) == \"22\""}
{"index": 159, "humaneval_task_id": "Python/44", "focal_method_name": "change_base", "focal_method_para": "(x: int, base: int)", "focal_method_return_type": null, "focal_method": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "target": "\nassert change_base(<FILL_ME>) == \"11101010\""}
{"index": 160, "humaneval_task_id": "Python/45", "focal_method_name": "triangle_area", "focal_method_para": "(a, h)", "focal_method_return_type": null, "focal_method": "def triangle_area(a, h):\n    return a * h / 2.0\n", "target": "\nassert triangle_area(<FILL_ME>) == 7.5"}
{"index": 161, "humaneval_task_id": "Python/45", "focal_method_name": "triangle_area", "focal_method_para": "(a, h)", "focal_method_return_type": null, "focal_method": "def triangle_area(a, h):\n    return a * h / 2.0\n", "target": "\nassert triangle_area(<FILL_ME>) == 40.0"}
{"index": 162, "humaneval_task_id": "Python/45", "focal_method_name": "triangle_area", "focal_method_para": "(a, h)", "focal_method_return_type": null, "focal_method": "def triangle_area(a, h):\n    return a * h / 2.0\n", "target": "\nassert triangle_area(<FILL_ME>) == 2.0"}
{"index": 163, "humaneval_task_id": "Python/46", "focal_method_name": "fib4", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "target": "\nassert fib4(<FILL_ME>) == 104"}
{"index": 164, "humaneval_task_id": "Python/46", "focal_method_name": "fib4", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "target": "\nassert fib4(<FILL_ME>) == 386"}
{"index": 165, "humaneval_task_id": "Python/46", "focal_method_name": "fib4", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "target": "\nassert fib4(<FILL_ME>) == 4"}
{"index": 166, "humaneval_task_id": "Python/46", "focal_method_name": "fib4", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "target": "\nassert fib4(<FILL_ME>) == 28"}
{"index": 167, "humaneval_task_id": "Python/47", "focal_method_name": "median", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "target": "\nassert median(<FILL_ME>) == 5.5"}
{"index": 168, "humaneval_task_id": "Python/47", "focal_method_name": "median", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "target": "\nassert median(<FILL_ME>) == 3"}
{"index": 169, "humaneval_task_id": "Python/47", "focal_method_name": "median", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "target": "\nassert median(<FILL_ME>) == 5"}
{"index": 170, "humaneval_task_id": "Python/47", "focal_method_name": "median", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "target": "\nassert median(<FILL_ME>) == 7"}
{"index": 171, "humaneval_task_id": "Python/47", "focal_method_name": "median", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "target": "\nassert median(<FILL_ME>) == 8.0"}
{"index": 172, "humaneval_task_id": "Python/48", "focal_method_name": "is_palindrome", "focal_method_para": "(text: str)", "focal_method_return_type": null, "focal_method": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "target": "\nassert is_palindrome(<FILL_ME>) == True"}
{"index": 173, "humaneval_task_id": "Python/48", "focal_method_name": "is_palindrome", "focal_method_para": "(text: str)", "focal_method_return_type": null, "focal_method": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "target": "\nassert is_palindrome(<FILL_ME>) == False"}
{"index": 174, "humaneval_task_id": "Python/49", "focal_method_name": "modp", "focal_method_para": "(n: int, p: int)", "focal_method_return_type": null, "focal_method": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "target": "\nassert modp(<FILL_ME>) == 1"}
{"index": 175, "humaneval_task_id": "Python/49", "focal_method_name": "modp", "focal_method_para": "(n: int, p: int)", "focal_method_return_type": null, "focal_method": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "target": "\nassert modp(<FILL_ME>) == 4"}
{"index": 176, "humaneval_task_id": "Python/49", "focal_method_name": "modp", "focal_method_para": "(n: int, p: int)", "focal_method_return_type": null, "focal_method": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "target": "\nassert modp(<FILL_ME>) == 3"}
{"index": 177, "humaneval_task_id": "Python/49", "focal_method_name": "modp", "focal_method_para": "(n: int, p: int)", "focal_method_return_type": null, "focal_method": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "target": "\nassert modp(<FILL_ME>) == 2"}
{"index": 178, "humaneval_task_id": "Python/49", "focal_method_name": "modp", "focal_method_para": "(n: int, p: int)", "focal_method_return_type": null, "focal_method": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "target": "\nassert modp(<FILL_ME>) == 8"}
{"index": 179, "humaneval_task_id": "Python/50", "focal_method_name": "decode_shift", "focal_method_para": "(s: str)", "focal_method_return_type": null, "focal_method": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "target": "\nassert decode_shift(<FILL_ME>) == str"}
{"index": 180, "humaneval_task_id": "Python/51", "focal_method_name": "remove_vowels", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "target": "\nassert remove_vowels(<FILL_ME>) == 'bcdf\\nghjklm'"}
{"index": 181, "humaneval_task_id": "Python/51", "focal_method_name": "remove_vowels", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "target": "\nassert remove_vowels(<FILL_ME>) == ''"}
{"index": 182, "humaneval_task_id": "Python/51", "focal_method_name": "remove_vowels", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "target": "\nassert remove_vowels(<FILL_ME>) == 'ybcd'"}
{"index": 183, "humaneval_task_id": "Python/51", "focal_method_name": "remove_vowels", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "target": "\nassert remove_vowels(<FILL_ME>) == 'cB'"}
{"index": 184, "humaneval_task_id": "Python/51", "focal_method_name": "remove_vowels", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "target": "\nassert remove_vowels(<FILL_ME>) == 'fdcb'"}
{"index": 185, "humaneval_task_id": "Python/52", "focal_method_name": "below_threshold", "focal_method_para": "(l: list, t: int)", "focal_method_return_type": null, "focal_method": "def below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t:\n            return False\n    return True\n", "target": "\nassert below_threshold(<FILL_ME>) == True"}
{"index": 186, "humaneval_task_id": "Python/52", "focal_method_name": "below_threshold", "focal_method_para": "(l: list, t: int)", "focal_method_return_type": null, "focal_method": "def below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t:\n            return False\n    return True\n", "target": "\nassert below_threshold(<FILL_ME>) == False"}
{"index": 187, "humaneval_task_id": "Python/53", "focal_method_name": "add", "focal_method_para": "(x: int, y: int)", "focal_method_return_type": null, "focal_method": "def add(x: int, y: int):\n    return x + y\n", "target": "\nassert add(<FILL_ME>) == 5"}
{"index": 188, "humaneval_task_id": "Python/53", "focal_method_name": "add", "focal_method_para": "(x: int, y: int)", "focal_method_return_type": null, "focal_method": "def add(x: int, y: int):\n    return x + y\n", "target": "\nassert add(<FILL_ME>) == 1"}
{"index": 189, "humaneval_task_id": "Python/53", "focal_method_name": "add", "focal_method_para": "(x: int, y: int)", "focal_method_return_type": null, "focal_method": "def add(x: int, y: int):\n    return x + y\n", "target": "\nassert add(<FILL_ME>) == x + y"}
{"index": 190, "humaneval_task_id": "Python/53", "focal_method_name": "add", "focal_method_para": "(x: int, y: int)", "focal_method_return_type": null, "focal_method": "def add(x: int, y: int):\n    return x + y\n", "target": "\nassert add(<FILL_ME>) == 12"}
{"index": 191, "humaneval_task_id": "Python/54", "focal_method_name": "same_chars", "focal_method_para": "(s0: str, s1: str)", "focal_method_return_type": null, "focal_method": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n", "target": "\nassert same_chars(<FILL_ME>) == True"}
{"index": 192, "humaneval_task_id": "Python/54", "focal_method_name": "same_chars", "focal_method_para": "(s0: str, s1: str)", "focal_method_return_type": null, "focal_method": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n", "target": "\nassert same_chars(<FILL_ME>) == False"}
{"index": 193, "humaneval_task_id": "Python/55", "focal_method_name": "fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "target": "\nassert fib(<FILL_ME>) == 1"}
{"index": 194, "humaneval_task_id": "Python/55", "focal_method_name": "fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "target": "\nassert fib(<FILL_ME>) == 144"}
{"index": 195, "humaneval_task_id": "Python/55", "focal_method_name": "fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "target": "\nassert fib(<FILL_ME>) == 55"}
{"index": 196, "humaneval_task_id": "Python/55", "focal_method_name": "fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "target": "\nassert fib(<FILL_ME>) == 89"}
{"index": 197, "humaneval_task_id": "Python/55", "focal_method_name": "fib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "target": "\nassert fib(<FILL_ME>) == 21"}
{"index": 198, "humaneval_task_id": "Python/56", "focal_method_name": "correct_bracketing", "focal_method_para": "(brackets: str)", "focal_method_return_type": null, "focal_method": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "target": "\nassert correct_bracketing(<FILL_ME>) == True"}
{"index": 199, "humaneval_task_id": "Python/56", "focal_method_name": "correct_bracketing", "focal_method_para": "(brackets: str)", "focal_method_return_type": null, "focal_method": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "target": "\nassert correct_bracketing(<FILL_ME>) == False"}
{"index": 200, "humaneval_task_id": "Python/57", "focal_method_name": "monotonic", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "target": "\nassert monotonic(<FILL_ME>) == True"}
{"index": 201, "humaneval_task_id": "Python/57", "focal_method_name": "monotonic", "focal_method_para": "(l: list)", "focal_method_return_type": null, "focal_method": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "target": "\nassert monotonic(<FILL_ME>) == False"}
{"index": 202, "humaneval_task_id": "Python/58", "focal_method_name": "common", "focal_method_para": "(l1: list, l2: list)", "focal_method_return_type": null, "focal_method": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "target": "\nassert common(<FILL_ME>) == []"}
{"index": 203, "humaneval_task_id": "Python/58", "focal_method_name": "common", "focal_method_para": "(l1: list, l2: list)", "focal_method_return_type": null, "focal_method": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "target": "\nassert common(<FILL_ME>) == [2, 3]"}
{"index": 204, "humaneval_task_id": "Python/58", "focal_method_name": "common", "focal_method_para": "(l1: list, l2: list)", "focal_method_return_type": null, "focal_method": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "target": "\nassert common(<FILL_ME>) == [1, 5, 653]"}
{"index": 205, "humaneval_task_id": "Python/58", "focal_method_name": "common", "focal_method_para": "(l1: list, l2: list)", "focal_method_return_type": null, "focal_method": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "target": "\nassert common(<FILL_ME>) == [2, 3, 4]"}
{"index": 206, "humaneval_task_id": "Python/59", "focal_method_name": "largest_prime_factor", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "target": "\nassert largest_prime_factor(<FILL_ME>) == 3"}
{"index": 207, "humaneval_task_id": "Python/59", "focal_method_name": "largest_prime_factor", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "target": "\nassert largest_prime_factor(<FILL_ME>) == 11"}
{"index": 208, "humaneval_task_id": "Python/59", "focal_method_name": "largest_prime_factor", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "target": "\nassert largest_prime_factor(<FILL_ME>) == 5"}
{"index": 209, "humaneval_task_id": "Python/59", "focal_method_name": "largest_prime_factor", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "target": "\nassert largest_prime_factor(<FILL_ME>) == 29"}
{"index": 210, "humaneval_task_id": "Python/59", "focal_method_name": "largest_prime_factor", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "target": "\nassert largest_prime_factor(<FILL_ME>) == 7"}
{"index": 211, "humaneval_task_id": "Python/60", "focal_method_name": "sum_to_n", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n", "target": "\nassert sum_to_n(<FILL_ME>) == 465"}
{"index": 212, "humaneval_task_id": "Python/60", "focal_method_name": "sum_to_n", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n", "target": "\nassert sum_to_n(<FILL_ME>) == 1"}
{"index": 213, "humaneval_task_id": "Python/60", "focal_method_name": "sum_to_n", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n", "target": "\nassert sum_to_n(<FILL_ME>) == 5050"}
{"index": 214, "humaneval_task_id": "Python/60", "focal_method_name": "sum_to_n", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n", "target": "\nassert sum_to_n(<FILL_ME>) == 66"}
{"index": 215, "humaneval_task_id": "Python/60", "focal_method_name": "sum_to_n", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n", "target": "\nassert sum_to_n(<FILL_ME>) == 21"}
{"index": 216, "humaneval_task_id": "Python/61", "focal_method_name": "correct_bracketing", "focal_method_para": "(brackets: str)", "focal_method_return_type": null, "focal_method": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "target": "\nassert correct_bracketing(<FILL_ME>) == True"}
{"index": 217, "humaneval_task_id": "Python/61", "focal_method_name": "correct_bracketing", "focal_method_para": "(brackets: str)", "focal_method_return_type": null, "focal_method": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "target": "\nassert correct_bracketing(<FILL_ME>) == False"}
{"index": 218, "humaneval_task_id": "Python/62", "focal_method_name": "derivative", "focal_method_para": "(xs: list)", "focal_method_return_type": null, "focal_method": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "target": "\nassert derivative(<FILL_ME>) == []"}
{"index": 219, "humaneval_task_id": "Python/62", "focal_method_name": "derivative", "focal_method_para": "(xs: list)", "focal_method_return_type": null, "focal_method": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "target": "\nassert derivative(<FILL_ME>) == [2, 2, 0, 16]"}
{"index": 220, "humaneval_task_id": "Python/62", "focal_method_name": "derivative", "focal_method_para": "(xs: list)", "focal_method_return_type": null, "focal_method": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "target": "\nassert derivative(<FILL_ME>) == [2, 2]"}
{"index": 221, "humaneval_task_id": "Python/62", "focal_method_name": "derivative", "focal_method_para": "(xs: list)", "focal_method_return_type": null, "focal_method": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "target": "\nassert derivative(<FILL_ME>) == [1, 4, 12, 20]"}
{"index": 222, "humaneval_task_id": "Python/62", "focal_method_name": "derivative", "focal_method_para": "(xs: list)", "focal_method_return_type": null, "focal_method": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "target": "\nassert derivative(<FILL_ME>) == [2, 6]"}
{"index": 223, "humaneval_task_id": "Python/63", "focal_method_name": "fibfib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "target": "\nassert fibfib(<FILL_ME>) == 1"}
{"index": 224, "humaneval_task_id": "Python/63", "focal_method_name": "fibfib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "target": "\nassert fibfib(<FILL_ME>) == 4"}
{"index": 225, "humaneval_task_id": "Python/63", "focal_method_name": "fibfib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "target": "\nassert fibfib(<FILL_ME>) == 927"}
{"index": 226, "humaneval_task_id": "Python/63", "focal_method_name": "fibfib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "target": "\nassert fibfib(<FILL_ME>) == 24"}
{"index": 227, "humaneval_task_id": "Python/63", "focal_method_name": "fibfib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "target": "\nassert fibfib(<FILL_ME>) == 0"}
{"index": 228, "humaneval_task_id": "Python/63", "focal_method_name": "fibfib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "target": "\nassert fibfib(<FILL_ME>) == 274"}
{"index": 229, "humaneval_task_id": "Python/63", "focal_method_name": "fibfib", "focal_method_para": "(n: int)", "focal_method_return_type": null, "focal_method": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "target": "\nassert fibfib(<FILL_ME>) == 81"}
{"index": 230, "humaneval_task_id": "Python/64", "focal_method_name": "vowels_count", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "target": "\nassert vowels_count(<FILL_ME>) == 1"}
{"index": 231, "humaneval_task_id": "Python/64", "focal_method_name": "vowels_count", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "target": "\nassert vowels_count(<FILL_ME>) == 3"}
{"index": 232, "humaneval_task_id": "Python/64", "focal_method_name": "vowels_count", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "target": "\nassert vowels_count(<FILL_ME>) == 2"}
{"index": 233, "humaneval_task_id": "Python/65", "focal_method_name": "circular_shift", "focal_method_para": "(x, shift)", "focal_method_return_type": null, "focal_method": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "target": "\nassert circular_shift(<FILL_ME>) == \"79\""}
{"index": 234, "humaneval_task_id": "Python/65", "focal_method_name": "circular_shift", "focal_method_para": "(x, shift)", "focal_method_return_type": null, "focal_method": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "target": "\nassert circular_shift(<FILL_ME>) == \"12\""}
{"index": 235, "humaneval_task_id": "Python/65", "focal_method_name": "circular_shift", "focal_method_para": "(x, shift)", "focal_method_return_type": null, "focal_method": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "target": "\nassert circular_shift(<FILL_ME>) == \"11\""}
{"index": 236, "humaneval_task_id": "Python/65", "focal_method_name": "circular_shift", "focal_method_para": "(x, shift)", "focal_method_return_type": null, "focal_method": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "target": "\nassert circular_shift(<FILL_ME>) == \"21\""}
{"index": 237, "humaneval_task_id": "Python/65", "focal_method_name": "circular_shift", "focal_method_para": "(x, shift)", "focal_method_return_type": null, "focal_method": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "target": "\nassert circular_shift(<FILL_ME>) == \"001\""}
{"index": 238, "humaneval_task_id": "Python/66", "focal_method_name": "digitSum", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "target": "\nassert digitSum(<FILL_ME>) == 153"}
{"index": 239, "humaneval_task_id": "Python/66", "focal_method_name": "digitSum", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "target": "\nassert digitSum(<FILL_ME>) == 151"}
{"index": 240, "humaneval_task_id": "Python/66", "focal_method_name": "digitSum", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "target": "\nassert digitSum(<FILL_ME>) == 69"}
{"index": 241, "humaneval_task_id": "Python/66", "focal_method_name": "digitSum", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "target": "\nassert digitSum(<FILL_ME>) == 0"}
{"index": 242, "humaneval_task_id": "Python/66", "focal_method_name": "digitSum", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "target": "\nassert digitSum(<FILL_ME>) == 131"}
{"index": 243, "humaneval_task_id": "Python/66", "focal_method_name": "digitSum", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "target": "\nassert digitSum(<FILL_ME>) == 327"}
{"index": 244, "humaneval_task_id": "Python/66", "focal_method_name": "digitSum", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "target": "\nassert digitSum(<FILL_ME>) == 67"}
{"index": 245, "humaneval_task_id": "Python/67", "focal_method_name": "fruit_distribution", "focal_method_para": "(s,n)", "focal_method_return_type": null, "focal_method": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "target": "\nassert fruit_distribution(<FILL_ME>) == 10"}
{"index": 246, "humaneval_task_id": "Python/67", "focal_method_name": "fruit_distribution", "focal_method_para": "(s,n)", "focal_method_return_type": null, "focal_method": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "target": "\nassert fruit_distribution(<FILL_ME>) == 2"}
{"index": 247, "humaneval_task_id": "Python/67", "focal_method_name": "fruit_distribution", "focal_method_para": "(s,n)", "focal_method_return_type": null, "focal_method": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "target": "\nassert fruit_distribution(<FILL_ME>) == 0"}
{"index": 248, "humaneval_task_id": "Python/67", "focal_method_name": "fruit_distribution", "focal_method_para": "(s,n)", "focal_method_return_type": null, "focal_method": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "target": "\nassert fruit_distribution(<FILL_ME>) == 8"}
{"index": 249, "humaneval_task_id": "Python/67", "focal_method_name": "fruit_distribution", "focal_method_para": "(s,n)", "focal_method_return_type": null, "focal_method": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "target": "\nassert fruit_distribution(<FILL_ME>) == 95"}
{"index": 250, "humaneval_task_id": "Python/67", "focal_method_name": "fruit_distribution", "focal_method_para": "(s,n)", "focal_method_return_type": null, "focal_method": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "target": "\nassert fruit_distribution(<FILL_ME>) == 19"}
{"index": 251, "humaneval_task_id": "Python/68", "focal_method_name": "pluck", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "target": "\nassert pluck(<FILL_ME>) == []"}
{"index": 252, "humaneval_task_id": "Python/68", "focal_method_name": "pluck", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "target": "\nassert pluck(<FILL_ME>) == [2, 1]"}
{"index": 253, "humaneval_task_id": "Python/68", "focal_method_name": "pluck", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "target": "\nassert pluck(<FILL_ME>) == [0, 3]"}
{"index": 254, "humaneval_task_id": "Python/68", "focal_method_name": "pluck", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "target": "\nassert pluck(<FILL_ME>) == [6, 1]"}
{"index": 255, "humaneval_task_id": "Python/68", "focal_method_name": "pluck", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "target": "\nassert pluck(<FILL_ME>) == [4, 1]"}
{"index": 256, "humaneval_task_id": "Python/68", "focal_method_name": "pluck", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "target": "\nassert pluck(<FILL_ME>) == [0, 1]"}
{"index": 257, "humaneval_task_id": "Python/69", "focal_method_name": "search", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "target": "\nassert search(<FILL_ME>) == 1"}
{"index": 258, "humaneval_task_id": "Python/69", "focal_method_name": "search", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "target": "\nassert search(<FILL_ME>) == 4"}
{"index": 259, "humaneval_task_id": "Python/69", "focal_method_name": "search", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "target": "\nassert search(<FILL_ME>) == -1"}
{"index": 260, "humaneval_task_id": "Python/69", "focal_method_name": "search", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "target": "\nassert search(<FILL_ME>) == 2"}
{"index": 261, "humaneval_task_id": "Python/69", "focal_method_name": "search", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "target": "\nassert search(<FILL_ME>) == 5"}
{"index": 262, "humaneval_task_id": "Python/69", "focal_method_name": "search", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "target": "\nassert search(<FILL_ME>) == 8"}
{"index": 263, "humaneval_task_id": "Python/70", "focal_method_name": "strange_sort_list", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "target": "\nassert strange_sort_list(<FILL_ME>) == []"}
{"index": 264, "humaneval_task_id": "Python/70", "focal_method_name": "strange_sort_list", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "target": "\nassert strange_sort_list(<FILL_ME>) == [5, 9, 6, 8, 7]"}
{"index": 265, "humaneval_task_id": "Python/70", "focal_method_name": "strange_sort_list", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "target": "\nassert strange_sort_list(<FILL_ME>) == [1, 8, 2, 7, 3, 6, 4, 5]"}
{"index": 266, "humaneval_task_id": "Python/70", "focal_method_name": "strange_sort_list", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "target": "\nassert strange_sort_list(<FILL_ME>) == [1, 9, 5, 8, 6, 7]"}
{"index": 267, "humaneval_task_id": "Python/70", "focal_method_name": "strange_sort_list", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "target": "\nassert strange_sort_list(<FILL_ME>) == [111111]"}
{"index": 268, "humaneval_task_id": "Python/70", "focal_method_name": "strange_sort_list", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "target": "\nassert strange_sort_list(<FILL_ME>) == [5, 5, 5, 5]"}
{"index": 269, "humaneval_task_id": "Python/70", "focal_method_name": "strange_sort_list", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "target": "\nassert strange_sort_list(<FILL_ME>) == [1, 4, 2, 3]"}
{"index": 270, "humaneval_task_id": "Python/70", "focal_method_name": "strange_sort_list", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "target": "\nassert strange_sort_list(<FILL_ME>) == [1, 5, 2, 4, 3]"}
{"index": 271, "humaneval_task_id": "Python/70", "focal_method_name": "strange_sort_list", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "target": "\nassert strange_sort_list(<FILL_ME>) == [-5, 5, -5, 5, 0, 2, 2, 2]"}
{"index": 272, "humaneval_task_id": "Python/71", "focal_method_name": "triangle_area", "focal_method_para": "(a, b, c)", "focal_method_return_type": null, "focal_method": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "target": "\nassert triangle_area(<FILL_ME>) == 8.18"}
{"index": 273, "humaneval_task_id": "Python/71", "focal_method_name": "triangle_area", "focal_method_para": "(a, b, c)", "focal_method_return_type": null, "focal_method": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "target": "\nassert triangle_area(<FILL_ME>) == -1"}
{"index": 274, "humaneval_task_id": "Python/71", "focal_method_name": "triangle_area", "focal_method_para": "(a, b, c)", "focal_method_return_type": null, "focal_method": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "target": "\nassert triangle_area(<FILL_ME>) == 6.00"}
{"index": 275, "humaneval_task_id": "Python/71", "focal_method_name": "triangle_area", "focal_method_para": "(a, b, c)", "focal_method_return_type": null, "focal_method": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "target": "\nassert triangle_area(<FILL_ME>) == 0.43"}
{"index": 276, "humaneval_task_id": "Python/71", "focal_method_name": "triangle_area", "focal_method_para": "(a, b, c)", "focal_method_return_type": null, "focal_method": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "target": "\nassert triangle_area(<FILL_ME>) == 1.73"}
{"index": 277, "humaneval_task_id": "Python/71", "focal_method_name": "triangle_area", "focal_method_para": "(a, b, c)", "focal_method_return_type": null, "focal_method": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "target": "\nassert triangle_area(<FILL_ME>) == 16.25"}
{"index": 278, "humaneval_task_id": "Python/72", "focal_method_name": "will_it_fly", "focal_method_para": "(q,w)", "focal_method_return_type": null, "focal_method": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "target": "\nassert will_it_fly(<FILL_ME>) == True"}
{"index": 279, "humaneval_task_id": "Python/72", "focal_method_name": "will_it_fly", "focal_method_para": "(q,w)", "focal_method_return_type": null, "focal_method": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "target": "\nassert will_it_fly(<FILL_ME>) == False"}
{"index": 280, "humaneval_task_id": "Python/73", "focal_method_name": "smallest_change", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "target": "\nassert smallest_change(<FILL_ME>) == 1"}
{"index": 281, "humaneval_task_id": "Python/73", "focal_method_name": "smallest_change", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "target": "\nassert smallest_change(<FILL_ME>) == 0"}
{"index": 282, "humaneval_task_id": "Python/73", "focal_method_name": "smallest_change", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "target": "\nassert smallest_change(<FILL_ME>) == 4"}
{"index": 283, "humaneval_task_id": "Python/74", "focal_method_name": "total_match", "focal_method_para": "(lst1, lst2)", "focal_method_return_type": null, "focal_method": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "target": "\nassert total_match(<FILL_ME>) == []"}
{"index": 284, "humaneval_task_id": "Python/74", "focal_method_name": "total_match", "focal_method_para": "(lst1, lst2)", "focal_method_return_type": null, "focal_method": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "target": "\nassert total_match(<FILL_ME>) == ['4']"}
{"index": 285, "humaneval_task_id": "Python/74", "focal_method_name": "total_match", "focal_method_para": "(lst1, lst2)", "focal_method_return_type": null, "focal_method": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "target": "\nassert total_match(<FILL_ME>) == ['hi', 'hi']"}
{"index": 286, "humaneval_task_id": "Python/74", "focal_method_name": "total_match", "focal_method_para": "(lst1, lst2)", "focal_method_return_type": null, "focal_method": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "target": "\nassert total_match(<FILL_ME>) == ['hI', 'hi', 'hi']"}
{"index": 287, "humaneval_task_id": "Python/74", "focal_method_name": "total_match", "focal_method_para": "(lst1, lst2)", "focal_method_return_type": null, "focal_method": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "target": "\nassert total_match(<FILL_ME>) == ['hI', 'Hi']"}
{"index": 288, "humaneval_task_id": "Python/74", "focal_method_name": "total_match", "focal_method_para": "(lst1, lst2)", "focal_method_return_type": null, "focal_method": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "target": "\nassert total_match(<FILL_ME>) == ['hi', 'admin']"}
{"index": 289, "humaneval_task_id": "Python/75", "focal_method_name": "is_multiply_prime", "focal_method_para": "(a)", "focal_method_return_type": null, "focal_method": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "target": "\nassert is_multiply_prime(<FILL_ME>) == True"}
{"index": 290, "humaneval_task_id": "Python/75", "focal_method_name": "is_multiply_prime", "focal_method_para": "(a)", "focal_method_return_type": null, "focal_method": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "target": "\nassert is_multiply_prime(<FILL_ME>) == False"}
{"index": 291, "humaneval_task_id": "Python/76", "focal_method_name": "is_simple_power", "focal_method_para": "(x, n)", "focal_method_return_type": null, "focal_method": "def is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "target": "\nassert is_simple_power(<FILL_ME>) == True"}
{"index": 292, "humaneval_task_id": "Python/76", "focal_method_name": "is_simple_power", "focal_method_para": "(x, n)", "focal_method_return_type": null, "focal_method": "def is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "target": "\nassert is_simple_power(<FILL_ME>) == False"}
{"index": 293, "humaneval_task_id": "Python/77", "focal_method_name": "iscube", "focal_method_para": "(a)", "focal_method_return_type": null, "focal_method": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "target": "\nassert iscube(<FILL_ME>) == True"}
{"index": 294, "humaneval_task_id": "Python/77", "focal_method_name": "iscube", "focal_method_para": "(a)", "focal_method_return_type": null, "focal_method": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "target": "\nassert iscube(<FILL_ME>) == False"}
{"index": 295, "humaneval_task_id": "Python/78", "focal_method_name": "hex_key", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "target": "\nassert hex_key(<FILL_ME>) == 1"}
{"index": 296, "humaneval_task_id": "Python/78", "focal_method_name": "hex_key", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "target": "\nassert hex_key(<FILL_ME>) == 4"}
{"index": 297, "humaneval_task_id": "Python/78", "focal_method_name": "hex_key", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "target": "\nassert hex_key(<FILL_ME>) == 12"}
{"index": 298, "humaneval_task_id": "Python/78", "focal_method_name": "hex_key", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "target": "\nassert hex_key(<FILL_ME>) == 2"}
{"index": 299, "humaneval_task_id": "Python/78", "focal_method_name": "hex_key", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "target": "\nassert hex_key(<FILL_ME>) == 0"}
{"index": 300, "humaneval_task_id": "Python/78", "focal_method_name": "hex_key", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "target": "\nassert hex_key(<FILL_ME>) == 6"}
{"index": 301, "humaneval_task_id": "Python/79", "focal_method_name": "decimal_to_binary", "focal_method_para": "(decimal)", "focal_method_return_type": null, "focal_method": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "target": "\nassert decimal_to_binary(<FILL_ME>) == \"db100000db\""}
{"index": 302, "humaneval_task_id": "Python/79", "focal_method_name": "decimal_to_binary", "focal_method_para": "(decimal)", "focal_method_return_type": null, "focal_method": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "target": "\nassert decimal_to_binary(<FILL_ME>) == \"db0db\""}
{"index": 303, "humaneval_task_id": "Python/79", "focal_method_name": "decimal_to_binary", "focal_method_para": "(decimal)", "focal_method_return_type": null, "focal_method": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "target": "\nassert decimal_to_binary(<FILL_ME>) == \"db1111db\""}
{"index": 304, "humaneval_task_id": "Python/79", "focal_method_name": "decimal_to_binary", "focal_method_para": "(decimal)", "focal_method_return_type": null, "focal_method": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "target": "\nassert decimal_to_binary(<FILL_ME>) == \"db1100111db\""}
{"index": 305, "humaneval_task_id": "Python/80", "focal_method_name": "is_happy", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "target": "\nassert is_happy(<FILL_ME>) == True"}
{"index": 306, "humaneval_task_id": "Python/80", "focal_method_name": "is_happy", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "target": "\nassert is_happy(<FILL_ME>) == False"}
{"index": 307, "humaneval_task_id": "Python/81", "focal_method_name": "numerical_letter_grade", "focal_method_para": "(grades)", "focal_method_return_type": null, "focal_method": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "target": "\nassert numerical_letter_grade(<FILL_ME>) == ['A+', 'B', 'C-', 'C', 'A-']"}
{"index": 308, "humaneval_task_id": "Python/81", "focal_method_name": "numerical_letter_grade", "focal_method_para": "(grades)", "focal_method_return_type": null, "focal_method": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "target": "\nassert numerical_letter_grade(<FILL_ME>) == ['E']"}
{"index": 309, "humaneval_task_id": "Python/81", "focal_method_name": "numerical_letter_grade", "focal_method_para": "(grades)", "focal_method_return_type": null, "focal_method": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "target": "\nassert numerical_letter_grade(<FILL_ME>) == ['E', 'D-']"}
{"index": 310, "humaneval_task_id": "Python/81", "focal_method_name": "numerical_letter_grade", "focal_method_para": "(grades)", "focal_method_return_type": null, "focal_method": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "target": "\nassert numerical_letter_grade(<FILL_ME>) == ['D-']"}
{"index": 311, "humaneval_task_id": "Python/81", "focal_method_name": "numerical_letter_grade", "focal_method_para": "(grades)", "focal_method_return_type": null, "focal_method": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "target": "\nassert numerical_letter_grade(<FILL_ME>) == ['D+']"}
{"index": 312, "humaneval_task_id": "Python/81", "focal_method_name": "numerical_letter_grade", "focal_method_para": "(grades)", "focal_method_return_type": null, "focal_method": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "target": "\nassert numerical_letter_grade(<FILL_ME>) == ['D', 'D-', 'C-', 'B', 'B+']"}
{"index": 313, "humaneval_task_id": "Python/82", "focal_method_name": "prime_length", "focal_method_para": "(string)", "focal_method_return_type": null, "focal_method": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "target": "\nassert prime_length(<FILL_ME>) == True"}
{"index": 314, "humaneval_task_id": "Python/82", "focal_method_name": "prime_length", "focal_method_para": "(string)", "focal_method_return_type": null, "focal_method": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "target": "\nassert prime_length(<FILL_ME>) == False"}
{"index": 315, "humaneval_task_id": "Python/83", "focal_method_name": "starts_one_ends", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "target": "\nassert starts_one_ends(<FILL_ME>) == 1"}
{"index": 316, "humaneval_task_id": "Python/83", "focal_method_name": "starts_one_ends", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "target": "\nassert starts_one_ends(<FILL_ME>) == 180"}
{"index": 317, "humaneval_task_id": "Python/83", "focal_method_name": "starts_one_ends", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "target": "\nassert starts_one_ends(<FILL_ME>) == 1800"}
{"index": 318, "humaneval_task_id": "Python/83", "focal_method_name": "starts_one_ends", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "target": "\nassert starts_one_ends(<FILL_ME>) == 18"}
{"index": 319, "humaneval_task_id": "Python/83", "focal_method_name": "starts_one_ends", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "target": "\nassert starts_one_ends(<FILL_ME>) == 18000"}
{"index": 320, "humaneval_task_id": "Python/84", "focal_method_name": "solve", "focal_method_para": "(N)", "focal_method_return_type": null, "focal_method": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "target": "\nassert solve(<FILL_ME>) == \"10010\""}
{"index": 321, "humaneval_task_id": "Python/84", "focal_method_name": "solve", "focal_method_para": "(N)", "focal_method_return_type": null, "focal_method": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "target": "\nassert solve(<FILL_ME>) == \"1001\""}
{"index": 322, "humaneval_task_id": "Python/84", "focal_method_name": "solve", "focal_method_para": "(N)", "focal_method_return_type": null, "focal_method": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "target": "\nassert solve(<FILL_ME>) == \"1\""}
{"index": 323, "humaneval_task_id": "Python/84", "focal_method_name": "solve", "focal_method_para": "(N)", "focal_method_return_type": null, "focal_method": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "target": "\nassert solve(<FILL_ME>) == \"110\""}
{"index": 324, "humaneval_task_id": "Python/84", "focal_method_name": "solve", "focal_method_para": "(N)", "focal_method_return_type": null, "focal_method": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "target": "\nassert solve(<FILL_ME>) == \"1100\""}
{"index": 325, "humaneval_task_id": "Python/85", "focal_method_name": "add", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "target": "\nassert add(<FILL_ME>) == 122"}
{"index": 326, "humaneval_task_id": "Python/85", "focal_method_name": "add", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "target": "\nassert add(<FILL_ME>) == 0"}
{"index": 327, "humaneval_task_id": "Python/85", "focal_method_name": "add", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "target": "\nassert add(<FILL_ME>) == 88"}
{"index": 328, "humaneval_task_id": "Python/85", "focal_method_name": "add", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "target": "\nassert add(<FILL_ME>) == 12"}
{"index": 329, "humaneval_task_id": "Python/86", "focal_method_name": "anti_shuffle", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "target": "\nassert anti_shuffle(<FILL_ME>) == 'bemnru'"}
{"index": 330, "humaneval_task_id": "Python/86", "focal_method_name": "anti_shuffle", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "target": "\nassert anti_shuffle(<FILL_ME>) == ''"}
{"index": 331, "humaneval_task_id": "Python/86", "focal_method_name": "anti_shuffle", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "target": "\nassert anti_shuffle(<FILL_ME>) == 'Hi'"}
{"index": 332, "humaneval_task_id": "Python/86", "focal_method_name": "anti_shuffle", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "target": "\nassert anti_shuffle(<FILL_ME>) == '.Hi My aemn is Meirst .Rboot How aer ?ouy'"}
{"index": 333, "humaneval_task_id": "Python/86", "focal_method_name": "anti_shuffle", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "target": "\nassert anti_shuffle(<FILL_ME>) == 'Hello !!!Wdlor'"}
{"index": 334, "humaneval_task_id": "Python/86", "focal_method_name": "anti_shuffle", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "target": "\nassert anti_shuffle(<FILL_ME>) == 'abcd'"}
{"index": 335, "humaneval_task_id": "Python/86", "focal_method_name": "anti_shuffle", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "target": "\nassert anti_shuffle(<FILL_ME>) == 'ehllo'"}
{"index": 336, "humaneval_task_id": "Python/87", "focal_method_name": "get_row", "focal_method_para": "(lst, x)", "focal_method_return_type": null, "focal_method": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "target": "\nassert get_row(<FILL_ME>) == []"}
{"index": 337, "humaneval_task_id": "Python/87", "focal_method_name": "get_row", "focal_method_para": "(lst, x)", "focal_method_return_type": null, "focal_method": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "target": "\nassert get_row(<FILL_ME>) == [(2, 2)]"}
{"index": 338, "humaneval_task_id": "Python/87", "focal_method_name": "get_row", "focal_method_para": "(lst, x)", "focal_method_return_type": null, "focal_method": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "target": "\nassert get_row(<FILL_ME>) == True"}
{"index": 339, "humaneval_task_id": "Python/87", "focal_method_name": "get_row", "focal_method_para": "(lst, x)", "focal_method_return_type": null, "focal_method": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "target": "\nassert get_row(<FILL_ME>) == False"}
{"index": 340, "humaneval_task_id": "Python/88", "focal_method_name": "sort_array", "focal_method_para": "(array)", "focal_method_return_type": null, "focal_method": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "target": "\nassert sort_array(<FILL_ME>) == []"}
{"index": 341, "humaneval_task_id": "Python/88", "focal_method_name": "sort_array", "focal_method_para": "(array)", "focal_method_return_type": null, "focal_method": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "target": "\nassert sort_array(<FILL_ME>) == [0, 1, 2, 3, 4, 5]"}
{"index": 342, "humaneval_task_id": "Python/88", "focal_method_name": "sort_array", "focal_method_para": "(array)", "focal_method_return_type": null, "focal_method": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "target": "\nassert sort_array(<FILL_ME>) == [23, 21, 14, 11]"}
{"index": 343, "humaneval_task_id": "Python/88", "focal_method_name": "sort_array", "focal_method_para": "(array)", "focal_method_return_type": null, "focal_method": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "target": "\nassert sort_array(<FILL_ME>) == [6, 5, 4, 3, 2, 1, 0]"}
{"index": 344, "humaneval_task_id": "Python/88", "focal_method_name": "sort_array", "focal_method_para": "(array)", "focal_method_return_type": null, "focal_method": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "target": "\nassert sort_array(<FILL_ME>) == [5]"}
{"index": 345, "humaneval_task_id": "Python/88", "focal_method_name": "sort_array", "focal_method_para": "(array)", "focal_method_return_type": null, "focal_method": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "target": "\nassert sort_array(<FILL_ME>) == [0, 11, 15, 32, 42, 87]"}
{"index": 346, "humaneval_task_id": "Python/88", "focal_method_name": "sort_array", "focal_method_para": "(array)", "focal_method_return_type": null, "focal_method": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "target": "\nassert sort_array(<FILL_ME>) == [1, 2]"}
{"index": 347, "humaneval_task_id": "Python/89", "focal_method_name": "encrypt", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "target": "\nassert encrypt(<FILL_ME>) == 'lm'"}
{"index": 348, "humaneval_task_id": "Python/89", "focal_method_name": "encrypt", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "target": "\nassert encrypt(<FILL_ME>) == 'kj'"}
{"index": 349, "humaneval_task_id": "Python/89", "focal_method_name": "encrypt", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "target": "\nassert encrypt(<FILL_ME>) == 'ewhjklnop'"}
{"index": 350, "humaneval_task_id": "Python/89", "focal_method_name": "encrypt", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "target": "\nassert encrypt(<FILL_ME>) == 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'"}
{"index": 351, "humaneval_task_id": "Python/89", "focal_method_name": "encrypt", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "target": "\nassert encrypt(<FILL_ME>) == 'lippsqcjvmirh'"}
{"index": 352, "humaneval_task_id": "Python/89", "focal_method_name": "encrypt", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "target": "\nassert encrypt(<FILL_ME>) == 'jeiajeaijeiak'"}
{"index": 353, "humaneval_task_id": "Python/89", "focal_method_name": "encrypt", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "target": "\nassert encrypt(<FILL_ME>) == 'e'"}
{"index": 354, "humaneval_task_id": "Python/89", "focal_method_name": "encrypt", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "target": "\nassert encrypt(<FILL_ME>) == 'ix'"}
{"index": 355, "humaneval_task_id": "Python/90", "focal_method_name": "next_smallest", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "target": "\nassert next_smallest(<FILL_ME>) == None"}
{"index": 356, "humaneval_task_id": "Python/90", "focal_method_name": "next_smallest", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "target": "\nassert next_smallest(<FILL_ME>) == 1"}
{"index": 357, "humaneval_task_id": "Python/90", "focal_method_name": "next_smallest", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "target": "\nassert next_smallest(<FILL_ME>) == -35"}
{"index": 358, "humaneval_task_id": "Python/90", "focal_method_name": "next_smallest", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "target": "\nassert next_smallest(<FILL_ME>) == 2"}
{"index": 359, "humaneval_task_id": "Python/91", "focal_method_name": "is_bored", "focal_method_para": "(S)", "focal_method_return_type": null, "focal_method": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "target": "\nassert is_bored(<FILL_ME>) == 1"}
{"index": 360, "humaneval_task_id": "Python/91", "focal_method_name": "is_bored", "focal_method_para": "(S)", "focal_method_return_type": null, "focal_method": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "target": "\nassert is_bored(<FILL_ME>) == 0"}
{"index": 361, "humaneval_task_id": "Python/91", "focal_method_name": "is_bored", "focal_method_para": "(S)", "focal_method_return_type": null, "focal_method": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "target": "\nassert is_bored(<FILL_ME>) == 2"}
{"index": 362, "humaneval_task_id": "Python/92", "focal_method_name": "any_int", "focal_method_para": "(x, y, z)", "focal_method_return_type": null, "focal_method": "def any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "target": "\nassert any_int(<FILL_ME>) == True"}
{"index": 363, "humaneval_task_id": "Python/92", "focal_method_name": "any_int", "focal_method_para": "(x, y, z)", "focal_method_return_type": null, "focal_method": "def any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "target": "\nassert any_int(<FILL_ME>) == False"}
{"index": 364, "humaneval_task_id": "Python/93", "focal_method_name": "encode", "focal_method_para": "(message)", "focal_method_return_type": null, "focal_method": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "target": "\nassert encode(<FILL_ME>) == 'k dQnT kNqW wHcT Tq wRkTg'"}
{"index": 365, "humaneval_task_id": "Python/93", "focal_method_name": "encode", "focal_method_para": "(message)", "focal_method_return_type": null, "focal_method": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "target": "\nassert encode(<FILL_ME>) == 'tgst'"}
{"index": 366, "humaneval_task_id": "Python/93", "focal_method_name": "encode", "focal_method_para": "(message)", "focal_method_return_type": null, "focal_method": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "target": "\nassert encode(<FILL_ME>) == 'ygs'"}
{"index": 367, "humaneval_task_id": "Python/93", "focal_method_name": "encode", "focal_method_para": "(message)", "focal_method_return_type": null, "focal_method": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "target": "\nassert encode(<FILL_ME>) == 'tHKS KS C MGSSCGG'"}
{"index": 368, "humaneval_task_id": "Python/93", "focal_method_name": "encode", "focal_method_para": "(message)", "focal_method_return_type": null, "focal_method": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "target": "\nassert encode(<FILL_ME>) == 'mWDCSKR'"}
{"index": 369, "humaneval_task_id": "Python/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "target": "\nassert skjkasdkd(<FILL_ME>) == 10"}
{"index": 370, "humaneval_task_id": "Python/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "target": "\nassert skjkasdkd(<FILL_ME>) == 3"}
{"index": 371, "humaneval_task_id": "Python/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "target": "\nassert skjkasdkd(<FILL_ME>) == 25"}
{"index": 372, "humaneval_task_id": "Python/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "target": "\nassert skjkasdkd(<FILL_ME>) == 11"}
{"index": 373, "humaneval_task_id": "Python/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "target": "\nassert skjkasdkd(<FILL_ME>) == 13"}
{"index": 374, "humaneval_task_id": "Python/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "target": "\nassert skjkasdkd(<FILL_ME>) == 7"}
{"index": 375, "humaneval_task_id": "Python/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "target": "\nassert skjkasdkd(<FILL_ME>) == 19"}
{"index": 376, "humaneval_task_id": "Python/95", "focal_method_name": "check_dict_case", "focal_method_para": "(dict)", "focal_method_return_type": null, "focal_method": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "target": "\nassert check_dict_case(<FILL_ME>) == True"}
{"index": 377, "humaneval_task_id": "Python/95", "focal_method_name": "check_dict_case", "focal_method_para": "(dict)", "focal_method_return_type": null, "focal_method": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "target": "\nassert check_dict_case(<FILL_ME>) == False"}
{"index": 378, "humaneval_task_id": "Python/96", "focal_method_name": "count_up_to", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "target": "\nassert count_up_to(<FILL_ME>) == []"}
{"index": 379, "humaneval_task_id": "Python/96", "focal_method_name": "count_up_to", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "target": "\nassert count_up_to(<FILL_ME>) == [2,3,5,7,11,13,17,19]"}
{"index": 380, "humaneval_task_id": "Python/96", "focal_method_name": "count_up_to", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "target": "\nassert count_up_to(<FILL_ME>) == [2,3,5,7]"}
{"index": 381, "humaneval_task_id": "Python/96", "focal_method_name": "count_up_to", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "target": "\nassert count_up_to(<FILL_ME>) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]"}
{"index": 382, "humaneval_task_id": "Python/96", "focal_method_name": "count_up_to", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "target": "\nassert count_up_to(<FILL_ME>) == [2,3,5,7,11,13,17]"}
{"index": 383, "humaneval_task_id": "Python/96", "focal_method_name": "count_up_to", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "target": "\nassert count_up_to(<FILL_ME>) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"}
{"index": 384, "humaneval_task_id": "Python/96", "focal_method_name": "count_up_to", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "target": "\nassert count_up_to(<FILL_ME>) == [2,3]"}
{"index": 385, "humaneval_task_id": "Python/96", "focal_method_name": "count_up_to", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "target": "\nassert count_up_to(<FILL_ME>) == [2,3,5]"}
{"index": 386, "humaneval_task_id": "Python/97", "focal_method_name": "multiply", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "target": "\nassert multiply(<FILL_ME>) == 42"}
{"index": 387, "humaneval_task_id": "Python/97", "focal_method_name": "multiply", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "target": "\nassert multiply(<FILL_ME>) == 72"}
{"index": 388, "humaneval_task_id": "Python/97", "focal_method_name": "multiply", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "target": "\nassert multiply(<FILL_ME>) == 16"}
{"index": 389, "humaneval_task_id": "Python/97", "focal_method_name": "multiply", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "target": "\nassert multiply(<FILL_ME>) == 0"}
{"index": 390, "humaneval_task_id": "Python/97", "focal_method_name": "multiply", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "target": "\nassert multiply(<FILL_ME>) == 49"}
{"index": 391, "humaneval_task_id": "Python/97", "focal_method_name": "multiply", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "target": "\nassert multiply(<FILL_ME>) == 20"}
{"index": 392, "humaneval_task_id": "Python/98", "focal_method_name": "count_upper", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "target": "\nassert count_upper(<FILL_ME>) == 1"}
{"index": 393, "humaneval_task_id": "Python/98", "focal_method_name": "count_upper", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "target": "\nassert count_upper(<FILL_ME>) == 0"}
{"index": 394, "humaneval_task_id": "Python/98", "focal_method_name": "count_upper", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "target": "\nassert count_upper(<FILL_ME>) == 2"}
{"index": 395, "humaneval_task_id": "Python/99", "focal_method_name": "closest_integer", "focal_method_para": "(value)", "focal_method_return_type": null, "focal_method": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "target": "\nassert closest_integer(<FILL_ME>) == 15"}
{"index": 396, "humaneval_task_id": "Python/99", "focal_method_name": "closest_integer", "focal_method_para": "(value)", "focal_method_return_type": null, "focal_method": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "target": "\nassert closest_integer(<FILL_ME>) == 0"}
{"index": 397, "humaneval_task_id": "Python/99", "focal_method_name": "closest_integer", "focal_method_para": "(value)", "focal_method_return_type": null, "focal_method": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "target": "\nassert closest_integer(<FILL_ME>) == 10"}
{"index": 398, "humaneval_task_id": "Python/99", "focal_method_name": "closest_integer", "focal_method_para": "(value)", "focal_method_return_type": null, "focal_method": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "target": "\nassert closest_integer(<FILL_ME>) == -16"}
{"index": 399, "humaneval_task_id": "Python/100", "focal_method_name": "make_a_pile", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n", "target": "\nassert make_a_pile(<FILL_ME>) == [5, 7, 9, 11, 13]"}
{"index": 400, "humaneval_task_id": "Python/100", "focal_method_name": "make_a_pile", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n", "target": "\nassert make_a_pile(<FILL_ME>) == [6, 8, 10, 12, 14, 16]"}
{"index": 401, "humaneval_task_id": "Python/100", "focal_method_name": "make_a_pile", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n", "target": "\nassert make_a_pile(<FILL_ME>) == [4,6,8,10]"}
{"index": 402, "humaneval_task_id": "Python/100", "focal_method_name": "make_a_pile", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n", "target": "\nassert make_a_pile(<FILL_ME>) == [3, 5, 7]"}
{"index": 403, "humaneval_task_id": "Python/100", "focal_method_name": "make_a_pile", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n", "target": "\nassert make_a_pile(<FILL_ME>) == [8, 10, 12, 14, 16, 18, 20, 22]"}
{"index": 404, "humaneval_task_id": "Python/101", "focal_method_name": "words_string", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "target": "\nassert words_string(<FILL_ME>) == []"}
{"index": 405, "humaneval_task_id": "Python/101", "focal_method_name": "words_string", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "target": "\nassert words_string(<FILL_ME>) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]"}
{"index": 406, "humaneval_task_id": "Python/101", "focal_method_name": "words_string", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "target": "\nassert words_string(<FILL_ME>) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"index": 407, "humaneval_task_id": "Python/101", "focal_method_name": "words_string", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "target": "\nassert words_string(<FILL_ME>) == [\"ahmed\", \"gamal\"]"}
{"index": 408, "humaneval_task_id": "Python/101", "focal_method_name": "words_string", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "target": "\nassert words_string(<FILL_ME>) == [\"Hi\", \"my\", \"name\"]"}
{"index": 409, "humaneval_task_id": "Python/102", "focal_method_name": "choose_num", "focal_method_para": "(x, y)", "focal_method_return_type": null, "focal_method": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "target": "\nassert choose_num(<FILL_ME>) == 546"}
{"index": 410, "humaneval_task_id": "Python/102", "focal_method_name": "choose_num", "focal_method_para": "(x, y)", "focal_method_return_type": null, "focal_method": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "target": "\nassert choose_num(<FILL_ME>) == -1"}
{"index": 411, "humaneval_task_id": "Python/102", "focal_method_name": "choose_num", "focal_method_para": "(x, y)", "focal_method_return_type": null, "focal_method": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "target": "\nassert choose_num(<FILL_ME>) == 14"}
{"index": 412, "humaneval_task_id": "Python/102", "focal_method_name": "choose_num", "focal_method_para": "(x, y)", "focal_method_return_type": null, "focal_method": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "target": "\nassert choose_num(<FILL_ME>) == 28"}
{"index": 413, "humaneval_task_id": "Python/102", "focal_method_name": "choose_num", "focal_method_para": "(x, y)", "focal_method_return_type": null, "focal_method": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "target": "\nassert choose_num(<FILL_ME>) == 12354"}
{"index": 414, "humaneval_task_id": "Python/103", "focal_method_name": "rounded_avg", "focal_method_para": "(n, m)", "focal_method_return_type": null, "focal_method": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "target": "\nassert rounded_avg(<FILL_ME>) == \"0b1010\""}
{"index": 415, "humaneval_task_id": "Python/103", "focal_method_name": "rounded_avg", "focal_method_para": "(n, m)", "focal_method_return_type": null, "focal_method": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "target": "\nassert rounded_avg(<FILL_ME>) == \"0b11010111\""}
{"index": 416, "humaneval_task_id": "Python/103", "focal_method_name": "rounded_avg", "focal_method_para": "(n, m)", "focal_method_return_type": null, "focal_method": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "target": "\nassert rounded_avg(<FILL_ME>) == -1"}
{"index": 417, "humaneval_task_id": "Python/103", "focal_method_name": "rounded_avg", "focal_method_para": "(n, m)", "focal_method_return_type": null, "focal_method": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "target": "\nassert rounded_avg(<FILL_ME>) == \"0b1111100100\""}
{"index": 418, "humaneval_task_id": "Python/103", "focal_method_name": "rounded_avg", "focal_method_para": "(n, m)", "focal_method_return_type": null, "focal_method": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "target": "\nassert rounded_avg(<FILL_ME>) == \"0b101\""}
{"index": 419, "humaneval_task_id": "Python/103", "focal_method_name": "rounded_avg", "focal_method_para": "(n, m)", "focal_method_return_type": null, "focal_method": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "target": "\nassert rounded_avg(<FILL_ME>) == \"0b1111001010\""}
{"index": 420, "humaneval_task_id": "Python/103", "focal_method_name": "rounded_avg", "focal_method_para": "(n, m)", "focal_method_return_type": null, "focal_method": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "target": "\nassert rounded_avg(<FILL_ME>) == \"0b1011000010\""}
{"index": 421, "humaneval_task_id": "Python/103", "focal_method_name": "rounded_avg", "focal_method_para": "(n, m)", "focal_method_return_type": null, "focal_method": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "target": "\nassert rounded_avg(<FILL_ME>) == \"0b101101110\""}
{"index": 422, "humaneval_task_id": "Python/103", "focal_method_name": "rounded_avg", "focal_method_para": "(n, m)", "focal_method_return_type": null, "focal_method": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "target": "\nassert rounded_avg(<FILL_ME>) == \"0b1001110010\""}
{"index": 423, "humaneval_task_id": "Python/103", "focal_method_name": "rounded_avg", "focal_method_para": "(n, m)", "focal_method_return_type": null, "focal_method": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "target": "\nassert rounded_avg(<FILL_ME>) == \"0b110101101\""}
{"index": 424, "humaneval_task_id": "Python/103", "focal_method_name": "rounded_avg", "focal_method_para": "(n, m)", "focal_method_return_type": null, "focal_method": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "target": "\nassert rounded_avg(<FILL_ME>) == \"0b11\""}
{"index": 425, "humaneval_task_id": "Python/104", "focal_method_name": "unique_digits", "focal_method_para": "(x)", "focal_method_return_type": null, "focal_method": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "target": "\nassert unique_digits(<FILL_ME>) == []"}
{"index": 426, "humaneval_task_id": "Python/104", "focal_method_name": "unique_digits", "focal_method_para": "(x)", "focal_method_return_type": null, "focal_method": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "target": "\nassert unique_digits(<FILL_ME>) == [1, 15, 33]"}
{"index": 427, "humaneval_task_id": "Python/104", "focal_method_name": "unique_digits", "focal_method_para": "(x)", "focal_method_return_type": null, "focal_method": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "target": "\nassert unique_digits(<FILL_ME>) == [31, 135]"}
{"index": 428, "humaneval_task_id": "Python/104", "focal_method_name": "unique_digits", "focal_method_para": "(x)", "focal_method_return_type": null, "focal_method": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "target": "\nassert unique_digits(<FILL_ME>) == [111, 151]"}
{"index": 429, "humaneval_task_id": "Python/105", "focal_method_name": "by_length", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "target": "\nassert by_length(<FILL_ME>) == []"}
{"index": 430, "humaneval_task_id": "Python/105", "focal_method_name": "by_length", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "target": "\nassert by_length(<FILL_ME>) == [\"Three\", \"Two\", \"One\"]"}
{"index": 431, "humaneval_task_id": "Python/105", "focal_method_name": "by_length", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "target": "\nassert by_length(<FILL_ME>) == [\"Nine\", \"Eight\", \"Four\"]"}
{"index": 432, "humaneval_task_id": "Python/105", "focal_method_name": "by_length", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "target": "\nassert by_length(<FILL_ME>) == ['One']"}
{"index": 433, "humaneval_task_id": "Python/105", "focal_method_name": "by_length", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "target": "\nassert by_length(<FILL_ME>) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]"}
{"index": 434, "humaneval_task_id": "Python/106", "focal_method_name": "f", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "target": "\nassert f(<FILL_ME>) == [1, 2, 6]"}
{"index": 435, "humaneval_task_id": "Python/106", "focal_method_name": "f", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "target": "\nassert f(<FILL_ME>) == [1, 2, 6, 24, 15, 720, 28]"}
{"index": 436, "humaneval_task_id": "Python/106", "focal_method_name": "f", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "target": "\nassert f(<FILL_ME>) == [1]"}
{"index": 437, "humaneval_task_id": "Python/106", "focal_method_name": "f", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "target": "\nassert f(<FILL_ME>) == [1, 2, 6, 24, 15]"}
{"index": 438, "humaneval_task_id": "Python/107", "focal_method_name": "even_odd_palindrome", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "target": "\nassert even_odd_palindrome(<FILL_ME>) == (5, 6)"}
{"index": 439, "humaneval_task_id": "Python/107", "focal_method_name": "even_odd_palindrome", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "target": "\nassert even_odd_palindrome(<FILL_ME>) == (4, 5)"}
{"index": 440, "humaneval_task_id": "Python/107", "focal_method_name": "even_odd_palindrome", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "target": "\nassert even_odd_palindrome(<FILL_ME>) == (4, 6)"}
{"index": 441, "humaneval_task_id": "Python/107", "focal_method_name": "even_odd_palindrome", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "target": "\nassert even_odd_palindrome(<FILL_ME>) == (8, 13)"}
{"index": 442, "humaneval_task_id": "Python/107", "focal_method_name": "even_odd_palindrome", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "target": "\nassert even_odd_palindrome(<FILL_ME>) == (0, 1)"}
{"index": 443, "humaneval_task_id": "Python/107", "focal_method_name": "even_odd_palindrome", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "target": "\nassert even_odd_palindrome(<FILL_ME>) == (1, 2)"}
{"index": 444, "humaneval_task_id": "Python/107", "focal_method_name": "even_odd_palindrome", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "target": "\nassert even_odd_palindrome(<FILL_ME>) == (6, 8)"}
{"index": 445, "humaneval_task_id": "Python/108", "focal_method_name": "count_nums", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "target": "\nassert count_nums(<FILL_ME>) == 1"}
{"index": 446, "humaneval_task_id": "Python/108", "focal_method_name": "count_nums", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "target": "\nassert count_nums(<FILL_ME>) == 4"}
{"index": 447, "humaneval_task_id": "Python/108", "focal_method_name": "count_nums", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "target": "\nassert count_nums(<FILL_ME>) == 5"}
{"index": 448, "humaneval_task_id": "Python/108", "focal_method_name": "count_nums", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "target": "\nassert count_nums(<FILL_ME>) == 0"}
{"index": 449, "humaneval_task_id": "Python/108", "focal_method_name": "count_nums", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "target": "\nassert count_nums(<FILL_ME>) == 6"}
{"index": 450, "humaneval_task_id": "Python/109", "focal_method_name": "move_one_ball", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "target": "\nassert move_one_ball(<FILL_ME>) == True"}
{"index": 451, "humaneval_task_id": "Python/109", "focal_method_name": "move_one_ball", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "target": "\nassert move_one_ball(<FILL_ME>) == False"}
{"index": 452, "humaneval_task_id": "Python/110", "focal_method_name": "exchange", "focal_method_para": "(lst1, lst2)", "focal_method_return_type": null, "focal_method": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "target": "\nassert exchange(<FILL_ME>) == \"YES\""}
{"index": 453, "humaneval_task_id": "Python/110", "focal_method_name": "exchange", "focal_method_para": "(lst1, lst2)", "focal_method_return_type": null, "focal_method": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "target": "\nassert exchange(<FILL_ME>) == \"NO\""}
{"index": 454, "humaneval_task_id": "Python/111", "focal_method_name": "histogram", "focal_method_para": "(test)", "focal_method_return_type": null, "focal_method": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "target": "\nassert histogram(<FILL_ME>) == {'r': 1,'t': 1,'g': 1}"}
{"index": 455, "humaneval_task_id": "Python/111", "focal_method_name": "histogram", "focal_method_para": "(test)", "focal_method_return_type": null, "focal_method": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "target": "\nassert histogram(<FILL_ME>) == {'a':2,'b': 2}"}
{"index": 456, "humaneval_task_id": "Python/111", "focal_method_name": "histogram", "focal_method_para": "(test)", "focal_method_return_type": null, "focal_method": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "target": "\nassert histogram(<FILL_ME>) == {}"}
{"index": 457, "humaneval_task_id": "Python/111", "focal_method_name": "histogram", "focal_method_para": "(test)", "focal_method_return_type": null, "focal_method": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "target": "\nassert histogram(<FILL_ME>) == {'a': 1}"}
{"index": 458, "humaneval_task_id": "Python/111", "focal_method_name": "histogram", "focal_method_para": "(test)", "focal_method_return_type": null, "focal_method": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "target": "\nassert histogram(<FILL_ME>) == {'b': 4}"}
{"index": 459, "humaneval_task_id": "Python/111", "focal_method_name": "histogram", "focal_method_para": "(test)", "focal_method_return_type": null, "focal_method": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "target": "\nassert histogram(<FILL_ME>) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}"}
{"index": 460, "humaneval_task_id": "Python/111", "focal_method_name": "histogram", "focal_method_para": "(test)", "focal_method_return_type": null, "focal_method": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "target": "\nassert histogram(<FILL_ME>) == {'a': 2, 'b': 2}"}
{"index": 461, "humaneval_task_id": "Python/112", "focal_method_name": "reverse_delete", "focal_method_para": "(s,c)", "focal_method_return_type": null, "focal_method": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "target": "\nassert reverse_delete(<FILL_ME>) == ('cdedc',True)"}
{"index": 462, "humaneval_task_id": "Python/112", "focal_method_name": "reverse_delete", "focal_method_para": "(s,c)", "focal_method_return_type": null, "focal_method": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "target": "\nassert reverse_delete(<FILL_ME>) == ('abcdedcba',True)"}
{"index": 463, "humaneval_task_id": "Python/112", "focal_method_name": "reverse_delete", "focal_method_para": "(s,c)", "focal_method_return_type": null, "focal_method": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "target": "\nassert reverse_delete(<FILL_ME>) == ('',True)"}
{"index": 464, "humaneval_task_id": "Python/112", "focal_method_name": "reverse_delete", "focal_method_para": "(s,c)", "focal_method_return_type": null, "focal_method": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "target": "\nassert reverse_delete(<FILL_ME>) == (\"\", True)"}
{"index": 465, "humaneval_task_id": "Python/112", "focal_method_name": "reverse_delete", "focal_method_para": "(s,c)", "focal_method_return_type": null, "focal_method": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "target": "\nassert reverse_delete(<FILL_ME>) == ('acdef',False)"}
{"index": 466, "humaneval_task_id": "Python/112", "focal_method_name": "reverse_delete", "focal_method_para": "(s,c)", "focal_method_return_type": null, "focal_method": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "target": "\nassert reverse_delete(<FILL_ME>) == ('bcd',False)"}
{"index": 467, "humaneval_task_id": "Python/112", "focal_method_name": "reverse_delete", "focal_method_para": "(s,c)", "focal_method_return_type": null, "focal_method": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "target": "\nassert reverse_delete(<FILL_ME>) == ('abba',True)"}
{"index": 468, "humaneval_task_id": "Python/112", "focal_method_name": "reverse_delete", "focal_method_para": "(s,c)", "focal_method_return_type": null, "focal_method": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "target": "\nassert reverse_delete(<FILL_ME>) == ('dik',False)"}
{"index": 469, "humaneval_task_id": "Python/113", "focal_method_name": "odd_count", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "target": "\nassert odd_count(<FILL_ME>) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"index": 470, "humaneval_task_id": "Python/113", "focal_method_name": "odd_count", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "target": "\nassert odd_count(<FILL_ME>) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]"}
{"index": 471, "humaneval_task_id": "Python/113", "focal_method_name": "odd_count", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "target": "\nassert odd_count(<FILL_ME>) == True"}
{"index": 472, "humaneval_task_id": "Python/113", "focal_method_name": "odd_count", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "target": "\nassert odd_count(<FILL_ME>) == False"}
{"index": 473, "humaneval_task_id": "Python/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "target": "\nassert minSubArraySum(<FILL_ME>) == -14"}
{"index": 474, "humaneval_task_id": "Python/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "target": "\nassert minSubArraySum(<FILL_ME>) == 1"}
{"index": 475, "humaneval_task_id": "Python/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "target": "\nassert minSubArraySum(<FILL_ME>) == -33"}
{"index": 476, "humaneval_task_id": "Python/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "target": "\nassert minSubArraySum(<FILL_ME>) == 3"}
{"index": 477, "humaneval_task_id": "Python/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "target": "\nassert minSubArraySum(<FILL_ME>) == -1"}
{"index": 478, "humaneval_task_id": "Python/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "target": "\nassert minSubArraySum(<FILL_ME>) == -6"}
{"index": 479, "humaneval_task_id": "Python/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "target": "\nassert minSubArraySum(<FILL_ME>) == 0"}
{"index": 480, "humaneval_task_id": "Python/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "target": "\nassert minSubArraySum(<FILL_ME>) == 7"}
{"index": 481, "humaneval_task_id": "Python/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "target": "\nassert minSubArraySum(<FILL_ME>) == -10"}
{"index": 482, "humaneval_task_id": "Python/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "target": "\nassert minSubArraySum(<FILL_ME>) == -9999999999999999"}
{"index": 483, "humaneval_task_id": "Python/115", "focal_method_name": "max_fill", "focal_method_para": "(grid, capacity)", "focal_method_return_type": null, "focal_method": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "target": "\nassert max_fill(<FILL_ME>) == 4"}
{"index": 484, "humaneval_task_id": "Python/115", "focal_method_name": "max_fill", "focal_method_para": "(grid, capacity)", "focal_method_return_type": null, "focal_method": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "target": "\nassert max_fill(<FILL_ME>) == 2"}
{"index": 485, "humaneval_task_id": "Python/115", "focal_method_name": "max_fill", "focal_method_para": "(grid, capacity)", "focal_method_return_type": null, "focal_method": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "target": "\nassert max_fill(<FILL_ME>) == 5"}
{"index": 486, "humaneval_task_id": "Python/115", "focal_method_name": "max_fill", "focal_method_para": "(grid, capacity)", "focal_method_return_type": null, "focal_method": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "target": "\nassert max_fill(<FILL_ME>) == 0"}
{"index": 487, "humaneval_task_id": "Python/115", "focal_method_name": "max_fill", "focal_method_para": "(grid, capacity)", "focal_method_return_type": null, "focal_method": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "target": "\nassert max_fill(<FILL_ME>) == 6"}
{"index": 488, "humaneval_task_id": "Python/116", "focal_method_name": "sort_array", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "target": "\nassert sort_array(<FILL_ME>) == []"}
{"index": 489, "humaneval_task_id": "Python/116", "focal_method_name": "sort_array", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "target": "\nassert sort_array(<FILL_ME>) == [32, 3, 5, 6, 12, 44]"}
{"index": 490, "humaneval_task_id": "Python/116", "focal_method_name": "sort_array", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "target": "\nassert sort_array(<FILL_ME>) == [0, 1, 2, 4, 3]"}
{"index": 491, "humaneval_task_id": "Python/116", "focal_method_name": "sort_array", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "target": "\nassert sort_array(<FILL_ME>) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]"}
{"index": 492, "humaneval_task_id": "Python/116", "focal_method_name": "sort_array", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "target": "\nassert sort_array(<FILL_ME>) == [-4, -2, -6, -5, -3]"}
{"index": 493, "humaneval_task_id": "Python/116", "focal_method_name": "sort_array", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "target": "\nassert sort_array(<FILL_ME>) == [1, 2, 4, 3, 5]"}
{"index": 494, "humaneval_task_id": "Python/116", "focal_method_name": "sort_array", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "target": "\nassert sort_array(<FILL_ME>) == [2, 4, 8, 16, 32]"}
{"index": 495, "humaneval_task_id": "Python/117", "focal_method_name": "select_words", "focal_method_para": "(s, n)", "focal_method_return_type": null, "focal_method": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "target": "\nassert select_words(<FILL_ME>) == []"}
{"index": 496, "humaneval_task_id": "Python/117", "focal_method_name": "select_words", "focal_method_para": "(s, n)", "focal_method_return_type": null, "focal_method": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "target": "\nassert select_words(<FILL_ME>) == [\"Uncle\"]"}
{"index": 497, "humaneval_task_id": "Python/117", "focal_method_name": "select_words", "focal_method_para": "(s, n)", "focal_method_return_type": null, "focal_method": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "target": "\nassert select_words(<FILL_ME>) == [\"world\"]"}
{"index": 498, "humaneval_task_id": "Python/117", "focal_method_name": "select_words", "focal_method_para": "(s, n)", "focal_method_return_type": null, "focal_method": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "target": "\nassert select_words(<FILL_ME>) == [\"b\", \"c\", \"d\", \"f\"]"}
{"index": 499, "humaneval_task_id": "Python/117", "focal_method_name": "select_words", "focal_method_para": "(s, n)", "focal_method_return_type": null, "focal_method": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "target": "\nassert select_words(<FILL_ME>) == [\"little\"]"}
{"index": 500, "humaneval_task_id": "Python/117", "focal_method_name": "select_words", "focal_method_para": "(s, n)", "focal_method_return_type": null, "focal_method": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "target": "\nassert select_words(<FILL_ME>) == [\"Mary\", \"lamb\"]"}
{"index": 501, "humaneval_task_id": "Python/118", "focal_method_name": "get_closest_vowel", "focal_method_para": "(word)", "focal_method_return_type": null, "focal_method": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "target": "\nassert get_closest_vowel(<FILL_ME>) == \"u\""}
{"index": 502, "humaneval_task_id": "Python/118", "focal_method_name": "get_closest_vowel", "focal_method_para": "(word)", "focal_method_return_type": null, "focal_method": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "target": "\nassert get_closest_vowel(<FILL_ME>) == \"o\""}
{"index": 503, "humaneval_task_id": "Python/118", "focal_method_name": "get_closest_vowel", "focal_method_para": "(word)", "focal_method_return_type": null, "focal_method": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "target": "\nassert get_closest_vowel(<FILL_ME>) == \"a\""}
{"index": 504, "humaneval_task_id": "Python/118", "focal_method_name": "get_closest_vowel", "focal_method_para": "(word)", "focal_method_return_type": null, "focal_method": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "target": "\nassert get_closest_vowel(<FILL_ME>) == \"\""}
{"index": 505, "humaneval_task_id": "Python/118", "focal_method_name": "get_closest_vowel", "focal_method_para": "(word)", "focal_method_return_type": null, "focal_method": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "target": "\nassert get_closest_vowel(<FILL_ME>) == \"i\""}
{"index": 506, "humaneval_task_id": "Python/119", "focal_method_name": "match_parens", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "target": "\nassert match_parens(<FILL_ME>) == 'No'"}
{"index": 507, "humaneval_task_id": "Python/119", "focal_method_name": "match_parens", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "target": "\nassert match_parens(<FILL_ME>) == 'Yes'"}
{"index": 508, "humaneval_task_id": "Python/120", "focal_method_name": "maximum", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "target": "\nassert maximum(<FILL_ME>) == [2, 20, 123]"}
{"index": 509, "humaneval_task_id": "Python/120", "focal_method_name": "maximum", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "target": "\nassert maximum(<FILL_ME>) == [-10, 10]"}
{"index": 510, "humaneval_task_id": "Python/120", "focal_method_name": "maximum", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "target": "\nassert maximum(<FILL_ME>) == []"}
{"index": 511, "humaneval_task_id": "Python/120", "focal_method_name": "maximum", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "target": "\nassert maximum(<FILL_ME>) == [-13, -8, 0, 0, 3, 5, 15]"}
{"index": 512, "humaneval_task_id": "Python/120", "focal_method_name": "maximum", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "target": "\nassert maximum(<FILL_ME>) == [-4, 4]"}
{"index": 513, "humaneval_task_id": "Python/120", "focal_method_name": "maximum", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "target": "\nassert maximum(<FILL_ME>) == [2]"}
{"index": 514, "humaneval_task_id": "Python/120", "focal_method_name": "maximum", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "target": "\nassert maximum(<FILL_ME>) == [0, 1, 2, 20]"}
{"index": 515, "humaneval_task_id": "Python/120", "focal_method_name": "maximum", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "target": "\nassert maximum(<FILL_ME>) == [5]"}
{"index": 516, "humaneval_task_id": "Python/120", "focal_method_name": "maximum", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "target": "\nassert maximum(<FILL_ME>) == [3, 5]"}
{"index": 517, "humaneval_task_id": "Python/120", "focal_method_name": "maximum", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "target": "\nassert maximum(<FILL_ME>) == [-4, -3, 5]"}
{"index": 518, "humaneval_task_id": "Python/120", "focal_method_name": "maximum", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "target": "\nassert maximum(<FILL_ME>) == [4, 4]"}
{"index": 519, "humaneval_task_id": "Python/121", "focal_method_name": "solution", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "target": "\nassert solution(<FILL_ME>) == 3"}
{"index": 520, "humaneval_task_id": "Python/121", "focal_method_name": "solution", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "target": "\nassert solution(<FILL_ME>) == 12"}
{"index": 521, "humaneval_task_id": "Python/121", "focal_method_name": "solution", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "target": "\nassert solution(<FILL_ME>) == 23"}
{"index": 522, "humaneval_task_id": "Python/121", "focal_method_name": "solution", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "target": "\nassert solution(<FILL_ME>) == 5"}
{"index": 523, "humaneval_task_id": "Python/121", "focal_method_name": "solution", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "target": "\nassert solution(<FILL_ME>) == 0"}
{"index": 524, "humaneval_task_id": "Python/121", "focal_method_name": "solution", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "target": "\nassert solution(<FILL_ME>) == 9"}
{"index": 525, "humaneval_task_id": "Python/122", "focal_method_name": "add_elements", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "target": "\nassert add_elements(<FILL_ME>) == 125"}
{"index": 526, "humaneval_task_id": "Python/122", "focal_method_name": "add_elements", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "target": "\nassert add_elements(<FILL_ME>) == 1"}
{"index": 527, "humaneval_task_id": "Python/122", "focal_method_name": "add_elements", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "target": "\nassert add_elements(<FILL_ME>) == 24"}
{"index": 528, "humaneval_task_id": "Python/122", "focal_method_name": "add_elements", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "target": "\nassert add_elements(<FILL_ME>) == 0"}
{"index": 529, "humaneval_task_id": "Python/122", "focal_method_name": "add_elements", "focal_method_para": "(arr, k)", "focal_method_return_type": null, "focal_method": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "target": "\nassert add_elements(<FILL_ME>) == -4"}
{"index": 530, "humaneval_task_id": "Python/123", "focal_method_name": "get_odd_collatz", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "target": "\nassert get_odd_collatz(<FILL_ME>) == [1, 5, 7, 11, 13, 17]"}
{"index": 531, "humaneval_task_id": "Python/123", "focal_method_name": "get_odd_collatz", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "target": "\nassert get_odd_collatz(<FILL_ME>) == [1]"}
{"index": 532, "humaneval_task_id": "Python/123", "focal_method_name": "get_odd_collatz", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "target": "\nassert get_odd_collatz(<FILL_ME>) == [1, 3, 5]"}
{"index": 533, "humaneval_task_id": "Python/123", "focal_method_name": "get_odd_collatz", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "target": "\nassert get_odd_collatz(<FILL_ME>) == [1, 5]"}
{"index": 534, "humaneval_task_id": "Python/124", "focal_method_name": "valid_date", "focal_method_para": "(date)", "focal_method_return_type": null, "focal_method": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "target": "\nassert valid_date(<FILL_ME>) == True"}
{"index": 535, "humaneval_task_id": "Python/124", "focal_method_name": "valid_date", "focal_method_para": "(date)", "focal_method_return_type": null, "focal_method": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "target": "\nassert valid_date(<FILL_ME>) == False"}
{"index": 536, "humaneval_task_id": "Python/125", "focal_method_name": "split_words", "focal_method_para": "(txt)", "focal_method_return_type": null, "focal_method": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "target": "\nassert split_words(<FILL_ME>) == 1"}
{"index": 537, "humaneval_task_id": "Python/125", "focal_method_name": "split_words", "focal_method_para": "(txt)", "focal_method_return_type": null, "focal_method": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "target": "\nassert split_words(<FILL_ME>) == [\"Hello\",\"world,!\"]"}
{"index": 538, "humaneval_task_id": "Python/125", "focal_method_name": "split_words", "focal_method_para": "(txt)", "focal_method_return_type": null, "focal_method": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "target": "\nassert split_words(<FILL_ME>) == 3"}
{"index": 539, "humaneval_task_id": "Python/125", "focal_method_name": "split_words", "focal_method_para": "(txt)", "focal_method_return_type": null, "focal_method": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "target": "\nassert split_words(<FILL_ME>) == [\"Hello\",\"world!\"]"}
{"index": 540, "humaneval_task_id": "Python/125", "focal_method_name": "split_words", "focal_method_para": "(txt)", "focal_method_return_type": null, "focal_method": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "target": "\nassert split_words(<FILL_ME>) == [\"Hello,Hello,world\",\"!\"]"}
{"index": 541, "humaneval_task_id": "Python/125", "focal_method_name": "split_words", "focal_method_para": "(txt)", "focal_method_return_type": null, "focal_method": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "target": "\nassert split_words(<FILL_ME>) == 2"}
{"index": 542, "humaneval_task_id": "Python/125", "focal_method_name": "split_words", "focal_method_para": "(txt)", "focal_method_return_type": null, "focal_method": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "target": "\nassert split_words(<FILL_ME>) == 0"}
{"index": 543, "humaneval_task_id": "Python/126", "focal_method_name": "is_sorted", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "target": "\nassert is_sorted(<FILL_ME>) == True"}
{"index": 544, "humaneval_task_id": "Python/126", "focal_method_name": "is_sorted", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "target": "\nassert is_sorted(<FILL_ME>) == False"}
{"index": 545, "humaneval_task_id": "Python/127", "focal_method_name": "intersection", "focal_method_para": "(interval1, interval2)", "focal_method_return_type": null, "focal_method": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "target": "\nassert intersection(<FILL_ME>) == \"YES\""}
{"index": 546, "humaneval_task_id": "Python/127", "focal_method_name": "intersection", "focal_method_para": "(interval1, interval2)", "focal_method_return_type": null, "focal_method": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "target": "\nassert intersection(<FILL_ME>) == \"NO\""}
{"index": 547, "humaneval_task_id": "Python/128", "focal_method_name": "prod_signs", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "target": "\nassert prod_signs(<FILL_ME>) == None"}
{"index": 548, "humaneval_task_id": "Python/128", "focal_method_name": "prod_signs", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "target": "\nassert prod_signs(<FILL_ME>) == 4"}
{"index": 549, "humaneval_task_id": "Python/128", "focal_method_name": "prod_signs", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "target": "\nassert prod_signs(<FILL_ME>) == -9"}
{"index": 550, "humaneval_task_id": "Python/128", "focal_method_name": "prod_signs", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "target": "\nassert prod_signs(<FILL_ME>) == 0"}
{"index": 551, "humaneval_task_id": "Python/128", "focal_method_name": "prod_signs", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "target": "\nassert prod_signs(<FILL_ME>) == -4"}
{"index": 552, "humaneval_task_id": "Python/128", "focal_method_name": "prod_signs", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "target": "\nassert prod_signs(<FILL_ME>) == -10"}
{"index": 553, "humaneval_task_id": "Python/128", "focal_method_name": "prod_signs", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "target": "\nassert prod_signs(<FILL_ME>) == 20"}
{"index": 554, "humaneval_task_id": "Python/129", "focal_method_name": "minPath", "focal_method_para": "(grid, k)", "focal_method_return_type": null, "focal_method": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "target": "\nassert minPath(<FILL_ME>) == [1, 2, 1]"}
{"index": 555, "humaneval_task_id": "Python/129", "focal_method_name": "minPath", "focal_method_para": "(grid, k)", "focal_method_return_type": null, "focal_method": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "target": "\nassert minPath(<FILL_ME>) == [1]"}
{"index": 556, "humaneval_task_id": "Python/129", "focal_method_name": "minPath", "focal_method_para": "(grid, k)", "focal_method_return_type": null, "focal_method": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "target": "\nassert minPath(<FILL_ME>) == [1, 2, 1, 2]"}
{"index": 557, "humaneval_task_id": "Python/129", "focal_method_name": "minPath", "focal_method_para": "(grid, k)", "focal_method_return_type": null, "focal_method": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "target": "\nassert minPath(<FILL_ME>) == [1, 7, 1, 7, 1]"}
{"index": 558, "humaneval_task_id": "Python/129", "focal_method_name": "minPath", "focal_method_para": "(grid, k)", "focal_method_return_type": null, "focal_method": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "target": "\nassert minPath(<FILL_ME>) == [1, 3, 1, 3, 1, 3, 1, 3]"}
{"index": 559, "humaneval_task_id": "Python/129", "focal_method_name": "minPath", "focal_method_para": "(grid, k)", "focal_method_return_type": null, "focal_method": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "target": "\nassert minPath(<FILL_ME>) == [1, 5, 1, 5, 1, 5, 1, 5]"}
{"index": 560, "humaneval_task_id": "Python/129", "focal_method_name": "minPath", "focal_method_para": "(grid, k)", "focal_method_return_type": null, "focal_method": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "target": "\nassert minPath(<FILL_ME>) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]"}
{"index": 561, "humaneval_task_id": "Python/129", "focal_method_name": "minPath", "focal_method_para": "(grid, k)", "focal_method_return_type": null, "focal_method": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "target": "\nassert minPath(<FILL_ME>) == [1, 6, 1, 6, 1, 6, 1, 6, 1]"}
{"index": 562, "humaneval_task_id": "Python/129", "focal_method_name": "minPath", "focal_method_para": "(grid, k)", "focal_method_return_type": null, "focal_method": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "target": "\nassert minPath(<FILL_ME>) == [1, 10, 1, 10, 1, 10, 1]"}
{"index": 563, "humaneval_task_id": "Python/129", "focal_method_name": "minPath", "focal_method_para": "(grid, k)", "focal_method_return_type": null, "focal_method": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "target": "\nassert minPath(<FILL_ME>) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]"}
{"index": 564, "humaneval_task_id": "Python/129", "focal_method_name": "minPath", "focal_method_para": "(grid, k)", "focal_method_return_type": null, "focal_method": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "target": "\nassert minPath(<FILL_ME>) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]"}
{"index": 565, "humaneval_task_id": "Python/130", "focal_method_name": "tri", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "target": "\nassert tri(<FILL_ME>) == [1]"}
{"index": 566, "humaneval_task_id": "Python/130", "focal_method_name": "tri", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "target": "\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]"}
{"index": 567, "humaneval_task_id": "Python/130", "focal_method_name": "tri", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "target": "\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0]"}
{"index": 568, "humaneval_task_id": "Python/130", "focal_method_name": "tri", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "target": "\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]"}
{"index": 569, "humaneval_task_id": "Python/130", "focal_method_name": "tri", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "target": "\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0]"}
{"index": 570, "humaneval_task_id": "Python/130", "focal_method_name": "tri", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "target": "\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]"}
{"index": 571, "humaneval_task_id": "Python/130", "focal_method_name": "tri", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "target": "\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]"}
{"index": 572, "humaneval_task_id": "Python/130", "focal_method_name": "tri", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "target": "\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]"}
{"index": 573, "humaneval_task_id": "Python/130", "focal_method_name": "tri", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "target": "\nassert tri(<FILL_ME>) == [1, 3, 2.0, 8.0]"}
{"index": 574, "humaneval_task_id": "Python/130", "focal_method_name": "tri", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "target": "\nassert tri(<FILL_ME>) == [1, 3]"}
{"index": 575, "humaneval_task_id": "Python/131", "focal_method_name": "digits", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "target": "\nassert digits(<FILL_ME>) == 1"}
{"index": 576, "humaneval_task_id": "Python/131", "focal_method_name": "digits", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "target": "\nassert digits(<FILL_ME>) == 315"}
{"index": 577, "humaneval_task_id": "Python/131", "focal_method_name": "digits", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "target": "\nassert digits(<FILL_ME>) == 5"}
{"index": 578, "humaneval_task_id": "Python/131", "focal_method_name": "digits", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "target": "\nassert digits(<FILL_ME>) == 0"}
{"index": 579, "humaneval_task_id": "Python/131", "focal_method_name": "digits", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "target": "\nassert digits(<FILL_ME>) == 2625"}
{"index": 580, "humaneval_task_id": "Python/132", "focal_method_name": "is_nested", "focal_method_para": "(string)", "focal_method_return_type": null, "focal_method": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "target": "\nassert is_nested(<FILL_ME>) == True"}
{"index": 581, "humaneval_task_id": "Python/132", "focal_method_name": "is_nested", "focal_method_para": "(string)", "focal_method_return_type": null, "focal_method": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "target": "\nassert is_nested(<FILL_ME>) == False"}
{"index": 582, "humaneval_task_id": "Python/133", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "target": "\nassert sum_squares(<FILL_ME>) == 1"}
{"index": 583, "humaneval_task_id": "Python/133", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "target": "\nassert sum_squares(<FILL_ME>) == 14"}
{"index": 584, "humaneval_task_id": "Python/133", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "target": "\nassert sum_squares(<FILL_ME>) == 75"}
{"index": 585, "humaneval_task_id": "Python/133", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "target": "\nassert sum_squares(<FILL_ME>) == 1086"}
{"index": 586, "humaneval_task_id": "Python/133", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "target": "\nassert sum_squares(<FILL_ME>) == 2"}
{"index": 587, "humaneval_task_id": "Python/133", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "target": "\nassert sum_squares(<FILL_ME>) == 84"}
{"index": 588, "humaneval_task_id": "Python/133", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "target": "\nassert sum_squares(<FILL_ME>) == 29"}
{"index": 589, "humaneval_task_id": "Python/133", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "target": "\nassert sum_squares(<FILL_ME>) == 0"}
{"index": 590, "humaneval_task_id": "Python/133", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "target": "\nassert sum_squares(<FILL_ME>) == 10230"}
{"index": 591, "humaneval_task_id": "Python/133", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "target": "\nassert sum_squares(<FILL_ME>) == 6"}
{"index": 592, "humaneval_task_id": "Python/133", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "target": "\nassert sum_squares(<FILL_ME>) == 200000000"}
{"index": 593, "humaneval_task_id": "Python/134", "focal_method_name": "check_if_last_char_is_a_letter", "focal_method_para": "(txt)", "focal_method_return_type": null, "focal_method": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "target": "\nassert check_if_last_char_is_a_letter(<FILL_ME>) == True"}
{"index": 594, "humaneval_task_id": "Python/134", "focal_method_name": "check_if_last_char_is_a_letter", "focal_method_para": "(txt)", "focal_method_return_type": null, "focal_method": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "target": "\nassert check_if_last_char_is_a_letter(<FILL_ME>) == False"}
{"index": 595, "humaneval_task_id": "Python/135", "focal_method_name": "can_arrange", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "target": "\nassert can_arrange(<FILL_ME>) == -1"}
{"index": 596, "humaneval_task_id": "Python/135", "focal_method_name": "can_arrange", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "target": "\nassert can_arrange(<FILL_ME>) == 4"}
{"index": 597, "humaneval_task_id": "Python/135", "focal_method_name": "can_arrange", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "target": "\nassert can_arrange(<FILL_ME>) == 3"}
{"index": 598, "humaneval_task_id": "Python/135", "focal_method_name": "can_arrange", "focal_method_para": "(arr)", "focal_method_return_type": null, "focal_method": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "target": "\nassert can_arrange(<FILL_ME>) == 2"}
{"index": 599, "humaneval_task_id": "Python/136", "focal_method_name": "largest_smallest_integers", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "target": "\nassert largest_smallest_integers(<FILL_ME>) == (None, None)"}
{"index": 600, "humaneval_task_id": "Python/136", "focal_method_name": "largest_smallest_integers", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "target": "\nassert largest_smallest_integers(<FILL_ME>) == (-2, 1)"}
{"index": 601, "humaneval_task_id": "Python/136", "focal_method_name": "largest_smallest_integers", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "target": "\nassert largest_smallest_integers(<FILL_ME>) == (-9, 2)"}
{"index": 602, "humaneval_task_id": "Python/136", "focal_method_name": "largest_smallest_integers", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "target": "\nassert largest_smallest_integers(<FILL_ME>) == (-7, 2)"}
{"index": 603, "humaneval_task_id": "Python/136", "focal_method_name": "largest_smallest_integers", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "target": "\nassert largest_smallest_integers(<FILL_ME>) == (None, 1)"}
{"index": 604, "humaneval_task_id": "Python/136", "focal_method_name": "largest_smallest_integers", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "target": "\nassert largest_smallest_integers(<FILL_ME>) == (-3, 1)"}
{"index": 605, "humaneval_task_id": "Python/136", "focal_method_name": "largest_smallest_integers", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "target": "\nassert largest_smallest_integers(<FILL_ME>) == (-1, None)"}
{"index": 606, "humaneval_task_id": "Python/137", "focal_method_name": "compare_one", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "target": "\nassert compare_one(<FILL_ME>) == None"}
{"index": 607, "humaneval_task_id": "Python/137", "focal_method_name": "compare_one", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "target": "\nassert compare_one(<FILL_ME>) == 3"}
{"index": 608, "humaneval_task_id": "Python/137", "focal_method_name": "compare_one", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "target": "\nassert compare_one(<FILL_ME>) == \"2,3\""}
{"index": 609, "humaneval_task_id": "Python/137", "focal_method_name": "compare_one", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "target": "\nassert compare_one(<FILL_ME>) == \"6\""}
{"index": 610, "humaneval_task_id": "Python/137", "focal_method_name": "compare_one", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "target": "\nassert compare_one(<FILL_ME>) == 2"}
{"index": 611, "humaneval_task_id": "Python/137", "focal_method_name": "compare_one", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "target": "\nassert compare_one(<FILL_ME>) == \"2\""}
{"index": 612, "humaneval_task_id": "Python/137", "focal_method_name": "compare_one", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "target": "\nassert compare_one(<FILL_ME>) == 6"}
{"index": 613, "humaneval_task_id": "Python/137", "focal_method_name": "compare_one", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "target": "\nassert compare_one(<FILL_ME>) == 2.5"}
{"index": 614, "humaneval_task_id": "Python/138", "focal_method_name": "is_equal_to_sum_even", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n", "target": "\nassert is_equal_to_sum_even(<FILL_ME>) == True"}
{"index": 615, "humaneval_task_id": "Python/138", "focal_method_name": "is_equal_to_sum_even", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n", "target": "\nassert is_equal_to_sum_even(<FILL_ME>) == False"}
{"index": 616, "humaneval_task_id": "Python/139", "focal_method_name": "special_factorial", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "target": "\nassert special_factorial(<FILL_ME>) == 125411328000"}
{"index": 617, "humaneval_task_id": "Python/139", "focal_method_name": "special_factorial", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "target": "\nassert special_factorial(<FILL_ME>) == 288"}
{"index": 618, "humaneval_task_id": "Python/139", "focal_method_name": "special_factorial", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "target": "\nassert special_factorial(<FILL_ME>) == 1"}
{"index": 619, "humaneval_task_id": "Python/139", "focal_method_name": "special_factorial", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "target": "\nassert special_factorial(<FILL_ME>) == 34560"}
{"index": 620, "humaneval_task_id": "Python/140", "focal_method_name": "fix_spaces", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "target": "\nassert fix_spaces(<FILL_ME>) == \"-Exa_1_2_2_mple\""}
{"index": 621, "humaneval_task_id": "Python/140", "focal_method_name": "fix_spaces", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "target": "\nassert fix_spaces(<FILL_ME>) == \"Exa-mple\""}
{"index": 622, "humaneval_task_id": "Python/140", "focal_method_name": "fix_spaces", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "target": "\nassert fix_spaces(<FILL_ME>) == \"Mudasir_Hanif_\""}
{"index": 623, "humaneval_task_id": "Python/140", "focal_method_name": "fix_spaces", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "target": "\nassert fix_spaces(<FILL_ME>) == \"Example\""}
{"index": 624, "humaneval_task_id": "Python/140", "focal_method_name": "fix_spaces", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "target": "\nassert fix_spaces(<FILL_ME>) == \"Yellow_Yellow__Dirty__Fellow\""}
{"index": 625, "humaneval_task_id": "Python/141", "focal_method_name": "file_name_check", "focal_method_para": "(file_name)", "focal_method_return_type": null, "focal_method": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "target": "\nassert file_name_check(<FILL_ME>) == 'No'"}
{"index": 626, "humaneval_task_id": "Python/141", "focal_method_name": "file_name_check", "focal_method_para": "(file_name)", "focal_method_return_type": null, "focal_method": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "target": "\nassert file_name_check(<FILL_ME>) == 'Yes'"}
{"index": 627, "humaneval_task_id": "Python/142", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "target": "\nassert sum_squares(<FILL_ME>) == 3030"}
{"index": 628, "humaneval_task_id": "Python/142", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "target": "\nassert sum_squares(<FILL_ME>) == -14196"}
{"index": 629, "humaneval_task_id": "Python/142", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "target": "\nassert sum_squares(<FILL_ME>) == 14"}
{"index": 630, "humaneval_task_id": "Python/142", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "target": "\nassert sum_squares(<FILL_ME>) == -126"}
{"index": 631, "humaneval_task_id": "Python/142", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "target": "\nassert sum_squares(<FILL_ME>) == 0"}
{"index": 632, "humaneval_task_id": "Python/142", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "target": "\nassert sum_squares(<FILL_ME>) == 9"}
{"index": 633, "humaneval_task_id": "Python/142", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "target": "\nassert sum_squares(<FILL_ME>) == -1448"}
{"index": 634, "humaneval_task_id": "Python/142", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "target": "\nassert sum_squares(<FILL_ME>) == 6"}
{"index": 635, "humaneval_task_id": "Python/142", "focal_method_name": "sum_squares", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sum_squares(lst):\n    \"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "target": "\nassert sum_squares(<FILL_ME>) == -3"}
{"index": 636, "humaneval_task_id": "Python/143", "focal_method_name": "words_in_sentence", "focal_method_para": "(sentence)", "focal_method_return_type": null, "focal_method": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "target": "\nassert words_in_sentence(<FILL_ME>) == \"there is no place\""}
{"index": 637, "humaneval_task_id": "Python/143", "focal_method_name": "words_in_sentence", "focal_method_para": "(sentence)", "focal_method_return_type": null, "focal_method": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "target": "\nassert words_in_sentence(<FILL_ME>) == \"is\""}
{"index": 638, "humaneval_task_id": "Python/143", "focal_method_name": "words_in_sentence", "focal_method_para": "(sentence)", "focal_method_return_type": null, "focal_method": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "target": "\nassert words_in_sentence(<FILL_ME>) == \"\""}
{"index": 639, "humaneval_task_id": "Python/143", "focal_method_name": "words_in_sentence", "focal_method_para": "(sentence)", "focal_method_return_type": null, "focal_method": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "target": "\nassert words_in_sentence(<FILL_ME>) == \"go for\""}
{"index": 640, "humaneval_task_id": "Python/143", "focal_method_name": "words_in_sentence", "focal_method_para": "(sentence)", "focal_method_return_type": null, "focal_method": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "target": "\nassert words_in_sentence(<FILL_ME>) == \"Hi am Hussein\""}
{"index": 641, "humaneval_task_id": "Python/143", "focal_method_name": "words_in_sentence", "focal_method_para": "(sentence)", "focal_method_return_type": null, "focal_method": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "target": "\nassert words_in_sentence(<FILL_ME>) == \"go for it\""}
{"index": 642, "humaneval_task_id": "Python/144", "focal_method_name": "simplify", "focal_method_para": "(x, n)", "focal_method_return_type": null, "focal_method": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "target": "\nassert simplify(<FILL_ME>) == True"}
{"index": 643, "humaneval_task_id": "Python/144", "focal_method_name": "simplify", "focal_method_para": "(x, n)", "focal_method_return_type": null, "focal_method": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "target": "\nassert simplify(<FILL_ME>) == False"}
{"index": 644, "humaneval_task_id": "Python/145", "focal_method_name": "order_by_points", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "target": "\nassert order_by_points(<FILL_ME>) == []"}
{"index": 645, "humaneval_task_id": "Python/145", "focal_method_name": "order_by_points", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "target": "\nassert order_by_points(<FILL_ME>) == [-76, -21, 0, 4, 23, 6, 6]"}
{"index": 646, "humaneval_task_id": "Python/145", "focal_method_name": "order_by_points", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "target": "\nassert order_by_points(<FILL_ME>) == [-1, -11, 1, -12, 11]"}
{"index": 647, "humaneval_task_id": "Python/145", "focal_method_name": "order_by_points", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "target": "\nassert order_by_points(<FILL_ME>) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]"}
{"index": 648, "humaneval_task_id": "Python/145", "focal_method_name": "order_by_points", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "target": "\nassert order_by_points(<FILL_ME>) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]"}
{"index": 649, "humaneval_task_id": "Python/145", "focal_method_name": "order_by_points", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "target": "\nassert order_by_points(<FILL_ME>) == [-3, -32, -98, -11, 1, 2, 43, 54]"}
{"index": 650, "humaneval_task_id": "Python/146", "focal_method_name": "specialFilter", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "target": "\nassert specialFilter(<FILL_ME>) == 1"}
{"index": 651, "humaneval_task_id": "Python/146", "focal_method_name": "specialFilter", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "target": "\nassert specialFilter(<FILL_ME>) == 4"}
{"index": 652, "humaneval_task_id": "Python/146", "focal_method_name": "specialFilter", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "target": "\nassert specialFilter(<FILL_ME>) == 3"}
{"index": 653, "humaneval_task_id": "Python/146", "focal_method_name": "specialFilter", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "target": "\nassert specialFilter(<FILL_ME>) == 2"}
{"index": 654, "humaneval_task_id": "Python/146", "focal_method_name": "specialFilter", "focal_method_para": "(nums)", "focal_method_return_type": null, "focal_method": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "target": "\nassert specialFilter(<FILL_ME>) == 0"}
{"index": 655, "humaneval_task_id": "Python/147", "focal_method_name": "get_max_triples", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "target": "\nassert get_max_triples(<FILL_ME>) == 1"}
{"index": 656, "humaneval_task_id": "Python/147", "focal_method_name": "get_max_triples", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "target": "\nassert get_max_triples(<FILL_ME>) == 4"}
{"index": 657, "humaneval_task_id": "Python/147", "focal_method_name": "get_max_triples", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "target": "\nassert get_max_triples(<FILL_ME>) == 53361"}
{"index": 658, "humaneval_task_id": "Python/147", "focal_method_name": "get_max_triples", "focal_method_para": "(n)", "focal_method_return_type": null, "focal_method": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "target": "\nassert get_max_triples(<FILL_ME>) == 36"}
{"index": 659, "humaneval_task_id": "Python/148", "focal_method_name": "bf", "focal_method_para": "(planet1, planet2)", "focal_method_return_type": null, "focal_method": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "target": "\nassert bf(<FILL_ME>) == (\"Saturn\", \"Uranus\")"}
{"index": 660, "humaneval_task_id": "Python/148", "focal_method_name": "bf", "focal_method_para": "(planet1, planet2)", "focal_method_return_type": null, "focal_method": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "target": "\nassert bf(<FILL_ME>) == (\"Venus\",)"}
{"index": 661, "humaneval_task_id": "Python/148", "focal_method_name": "bf", "focal_method_para": "(planet1, planet2)", "focal_method_return_type": null, "focal_method": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "target": "\nassert bf(<FILL_ME>) == ()"}
{"index": 662, "humaneval_task_id": "Python/148", "focal_method_name": "bf", "focal_method_para": "(planet1, planet2)", "focal_method_return_type": null, "focal_method": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "target": "\nassert bf(<FILL_ME>) == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")"}
{"index": 663, "humaneval_task_id": "Python/148", "focal_method_name": "bf", "focal_method_para": "(planet1, planet2)", "focal_method_return_type": null, "focal_method": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "target": "\nassert bf(<FILL_ME>) == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"index": 664, "humaneval_task_id": "Python/149", "focal_method_name": "sorted_list_sum", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "target": "\nassert sorted_list_sum(<FILL_ME>) == []"}
{"index": 665, "humaneval_task_id": "Python/149", "focal_method_name": "sorted_list_sum", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "target": "\nassert sorted_list_sum(<FILL_ME>) == [\"AI\", \"asdf\", \"school\"]"}
{"index": 666, "humaneval_task_id": "Python/149", "focal_method_name": "sorted_list_sum", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "target": "\nassert sorted_list_sum(<FILL_ME>) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]"}
{"index": 667, "humaneval_task_id": "Python/149", "focal_method_name": "sorted_list_sum", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "target": "\nassert sorted_list_sum(<FILL_ME>) == [\"AI\", \"ai\", \"au\"]"}
{"index": 668, "humaneval_task_id": "Python/149", "focal_method_name": "sorted_list_sum", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "target": "\nassert sorted_list_sum(<FILL_ME>) == [\"aa\"]"}
{"index": 669, "humaneval_task_id": "Python/149", "focal_method_name": "sorted_list_sum", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "target": "\nassert sorted_list_sum(<FILL_ME>) == [\"abcd\", \"dcba\"]"}
{"index": 670, "humaneval_task_id": "Python/150", "focal_method_name": "x_or_y", "focal_method_para": "(n, x, y)", "focal_method_return_type": null, "focal_method": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "target": "\nassert x_or_y(<FILL_ME>) == 3"}
{"index": 671, "humaneval_task_id": "Python/150", "focal_method_name": "x_or_y", "focal_method_para": "(n, x, y)", "focal_method_return_type": null, "focal_method": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "target": "\nassert x_or_y(<FILL_ME>) == -1"}
{"index": 672, "humaneval_task_id": "Python/150", "focal_method_name": "x_or_y", "focal_method_para": "(n, x, y)", "focal_method_return_type": null, "focal_method": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "target": "\nassert x_or_y(<FILL_ME>) == 2"}
{"index": 673, "humaneval_task_id": "Python/150", "focal_method_name": "x_or_y", "focal_method_para": "(n, x, y)", "focal_method_return_type": null, "focal_method": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "target": "\nassert x_or_y(<FILL_ME>) == 5"}
{"index": 674, "humaneval_task_id": "Python/150", "focal_method_name": "x_or_y", "focal_method_para": "(n, x, y)", "focal_method_return_type": null, "focal_method": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "target": "\nassert x_or_y(<FILL_ME>) == 34"}
{"index": 675, "humaneval_task_id": "Python/150", "focal_method_name": "x_or_y", "focal_method_para": "(n, x, y)", "focal_method_return_type": null, "focal_method": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "target": "\nassert x_or_y(<FILL_ME>) == 0"}
{"index": 676, "humaneval_task_id": "Python/150", "focal_method_name": "x_or_y", "focal_method_para": "(n, x, y)", "focal_method_return_type": null, "focal_method": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "target": "\nassert x_or_y(<FILL_ME>) == 583"}
{"index": 677, "humaneval_task_id": "Python/150", "focal_method_name": "x_or_y", "focal_method_para": "(n, x, y)", "focal_method_return_type": null, "focal_method": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "target": "\nassert x_or_y(<FILL_ME>) == 1234"}
{"index": 678, "humaneval_task_id": "Python/150", "focal_method_name": "x_or_y", "focal_method_para": "(n, x, y)", "focal_method_return_type": null, "focal_method": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "target": "\nassert x_or_y(<FILL_ME>) == 33"}
{"index": 679, "humaneval_task_id": "Python/150", "focal_method_name": "x_or_y", "focal_method_para": "(n, x, y)", "focal_method_return_type": null, "focal_method": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "target": "\nassert x_or_y(<FILL_ME>) == 129"}
{"index": 680, "humaneval_task_id": "Python/151", "focal_method_name": "double_the_difference", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "target": "\nassert double_the_difference(<FILL_ME>) == 34"}
{"index": 681, "humaneval_task_id": "Python/151", "focal_method_name": "double_the_difference", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "target": "\nassert double_the_difference(<FILL_ME>) == 0"}
{"index": 682, "humaneval_task_id": "Python/151", "focal_method_name": "double_the_difference", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "target": "\nassert double_the_difference(<FILL_ME>) == 25"}
{"index": 683, "humaneval_task_id": "Python/151", "focal_method_name": "double_the_difference", "focal_method_para": "(lst)", "focal_method_return_type": null, "focal_method": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "target": "\nassert double_the_difference(<FILL_ME>) == odd_sum"}
{"index": 684, "humaneval_task_id": "Python/152", "focal_method_name": "compare", "focal_method_para": "(game,guess)", "focal_method_return_type": null, "focal_method": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n", "target": "\nassert compare(<FILL_ME>) == [0,0,0,0,0,0]"}
{"index": 685, "humaneval_task_id": "Python/152", "focal_method_name": "compare", "focal_method_para": "(game,guess)", "focal_method_return_type": null, "focal_method": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n", "target": "\nassert compare(<FILL_ME>) == [2,4,6]"}
{"index": 686, "humaneval_task_id": "Python/152", "focal_method_name": "compare", "focal_method_para": "(game,guess)", "focal_method_return_type": null, "focal_method": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n", "target": "\nassert compare(<FILL_ME>) == [4,4,1,0,0,6]"}
{"index": 687, "humaneval_task_id": "Python/152", "focal_method_name": "compare", "focal_method_para": "(game,guess)", "focal_method_return_type": null, "focal_method": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n", "target": "\nassert compare(<FILL_ME>) == [0,0,0,0,3,3]"}
{"index": 688, "humaneval_task_id": "Python/152", "focal_method_name": "compare", "focal_method_para": "(game,guess)", "focal_method_return_type": null, "focal_method": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n", "target": "\nassert compare(<FILL_ME>) == [2,0,0,1]"}
{"index": 689, "humaneval_task_id": "Python/153", "focal_method_name": "Strongest_Extension", "focal_method_para": "(class_name, extensions)", "focal_method_return_type": null, "focal_method": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "target": "\nassert Strongest_Extension(<FILL_ME>) == 'K.TAR'"}
{"index": 690, "humaneval_task_id": "Python/153", "focal_method_name": "Strongest_Extension", "focal_method_para": "(class_name, extensions)", "focal_method_return_type": null, "focal_method": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "target": "\nassert Strongest_Extension(<FILL_ME>) == '__YESIMHERE.NuLl__'"}
{"index": 691, "humaneval_task_id": "Python/153", "focal_method_name": "Strongest_Extension", "focal_method_para": "(class_name, extensions)", "focal_method_return_type": null, "focal_method": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "target": "\nassert Strongest_Extension(<FILL_ME>) == 'YameRore.okIWILL123'"}
{"index": 692, "humaneval_task_id": "Python/153", "focal_method_name": "Strongest_Extension", "focal_method_para": "(class_name, extensions)", "focal_method_return_type": null, "focal_method": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "target": "\nassert Strongest_Extension(<FILL_ME>) == '__HAHA.123'"}
{"index": 693, "humaneval_task_id": "Python/153", "focal_method_name": "Strongest_Extension", "focal_method_para": "(class_name, extensions)", "focal_method_return_type": null, "focal_method": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "target": "\nassert Strongest_Extension(<FILL_ME>) == 'finNNalLLly.WoW'"}
{"index": 694, "humaneval_task_id": "Python/153", "focal_method_name": "Strongest_Extension", "focal_method_para": "(class_name, extensions)", "focal_method_return_type": null, "focal_method": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "target": "\nassert Strongest_Extension(<FILL_ME>) == 'Boku123.YEs.WeCaNe'"}
{"index": 695, "humaneval_task_id": "Python/153", "focal_method_name": "Strongest_Extension", "focal_method_para": "(class_name, extensions)", "focal_method_return_type": null, "focal_method": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "target": "\nassert Strongest_Extension(<FILL_ME>) == 'Watashi.eIGHt8OKe'"}
{"index": 696, "humaneval_task_id": "Python/153", "focal_method_name": "Strongest_Extension", "focal_method_para": "(class_name, extensions)", "focal_method_return_type": null, "focal_method": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "target": "\nassert Strongest_Extension(<FILL_ME>) == 'Sp.671235'"}
{"index": 697, "humaneval_task_id": "Python/153", "focal_method_name": "Strongest_Extension", "focal_method_para": "(class_name, extensions)", "focal_method_return_type": null, "focal_method": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "target": "\nassert Strongest_Extension(<FILL_ME>) == '_.Bb'"}
{"index": 698, "humaneval_task_id": "Python/154", "focal_method_name": "cycpattern_check", "focal_method_para": "(a , b)", "focal_method_return_type": null, "focal_method": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "target": "\nassert cycpattern_check(<FILL_ME>) == True"}
{"index": 699, "humaneval_task_id": "Python/154", "focal_method_name": "cycpattern_check", "focal_method_para": "(a , b)", "focal_method_return_type": null, "focal_method": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "target": "\nassert cycpattern_check(<FILL_ME>) == False"}
{"index": 700, "humaneval_task_id": "Python/155", "focal_method_name": "even_odd_count", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "target": "\nassert even_odd_count(<FILL_ME>) == (2, 2)"}
{"index": 701, "humaneval_task_id": "Python/155", "focal_method_name": "even_odd_count", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "target": "\nassert even_odd_count(<FILL_ME>) == (1, 0)"}
{"index": 702, "humaneval_task_id": "Python/155", "focal_method_name": "even_odd_count", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "target": "\nassert even_odd_count(<FILL_ME>) == (1, 1)"}
{"index": 703, "humaneval_task_id": "Python/155", "focal_method_name": "even_odd_count", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "target": "\nassert even_odd_count(<FILL_ME>) == (2, 3)"}
{"index": 704, "humaneval_task_id": "Python/155", "focal_method_name": "even_odd_count", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "target": "\nassert even_odd_count(<FILL_ME>) == (0, 1)"}
{"index": 705, "humaneval_task_id": "Python/155", "focal_method_name": "even_odd_count", "focal_method_para": "(num)", "focal_method_return_type": null, "focal_method": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "target": "\nassert even_odd_count(<FILL_ME>) == (3, 3)"}
{"index": 706, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'xc'"}
{"index": 707, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'cmxciv'"}
{"index": 708, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'clii'"}
{"index": 709, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'd'"}
{"index": 710, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'dxxxii'"}
{"index": 711, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'cdxxvi'"}
{"index": 712, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'm'"}
{"index": 713, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'xciv'"}
{"index": 714, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'xix'"}
{"index": 715, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'xliii'"}
{"index": 716, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'iv'"}
{"index": 717, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'i'"}
{"index": 718, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'cm'"}
{"index": 719, "humaneval_task_id": "Python/156", "focal_method_name": "int_to_mini_roman", "focal_method_para": "(number)", "focal_method_return_type": null, "focal_method": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "target": "\nassert int_to_mini_roman(<FILL_ME>) == 'ccli'"}
{"index": 720, "humaneval_task_id": "Python/157", "focal_method_name": "right_angle_triangle", "focal_method_para": "(a, b, c)", "focal_method_return_type": null, "focal_method": "def right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "target": "\nassert right_angle_triangle(<FILL_ME>) == True"}
{"index": 721, "humaneval_task_id": "Python/157", "focal_method_name": "right_angle_triangle", "focal_method_para": "(a, b, c)", "focal_method_return_type": null, "focal_method": "def right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "target": "\nassert right_angle_triangle(<FILL_ME>) == False"}
{"index": 722, "humaneval_task_id": "Python/158", "focal_method_name": "find_max", "focal_method_para": "(words)", "focal_method_return_type": null, "focal_method": "def find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "target": "\nassert find_max(<FILL_ME>) == True"}
{"index": 723, "humaneval_task_id": "Python/158", "focal_method_name": "find_max", "focal_method_para": "(words)", "focal_method_return_type": null, "focal_method": "def find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "target": "\nassert find_max(<FILL_ME>) == False"}
{"index": 724, "humaneval_task_id": "Python/159", "focal_method_name": "eat", "focal_method_para": "(number, need, remaining)", "focal_method_return_type": null, "focal_method": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "target": "\nassert eat(<FILL_ME>) == [12, 1]"}
{"index": 725, "humaneval_task_id": "Python/159", "focal_method_name": "eat", "focal_method_para": "(number, need, remaining)", "focal_method_return_type": null, "focal_method": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "target": "\nassert eat(<FILL_ME>) == [7, 0]"}
{"index": 726, "humaneval_task_id": "Python/159", "focal_method_name": "eat", "focal_method_para": "(number, need, remaining)", "focal_method_return_type": null, "focal_method": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "target": "\nassert eat(<FILL_ME>) == [11, 4]"}
{"index": 727, "humaneval_task_id": "Python/159", "focal_method_name": "eat", "focal_method_para": "(number, need, remaining)", "focal_method_return_type": null, "focal_method": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "target": "\nassert eat(<FILL_ME>) == [5, 0]"}
{"index": 728, "humaneval_task_id": "Python/159", "focal_method_name": "eat", "focal_method_para": "(number, need, remaining)", "focal_method_return_type": null, "focal_method": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "target": "\nassert eat(<FILL_ME>) == [9, 2]"}
{"index": 729, "humaneval_task_id": "Python/159", "focal_method_name": "eat", "focal_method_para": "(number, need, remaining)", "focal_method_return_type": null, "focal_method": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "target": "\nassert eat(<FILL_ME>) == [11, 0]"}
{"index": 730, "humaneval_task_id": "Python/160", "focal_method_name": "do_algebra", "focal_method_para": "(operator, operand)", "focal_method_return_type": null, "focal_method": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "target": "\nassert do_algebra(<FILL_ME>) == 8"}
{"index": 731, "humaneval_task_id": "Python/160", "focal_method_name": "do_algebra", "focal_method_para": "(operator, operand)", "focal_method_return_type": null, "focal_method": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "target": "\nassert do_algebra(<FILL_ME>) == 37"}
{"index": 732, "humaneval_task_id": "Python/160", "focal_method_name": "do_algebra", "focal_method_para": "(operator, operand)", "focal_method_return_type": null, "focal_method": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "target": "\nassert do_algebra(<FILL_ME>) == 9"}
{"index": 733, "humaneval_task_id": "Python/161", "focal_method_name": "solve", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "target": "\nassert solve(<FILL_ME>) == \"#CCC\""}
{"index": 734, "humaneval_task_id": "Python/161", "focal_method_name": "solve", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "target": "\nassert solve(<FILL_ME>) == \"2@6#\""}
{"index": 735, "humaneval_task_id": "Python/161", "focal_method_name": "solve", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "target": "\nassert solve(<FILL_ME>) == \"#A@c\""}
{"index": 736, "humaneval_task_id": "Python/161", "focal_method_name": "solve", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "target": "\nassert solve(<FILL_ME>) == \"AB\""}
{"index": 737, "humaneval_task_id": "Python/161", "focal_method_name": "solve", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "target": "\nassert solve(<FILL_ME>) == \"4321\""}
{"index": 738, "humaneval_task_id": "Python/161", "focal_method_name": "solve", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "target": "\nassert solve(<FILL_ME>) == \"#$A^d\""}
{"index": 739, "humaneval_task_id": "Python/161", "focal_method_name": "solve", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "target": "\nassert solve(<FILL_ME>) == \"aSdF\""}
{"index": 740, "humaneval_task_id": "Python/161", "focal_method_name": "solve", "focal_method_para": "(s)", "focal_method_return_type": null, "focal_method": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "target": "\nassert solve(<FILL_ME>) == \"#aSDFw^45\""}
{"index": 741, "humaneval_task_id": "Python/162", "focal_method_name": "string_to_md5", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "target": "\nassert string_to_md5(<FILL_ME>) == None"}
{"index": 742, "humaneval_task_id": "Python/162", "focal_method_name": "string_to_md5", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "target": "\nassert string_to_md5(<FILL_ME>) == '3e25960a79dbc69b674cd4ec67a72c62'"}
{"index": 743, "humaneval_task_id": "Python/162", "focal_method_name": "string_to_md5", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "target": "\nassert string_to_md5(<FILL_ME>) == '0ef78513b0cb8cef12743f5aeb35f888'"}
{"index": 744, "humaneval_task_id": "Python/162", "focal_method_name": "string_to_md5", "focal_method_para": "(text)", "focal_method_return_type": null, "focal_method": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "target": "\nassert string_to_md5(<FILL_ME>) == '5f4dcc3b5aa765d61d8327deb882cf99'"}
{"index": 745, "humaneval_task_id": "Python/163", "focal_method_name": "generate_integers", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "target": "\nassert generate_integers(<FILL_ME>) == []"}
{"index": 746, "humaneval_task_id": "Python/163", "focal_method_name": "generate_integers", "focal_method_para": "(a, b)", "focal_method_return_type": null, "focal_method": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "target": "\nassert generate_integers(<FILL_ME>) == [2, 4, 6, 8]"}
