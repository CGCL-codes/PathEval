{"index": 0, "humaneval_task_id": "Java/0", "focal_method_name": "hasCloseElements", "focal_method_para": "(List<Double> numbers, double threshold)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.hasCloseElements(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 1, "humaneval_task_id": "Java/0", "focal_method_name": "hasCloseElements", "focal_method_para": "(List<Double> numbers, double threshold)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.hasCloseElements(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 2, "humaneval_task_id": "Java/1", "focal_method_name": "separateParenGroups", "focal_method_para": "(String paren_string)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder current_string = new StringBuilder();\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.append(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.append(c);\n\n                if (current_depth == 0) {\n                    result.add(current_string.toString());\n                    current_string.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(                s.separateParenGroups(<FILL_ME>).equals(Arrays.asList(\n                        \"()\", \"(())\", \"((()))\", \"(((())))\"\n                )),)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 3, "humaneval_task_id": "Java/1", "focal_method_name": "separateParenGroups", "focal_method_para": "(String paren_string)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder current_string = new StringBuilder();\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.append(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.append(c);\n\n                if (current_depth == 0) {\n                    result.add(current_string.toString());\n                    current_string.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.separateParenGroups(<FILL_ME>).equals(Arrays.asList(\"()\", \"(())\", \"(()())\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 4, "humaneval_task_id": "Java/1", "focal_method_name": "separateParenGroups", "focal_method_para": "(String paren_string)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder current_string = new StringBuilder();\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.append(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.append(c);\n\n                if (current_depth == 0) {\n                    result.add(current_string.toString());\n                    current_string.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(                s.separateParenGroups(<FILL_ME>).equals(Arrays.asList(\n                        \"(()(())((())))\"\n                )),)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 5, "humaneval_task_id": "Java/1", "focal_method_name": "separateParenGroups", "focal_method_para": "(String paren_string)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder current_string = new StringBuilder();\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.append(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.append(c);\n\n                if (current_depth == 0) {\n                    result.add(current_string.toString());\n                    current_string.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(                s.separateParenGroups(<FILL_ME>).equals(Arrays.asList(\n                        \"(()())\", \"((()))\", \"()\", \"((())()())\"\n                )),)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 6, "humaneval_task_id": "Java/2", "focal_method_name": "truncateNumber", "focal_method_para": "(double number)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncateNumber(double number) {\n        return number % 1.0;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Math.abs(s.truncateNumber(<FILL_ME>) - 0.456) < 1e-6)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 7, "humaneval_task_id": "Java/2", "focal_method_name": "truncateNumber", "focal_method_para": "(double number)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncateNumber(double number) {\n        return number % 1.0;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.truncateNumber(<FILL_ME>) == 0.5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 8, "humaneval_task_id": "Java/3", "focal_method_name": "belowZero", "focal_method_para": "(List<Integer> operations)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.belowZero(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 9, "humaneval_task_id": "Java/3", "focal_method_name": "belowZero", "focal_method_para": "(List<Integer> operations)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.belowZero(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 10, "humaneval_task_id": "Java/4", "focal_method_name": "meanAbsoluteDeviation", "focal_method_para": "(List<Double> numbers)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sum_abs_diff = 0.0;\n        for (double num : numbers) {\n            sum_abs_diff += Math.abs(num - mean);\n        }\n        return sum_abs_diff / numbers.size();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Math.abs(s.meanAbsoluteDeviation(<FILL_ME>) - 6.0/5.0) < 1e-6)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 11, "humaneval_task_id": "Java/5", "focal_method_name": "intersperse", "focal_method_para": "(List<Integer> numbers, int delimiter)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers.size() == 0) {\n            return List.of();\n        }\n        List<Integer> result = new ArrayList<>(List.of());\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.intersperse(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 12, "humaneval_task_id": "Java/5", "focal_method_name": "intersperse", "focal_method_para": "(List<Integer> numbers, int delimiter)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers.size() == 0) {\n            return List.of();\n        }\n        List<Integer> result = new ArrayList<>(List.of());\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.intersperse(<FILL_ME>).equals(Arrays.asList(5, 8, 6, 8, 3, 8, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 13, "humaneval_task_id": "Java/5", "focal_method_name": "intersperse", "focal_method_para": "(List<Integer> numbers, int delimiter)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers.size() == 0) {\n            return List.of();\n        }\n        List<Integer> result = new ArrayList<>(List.of());\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.intersperse(<FILL_ME>).equals(Arrays.asList(2, 2, 2, 2, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 14, "humaneval_task_id": "Java/6", "focal_method_name": "parseNestedParens", "focal_method_para": "(String paren_string)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int max_depth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        max_depth = Math.max(depth, max_depth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(max_depth);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.parseNestedParens(<FILL_ME>).equals(Arrays.asList(4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 15, "humaneval_task_id": "Java/6", "focal_method_name": "parseNestedParens", "focal_method_para": "(String paren_string)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int max_depth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        max_depth = Math.max(depth, max_depth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(max_depth);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.parseNestedParens(<FILL_ME>).equals(Arrays.asList(2, 3, 1, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 16, "humaneval_task_id": "Java/6", "focal_method_name": "parseNestedParens", "focal_method_para": "(String paren_string)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseNestedParens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int max_depth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        max_depth = Math.max(depth, max_depth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(max_depth);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.parseNestedParens(<FILL_ME>).equals(Arrays.asList(1, 2, 3, 4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 17, "humaneval_task_id": "Java/7", "focal_method_name": "filterBySubstring", "focal_method_para": "(List<String> strings, String substring)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.filterBySubstring(<FILL_ME>).equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 18, "humaneval_task_id": "Java/7", "focal_method_name": "filterBySubstring", "focal_method_para": "(List<String> strings, String substring)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.filterBySubstring(<FILL_ME>).equals(Arrays.asList(\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 19, "humaneval_task_id": "Java/7", "focal_method_name": "filterBySubstring", "focal_method_para": "(List<String> strings, String substring)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.filterBySubstring(<FILL_ME>).equals(Arrays.asList(\"grunt\", \"prune\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 20, "humaneval_task_id": "Java/7", "focal_method_name": "filterBySubstring", "focal_method_para": "(List<String> strings, String substring)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.filterBySubstring(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 21, "humaneval_task_id": "Java/8", "focal_method_name": "sumProduct", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumProduct(<FILL_ME>).equals(Arrays.asList(3, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 22, "humaneval_task_id": "Java/8", "focal_method_name": "sumProduct", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumProduct(<FILL_ME>).equals(Arrays.asList(10, 10)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 23, "humaneval_task_id": "Java/8", "focal_method_name": "sumProduct", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumProduct(<FILL_ME>).equals(Arrays.asList(3 + 5 + 7, 3 * 5 * 7)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 24, "humaneval_task_id": "Java/8", "focal_method_name": "sumProduct", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumProduct(<FILL_ME>).equals(Arrays.asList(100, 0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 25, "humaneval_task_id": "Java/8", "focal_method_name": "sumProduct", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumProduct(<FILL_ME>).equals(Arrays.asList(0, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 26, "humaneval_task_id": "Java/9", "focal_method_name": "rollingMax", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.rollingMax(<FILL_ME>).equals(Arrays.asList(1, 2, 3, 4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 27, "humaneval_task_id": "Java/9", "focal_method_name": "rollingMax", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.rollingMax(<FILL_ME>).equals(Arrays.asList(4, 4, 4, 4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 28, "humaneval_task_id": "Java/9", "focal_method_name": "rollingMax", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.rollingMax(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 29, "humaneval_task_id": "Java/9", "focal_method_name": "rollingMax", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.rollingMax(<FILL_ME>).equals(Arrays.asList(3, 3, 3, 100, 100)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 30, "humaneval_task_id": "Java/10", "focal_method_name": "makePalindrome", "focal_method_para": "(String string)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.makePalindrome(<FILL_ME>), \"\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 31, "humaneval_task_id": "Java/10", "focal_method_name": "makePalindrome", "focal_method_para": "(String string)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.makePalindrome(<FILL_ME>), \"xyzyx\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 32, "humaneval_task_id": "Java/10", "focal_method_name": "makePalindrome", "focal_method_para": "(String string)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.makePalindrome(<FILL_ME>), \"jerryrrej\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 33, "humaneval_task_id": "Java/10", "focal_method_name": "makePalindrome", "focal_method_para": "(String string)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.makePalindrome(<FILL_ME>), \"x\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 34, "humaneval_task_id": "Java/10", "focal_method_name": "makePalindrome", "focal_method_para": "(String string)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.makePalindrome(<FILL_ME>), \"xyx\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 35, "humaneval_task_id": "Java/11", "focal_method_name": "stringXor", "focal_method_para": "(String a, String b)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.stringXor(<FILL_ME>), \"0\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 36, "humaneval_task_id": "Java/11", "focal_method_name": "stringXor", "focal_method_para": "(String a, String b)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.stringXor(<FILL_ME>), \"010010\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 37, "humaneval_task_id": "Java/11", "focal_method_name": "stringXor", "focal_method_para": "(String a, String b)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.stringXor(<FILL_ME>), \"0101\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 38, "humaneval_task_id": "Java/12", "focal_method_name": "longest", "focal_method_para": "(List<String> strings)", "focal_method_return_type": "Optional<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.longest(<FILL_ME>).get(), \"zzzz\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 39, "humaneval_task_id": "Java/12", "focal_method_name": "longest", "focal_method_para": "(List<String> strings)", "focal_method_return_type": "Optional<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.longest(<FILL_ME>).get(), \"x\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 40, "humaneval_task_id": "Java/12", "focal_method_name": "longest", "focal_method_para": "(List<String> strings)", "focal_method_return_type": "Optional<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.longest(<FILL_ME>).isEmpty())) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 41, "humaneval_task_id": "Java/13", "focal_method_name": "greatestCommonDivisor", "focal_method_para": "(int a, int b)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.greatestCommonDivisor(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 42, "humaneval_task_id": "Java/13", "focal_method_name": "greatestCommonDivisor", "focal_method_para": "(int a, int b)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.greatestCommonDivisor(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 43, "humaneval_task_id": "Java/13", "focal_method_name": "greatestCommonDivisor", "focal_method_para": "(int a, int b)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.greatestCommonDivisor(<FILL_ME>) == 12)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 44, "humaneval_task_id": "Java/13", "focal_method_name": "greatestCommonDivisor", "focal_method_para": "(int a, int b)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.greatestCommonDivisor(<FILL_ME>) == 7)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 45, "humaneval_task_id": "Java/14", "focal_method_name": "allPrefixes", "focal_method_para": "(String string)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.allPrefixes(<FILL_ME>).equals(Arrays.asList(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 46, "humaneval_task_id": "Java/14", "focal_method_name": "allPrefixes", "focal_method_para": "(String string)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.allPrefixes(<FILL_ME>).equals(Arrays.asList(\"W\", \"WW\", \"WWW\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 47, "humaneval_task_id": "Java/14", "focal_method_name": "allPrefixes", "focal_method_para": "(String string)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.allPrefixes(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 48, "humaneval_task_id": "Java/15", "focal_method_name": "stringSequence", "focal_method_para": "(int n)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.stringSequence(<FILL_ME>).equals(\"0\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 49, "humaneval_task_id": "Java/15", "focal_method_name": "stringSequence", "focal_method_para": "(int n)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.stringSequence(<FILL_ME>).equals(\"0 1 2 3 4 5 6 7 8 9 10\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 50, "humaneval_task_id": "Java/15", "focal_method_name": "stringSequence", "focal_method_para": "(int n)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.stringSequence(<FILL_ME>).equals(\"0 1 2 3\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 51, "humaneval_task_id": "Java/16", "focal_method_name": "countDistinctCharacters", "focal_method_para": "(String string)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countDistinctCharacters(String string) {\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countDistinctCharacters(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 52, "humaneval_task_id": "Java/16", "focal_method_name": "countDistinctCharacters", "focal_method_para": "(String string)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countDistinctCharacters(String string) {\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countDistinctCharacters(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 53, "humaneval_task_id": "Java/16", "focal_method_name": "countDistinctCharacters", "focal_method_para": "(String string)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countDistinctCharacters(String string) {\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countDistinctCharacters(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 54, "humaneval_task_id": "Java/17", "focal_method_name": "parseMusic", "focal_method_para": "(String string)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseMusic(String string) {\n        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.parseMusic(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 55, "humaneval_task_id": "Java/17", "focal_method_name": "parseMusic", "focal_method_para": "(String string)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseMusic(String string) {\n        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.parseMusic(<FILL_ME>).equals(Arrays.asList(2, 1, 2, 1, 4, 2, 4, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 56, "humaneval_task_id": "Java/17", "focal_method_name": "parseMusic", "focal_method_para": "(String string)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseMusic(String string) {\n        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.parseMusic(<FILL_ME>).equals(Arrays.asList(2, 2, 1, 1, 4, 4, 4, 4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 57, "humaneval_task_id": "Java/17", "focal_method_name": "parseMusic", "focal_method_para": "(String string)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseMusic(String string) {\n        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.parseMusic(<FILL_ME>).equals(Arrays.asList(1, 1, 1, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 58, "humaneval_task_id": "Java/17", "focal_method_name": "parseMusic", "focal_method_para": "(String string)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseMusic(String string) {\n        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.parseMusic(<FILL_ME>).equals(Arrays.asList(4, 4, 4, 4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 59, "humaneval_task_id": "Java/18", "focal_method_name": "howManyTimes", "focal_method_para": "(String string, String substring)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.howManyTimes(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 60, "humaneval_task_id": "Java/18", "focal_method_name": "howManyTimes", "focal_method_para": "(String string, String substring)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.howManyTimes(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 61, "humaneval_task_id": "Java/18", "focal_method_name": "howManyTimes", "focal_method_para": "(String string, String substring)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.howManyTimes(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 62, "humaneval_task_id": "Java/19", "focal_method_name": "sortNumbers", "focal_method_para": "(String numbers)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortNumbers(<FILL_ME>).equals(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 63, "humaneval_task_id": "Java/19", "focal_method_name": "sortNumbers", "focal_method_para": "(String numbers)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortNumbers(<FILL_ME>).equals(\"zero four five seven eight nine\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 64, "humaneval_task_id": "Java/19", "focal_method_name": "sortNumbers", "focal_method_para": "(String numbers)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortNumbers(<FILL_ME>).equals(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 65, "humaneval_task_id": "Java/19", "focal_method_name": "sortNumbers", "focal_method_para": "(String numbers)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortNumbers(<FILL_ME>).equals(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 66, "humaneval_task_id": "Java/20", "focal_method_name": "findClosestElements", "focal_method_para": "(List<Double> numbers)", "focal_method_return_type": "List<Double>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findClosestElements(<FILL_ME>).equals(Arrays.asList(3.9, 4.0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 67, "humaneval_task_id": "Java/20", "focal_method_name": "findClosestElements", "focal_method_para": "(List<Double> numbers)", "focal_method_return_type": "List<Double>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findClosestElements(<FILL_ME>).equals(Arrays.asList(2.2, 3.1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 68, "humaneval_task_id": "Java/20", "focal_method_name": "findClosestElements", "focal_method_para": "(List<Double> numbers)", "focal_method_return_type": "List<Double>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findClosestElements(<FILL_ME>).equals(Arrays.asList(2.0, 2.2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 69, "humaneval_task_id": "Java/20", "focal_method_name": "findClosestElements", "focal_method_para": "(List<Double> numbers)", "focal_method_return_type": "List<Double>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findClosestElements(<FILL_ME>).equals(Arrays.asList(5.0, 5.9)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 70, "humaneval_task_id": "Java/20", "focal_method_name": "findClosestElements", "focal_method_para": "(List<Double> numbers)", "focal_method_return_type": "List<Double>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findClosestElements(<FILL_ME>).equals(Arrays.asList(2.0, 2.0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 71, "humaneval_task_id": "Java/21", "focal_method_name": "rescaleToUnit", "focal_method_para": "(List<Double> numbers)", "focal_method_return_type": "List<Double>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min_number = Collections.min(numbers);\n        double max_number = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - min_number) / (max_number - min_number));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.rescaleToUnit(<FILL_ME>).equals(Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 72, "humaneval_task_id": "Java/21", "focal_method_name": "rescaleToUnit", "focal_method_para": "(List<Double> numbers)", "focal_method_return_type": "List<Double>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min_number = Collections.min(numbers);\n        double max_number = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - min_number) / (max_number - min_number));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.rescaleToUnit(<FILL_ME>).equals(Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 73, "humaneval_task_id": "Java/21", "focal_method_name": "rescaleToUnit", "focal_method_para": "(List<Double> numbers)", "focal_method_return_type": "List<Double>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min_number = Collections.min(numbers);\n        double max_number = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - min_number) / (max_number - min_number));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.rescaleToUnit(<FILL_ME>).equals(Arrays.asList(1.0, 0.0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 74, "humaneval_task_id": "Java/21", "focal_method_name": "rescaleToUnit", "focal_method_para": "(List<Double> numbers)", "focal_method_return_type": "List<Double>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min_number = Collections.min(numbers);\n        double max_number = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - min_number) / (max_number - min_number));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.rescaleToUnit(<FILL_ME>).equals(Arrays.asList(0.0, 1.0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 75, "humaneval_task_id": "Java/22", "focal_method_name": "filterIntergers", "focal_method_para": "(List<Object> values)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filterIntergers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.filterIntergers(<FILL_ME>).equals(Arrays.asList(4, 9)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 76, "humaneval_task_id": "Java/22", "focal_method_name": "filterIntergers", "focal_method_para": "(List<Object> values)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filterIntergers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.filterIntergers(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 77, "humaneval_task_id": "Java/22", "focal_method_name": "filterIntergers", "focal_method_para": "(List<Object> values)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filterIntergers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.filterIntergers(<FILL_ME>).equals(Arrays.asList(3, 3, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 78, "humaneval_task_id": "Java/23", "focal_method_name": "strlen", "focal_method_para": "(String string)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strlen(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 79, "humaneval_task_id": "Java/23", "focal_method_name": "strlen", "focal_method_para": "(String string)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strlen(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 80, "humaneval_task_id": "Java/23", "focal_method_name": "strlen", "focal_method_para": "(String string)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strlen(<FILL_ME>) == 9)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 81, "humaneval_task_id": "Java/24", "focal_method_name": "largestDivisor", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestDivisor(<FILL_ME>) == 7)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 82, "humaneval_task_id": "Java/24", "focal_method_name": "largestDivisor", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestDivisor(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 83, "humaneval_task_id": "Java/24", "focal_method_name": "largestDivisor", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestDivisor(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 84, "humaneval_task_id": "Java/24", "focal_method_name": "largestDivisor", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestDivisor(<FILL_ME>) == 50)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 85, "humaneval_task_id": "Java/25", "focal_method_name": "factorize", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.factorize(<FILL_ME>).equals(Arrays.asList(2, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 86, "humaneval_task_id": "Java/25", "focal_method_name": "factorize", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.factorize(<FILL_ME>).equals(Arrays.asList(2, 3, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 87, "humaneval_task_id": "Java/25", "focal_method_name": "factorize", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.factorize(<FILL_ME>).equals(Arrays.asList(2, 2, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 88, "humaneval_task_id": "Java/25", "focal_method_name": "factorize", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.factorize(<FILL_ME>).equals(Arrays.asList(3, 3, 19, 19)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 89, "humaneval_task_id": "Java/25", "focal_method_name": "factorize", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.factorize(<FILL_ME>).equals(Arrays.asList(3, 3, 3, 19, 19, 19)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 90, "humaneval_task_id": "Java/25", "focal_method_name": "factorize", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.factorize(<FILL_ME>).equals(Arrays.asList(3, 19)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 91, "humaneval_task_id": "Java/25", "focal_method_name": "factorize", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.factorize(<FILL_ME>).equals(Arrays.asList(3, 19, 19, 19)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 92, "humaneval_task_id": "Java/25", "focal_method_name": "factorize", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.factorize(<FILL_ME>).equals(List.of(<FILL_ME>)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 93, "humaneval_task_id": "Java/26", "focal_method_name": "removeDuplicates", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.removeDuplicates(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 94, "humaneval_task_id": "Java/26", "focal_method_name": "removeDuplicates", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.removeDuplicates(<FILL_ME>).equals(Arrays.asList(1, 2, 3, 4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 95, "humaneval_task_id": "Java/26", "focal_method_name": "removeDuplicates", "focal_method_para": "(List<Integer> numbers)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.removeDuplicates(<FILL_ME>).equals(Arrays.asList(1, 4, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 96, "humaneval_task_id": "Java/27", "focal_method_name": "flipCase", "focal_method_para": "(String string)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.flipCase(<FILL_ME>), \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 97, "humaneval_task_id": "Java/27", "focal_method_name": "flipCase", "focal_method_para": "(String string)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.flipCase(<FILL_ME>), \"\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 98, "humaneval_task_id": "Java/27", "focal_method_name": "flipCase", "focal_method_para": "(String string)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.flipCase(<FILL_ME>), \"hELLO!\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 99, "humaneval_task_id": "Java/28", "focal_method_name": "concatenate", "focal_method_para": "(List<String> strings)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        return String.join(\"\", strings);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.concatenate(<FILL_ME>), \"xyz\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 100, "humaneval_task_id": "Java/28", "focal_method_name": "concatenate", "focal_method_para": "(List<String> strings)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        return String.join(\"\", strings);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.concatenate(<FILL_ME>), \"\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 101, "humaneval_task_id": "Java/28", "focal_method_name": "concatenate", "focal_method_para": "(List<String> strings)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        return String.join(\"\", strings);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.concatenate(<FILL_ME>), \"xyzwk\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 102, "humaneval_task_id": "Java/29", "focal_method_name": "filterByPrefix", "focal_method_para": "(List<String> strings, String prefix)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.filterByPrefix(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 103, "humaneval_task_id": "Java/29", "focal_method_name": "filterByPrefix", "focal_method_para": "(List<String> strings, String prefix)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.filterByPrefix(<FILL_ME>).equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 104, "humaneval_task_id": "Java/30", "focal_method_name": "getPositive", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(p -> p > 0).collect(Collectors.toList());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getPositive(<FILL_ME>).equals(Arrays.asList(4, 5, 6)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 105, "humaneval_task_id": "Java/30", "focal_method_name": "getPositive", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(p -> p > 0).collect(Collectors.toList());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getPositive(<FILL_ME>).equals(Arrays.asList(5, 3, 2, 3, 3, 9, 123, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 106, "humaneval_task_id": "Java/30", "focal_method_name": "getPositive", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(p -> p > 0).collect(Collectors.toList());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getPositive(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 107, "humaneval_task_id": "Java/31", "focal_method_name": "isPrime", "focal_method_para": "(int n)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isPrime(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 108, "humaneval_task_id": "Java/31", "focal_method_name": "isPrime", "focal_method_para": "(int n)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.isPrime(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 109, "humaneval_task_id": "Java/33", "focal_method_name": "sortThird", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortThird(<FILL_ME>).equals(Arrays.asList(2, 8, 3, 4, 6, 9, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 110, "humaneval_task_id": "Java/33", "focal_method_name": "sortThird", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortThird(<FILL_ME>).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 111, "humaneval_task_id": "Java/33", "focal_method_name": "sortThird", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortThird(<FILL_ME>).equals(Arrays.asList(2, 6, 9, 4, 8, 3, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 112, "humaneval_task_id": "Java/33", "focal_method_name": "sortThird", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortThird(<FILL_ME>).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 113, "humaneval_task_id": "Java/34", "focal_method_name": "unique", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(new HashSet<>(l));\n        Collections.sort(result);\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.unique(<FILL_ME>).equals(Arrays.asList(0, 2, 3, 5, 9, 123)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 114, "humaneval_task_id": "Java/35", "focal_method_name": "maxElement", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxElement(List<Integer> l) {\n        return Collections.max(l);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maxElement(<FILL_ME>) == 124)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 115, "humaneval_task_id": "Java/35", "focal_method_name": "maxElement", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxElement(List<Integer> l) {\n        return Collections.max(l);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maxElement(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 116, "humaneval_task_id": "Java/36", "focal_method_name": "fizzBuzz", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizzBuzz(int n) {\n        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fizzBuzz(<FILL_ME>) == 8026)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 117, "humaneval_task_id": "Java/36", "focal_method_name": "fizzBuzz", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizzBuzz(int n) {\n        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fizzBuzz(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 118, "humaneval_task_id": "Java/36", "focal_method_name": "fizzBuzz", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizzBuzz(int n) {\n        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fizzBuzz(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 119, "humaneval_task_id": "Java/36", "focal_method_name": "fizzBuzz", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizzBuzz(int n) {\n        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fizzBuzz(<FILL_ME>) == 6)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 120, "humaneval_task_id": "Java/36", "focal_method_name": "fizzBuzz", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizzBuzz(int n) {\n        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fizzBuzz(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 121, "humaneval_task_id": "Java/36", "focal_method_name": "fizzBuzz", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizzBuzz(int n) {\n        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fizzBuzz(<FILL_ME>) == 192)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 122, "humaneval_task_id": "Java/36", "focal_method_name": "fizzBuzz", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizzBuzz(int n) {\n        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fizzBuzz(<FILL_ME>) == 639)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 123, "humaneval_task_id": "Java/37", "focal_method_name": "sortEven", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(even);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortEven(<FILL_ME>).equals(Arrays.asList(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 124, "humaneval_task_id": "Java/37", "focal_method_name": "sortEven", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(even);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortEven(<FILL_ME>).equals(Arrays.asList(1, 2, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 125, "humaneval_task_id": "Java/37", "focal_method_name": "sortEven", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(even);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortEven(<FILL_ME>).equals(Arrays.asList(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 126, "humaneval_task_id": "Java/39", "focal_method_name": "primeFib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeFib(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 127, "humaneval_task_id": "Java/39", "focal_method_name": "primeFib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeFib(<FILL_ME>) == 13)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 128, "humaneval_task_id": "Java/39", "focal_method_name": "primeFib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeFib(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 129, "humaneval_task_id": "Java/39", "focal_method_name": "primeFib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeFib(<FILL_ME>) == 89)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 130, "humaneval_task_id": "Java/39", "focal_method_name": "primeFib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeFib(<FILL_ME>) == 433494437)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 131, "humaneval_task_id": "Java/39", "focal_method_name": "primeFib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeFib(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 132, "humaneval_task_id": "Java/39", "focal_method_name": "primeFib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeFib(<FILL_ME>) == 514229)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 133, "humaneval_task_id": "Java/39", "focal_method_name": "primeFib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeFib(<FILL_ME>) == 1597)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 134, "humaneval_task_id": "Java/39", "focal_method_name": "primeFib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeFib(<FILL_ME>) == 233)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 135, "humaneval_task_id": "Java/39", "focal_method_name": "primeFib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeFib(<FILL_ME>) == 28657)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 136, "humaneval_task_id": "Java/40", "focal_method_name": "triplesSumToZero", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.triplesSumToZero(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 137, "humaneval_task_id": "Java/40", "focal_method_name": "triplesSumToZero", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.triplesSumToZero(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 138, "humaneval_task_id": "Java/41", "focal_method_name": "carRaceCollision", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.carRaceCollision(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 139, "humaneval_task_id": "Java/41", "focal_method_name": "carRaceCollision", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.carRaceCollision(<FILL_ME>) == 9)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 140, "humaneval_task_id": "Java/41", "focal_method_name": "carRaceCollision", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.carRaceCollision(<FILL_ME>) == 64)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 141, "humaneval_task_id": "Java/41", "focal_method_name": "carRaceCollision", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.carRaceCollision(<FILL_ME>) == 16)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 142, "humaneval_task_id": "Java/41", "focal_method_name": "carRaceCollision", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.carRaceCollision(<FILL_ME>) == 100)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 143, "humaneval_task_id": "Java/42", "focal_method_name": "incrList", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(p -> p + 1).collect(Collectors.toList());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.incrList(<FILL_ME>).equals(Arrays.asList(4, 3, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 144, "humaneval_task_id": "Java/42", "focal_method_name": "incrList", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(p -> p + 1).collect(Collectors.toList());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.incrList(<FILL_ME>).equals(Arrays.asList(6, 3, 6, 3, 4, 4, 10, 1, 124)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 145, "humaneval_task_id": "Java/42", "focal_method_name": "incrList", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(p -> p + 1).collect(Collectors.toList());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.incrList(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 146, "humaneval_task_id": "Java/43", "focal_method_name": "pairsSumToZero", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairsSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.pairsSumToZero(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 147, "humaneval_task_id": "Java/43", "focal_method_name": "pairsSumToZero", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairsSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.pairsSumToZero(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 148, "humaneval_task_id": "Java/44", "focal_method_name": "changeBase", "focal_method_para": "(int x, int base)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String changeBase(int x, int base) {\n        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.changeBase(<FILL_ME>), \"111\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 149, "humaneval_task_id": "Java/44", "focal_method_name": "changeBase", "focal_method_para": "(int x, int base)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String changeBase(int x, int base) {\n        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.changeBase(<FILL_ME>), \"11101010\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 150, "humaneval_task_id": "Java/44", "focal_method_name": "changeBase", "focal_method_para": "(int x, int base)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String changeBase(int x, int base) {\n        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.changeBase(<FILL_ME>), \"1000\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 151, "humaneval_task_id": "Java/44", "focal_method_name": "changeBase", "focal_method_para": "(int x, int base)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String changeBase(int x, int base) {\n        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.changeBase(<FILL_ME>), \"100\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 152, "humaneval_task_id": "Java/44", "focal_method_name": "changeBase", "focal_method_para": "(int x, int base)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String changeBase(int x, int base) {\n        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.changeBase(<FILL_ME>), \"22\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 153, "humaneval_task_id": "Java/44", "focal_method_name": "changeBase", "focal_method_para": "(int x, int base)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String changeBase(int x, int base) {\n        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.changeBase(<FILL_ME>), \"10000\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 154, "humaneval_task_id": "Java/45", "focal_method_name": "triangleArea", "focal_method_para": "(double a, double h)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.triangleArea(<FILL_ME>) == 40.0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 155, "humaneval_task_id": "Java/45", "focal_method_name": "triangleArea", "focal_method_para": "(double a, double h)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.triangleArea(<FILL_ME>) == 7.5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 156, "humaneval_task_id": "Java/45", "focal_method_name": "triangleArea", "focal_method_para": "(double a, double h)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.triangleArea(<FILL_ME>) == 2.0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 157, "humaneval_task_id": "Java/46", "focal_method_name": "fib4", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        List<Integer> results = new ArrayList<>();\n        results.add(0);\n        results.add(0);\n        results.add(2);\n        results.add(0);\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));\n            results.remove(0);\n        }\n        return results.get(3);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fib4(<FILL_ME>) == 28)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 158, "humaneval_task_id": "Java/46", "focal_method_name": "fib4", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        List<Integer> results = new ArrayList<>();\n        results.add(0);\n        results.add(0);\n        results.add(2);\n        results.add(0);\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));\n            results.remove(0);\n        }\n        return results.get(3);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fib4(<FILL_ME>) == 386)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 159, "humaneval_task_id": "Java/46", "focal_method_name": "fib4", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        List<Integer> results = new ArrayList<>();\n        results.add(0);\n        results.add(0);\n        results.add(2);\n        results.add(0);\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));\n            results.remove(0);\n        }\n        return results.get(3);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fib4(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 160, "humaneval_task_id": "Java/46", "focal_method_name": "fib4", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        List<Integer> results = new ArrayList<>();\n        results.add(0);\n        results.add(0);\n        results.add(2);\n        results.add(0);\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));\n            results.remove(0);\n        }\n        return results.get(3);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fib4(<FILL_ME>) == 104)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 161, "humaneval_task_id": "Java/47", "focal_method_name": "median", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        List<Integer> list = l;\n        Collections.sort(list);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.median(<FILL_ME>) == 8.0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 162, "humaneval_task_id": "Java/47", "focal_method_name": "median", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        List<Integer> list = l;\n        Collections.sort(list);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.median(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 163, "humaneval_task_id": "Java/47", "focal_method_name": "median", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        List<Integer> list = l;\n        Collections.sort(list);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.median(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 164, "humaneval_task_id": "Java/47", "focal_method_name": "median", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        List<Integer> list = l;\n        Collections.sort(list);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.median(<FILL_ME>) == 5.5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 165, "humaneval_task_id": "Java/48", "focal_method_name": "isPalindrome", "focal_method_para": "(String text)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String text) {\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.isPalindrome(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 166, "humaneval_task_id": "Java/48", "focal_method_name": "isPalindrome", "focal_method_para": "(String text)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String text) {\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isPalindrome(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 167, "humaneval_task_id": "Java/49", "focal_method_name": "modp", "focal_method_para": "(int n, int p)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.modp(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 168, "humaneval_task_id": "Java/49", "focal_method_name": "modp", "focal_method_para": "(int n, int p)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.modp(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 169, "humaneval_task_id": "Java/49", "focal_method_name": "modp", "focal_method_para": "(int n, int p)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.modp(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 170, "humaneval_task_id": "Java/49", "focal_method_name": "modp", "focal_method_para": "(int n, int p)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.modp(<FILL_ME>) == 8)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 171, "humaneval_task_id": "Java/49", "focal_method_name": "modp", "focal_method_para": "(int n, int p)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.modp(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 172, "humaneval_task_id": "Java/51", "focal_method_name": "removeVowels", "focal_method_para": "(String text)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.removeVowels(<FILL_ME>), \"\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 173, "humaneval_task_id": "Java/51", "focal_method_name": "removeVowels", "focal_method_para": "(String text)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.removeVowels(<FILL_ME>), \"ybcd\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 174, "humaneval_task_id": "Java/51", "focal_method_name": "removeVowels", "focal_method_para": "(String text)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.removeVowels(<FILL_ME>), \"cB\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 175, "humaneval_task_id": "Java/51", "focal_method_name": "removeVowels", "focal_method_para": "(String text)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.removeVowels(<FILL_ME>), \"fdcb\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 176, "humaneval_task_id": "Java/51", "focal_method_name": "removeVowels", "focal_method_para": "(String text)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.removeVowels(<FILL_ME>), \"bcdf\\nghjklm\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 177, "humaneval_task_id": "Java/52", "focal_method_name": "belowThreshold", "focal_method_para": "(List<Integer> l, int t)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.belowThreshold(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 178, "humaneval_task_id": "Java/52", "focal_method_name": "belowThreshold", "focal_method_para": "(List<Integer> l, int t)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.belowThreshold(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 179, "humaneval_task_id": "Java/53", "focal_method_name": "add", "focal_method_para": "(int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.add(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 180, "humaneval_task_id": "Java/53", "focal_method_name": "add", "focal_method_para": "(int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.add(<FILL_ME>) == 12)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 181, "humaneval_task_id": "Java/53", "focal_method_name": "add", "focal_method_para": "(int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.add(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 182, "humaneval_task_id": "Java/54", "focal_method_name": "sameChars", "focal_method_para": "(String s0, String s1)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.sameChars(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 183, "humaneval_task_id": "Java/54", "focal_method_name": "sameChars", "focal_method_para": "(String s0, String s1)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sameChars(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 184, "humaneval_task_id": "Java/55", "focal_method_name": "fib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fib(<FILL_ME>) == 55)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 185, "humaneval_task_id": "Java/55", "focal_method_name": "fib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fib(<FILL_ME>) == 89)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 186, "humaneval_task_id": "Java/55", "focal_method_name": "fib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fib(<FILL_ME>) == 21)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 187, "humaneval_task_id": "Java/55", "focal_method_name": "fib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fib(<FILL_ME>) == 144)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 188, "humaneval_task_id": "Java/55", "focal_method_name": "fib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fib(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 189, "humaneval_task_id": "Java/56", "focal_method_name": "correctBracketing", "focal_method_para": "(String brackets)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.correctBracketing(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 190, "humaneval_task_id": "Java/56", "focal_method_name": "correctBracketing", "focal_method_para": "(String brackets)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.correctBracketing(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 191, "humaneval_task_id": "Java/57", "focal_method_name": "monotonic", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>(l), l2 = new ArrayList<>(l);\n        Collections.sort(l1);\n        l2.sort(Collections.reverseOrder());\n        return l.equals(l1) || l.equals(l2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.monotonic(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 192, "humaneval_task_id": "Java/57", "focal_method_name": "monotonic", "focal_method_para": "(List<Integer> l)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>(l), l2 = new ArrayList<>(l);\n        Collections.sort(l1);\n        l2.sort(Collections.reverseOrder());\n        return l.equals(l1) || l.equals(l2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.monotonic(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 193, "humaneval_task_id": "Java/58", "focal_method_name": "common", "focal_method_para": "(List<Integer> l1, List<Integer> l2)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> ret = new HashSet<>(l1);\n        ret.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(ret);\n        Collections.sort(result);\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.common(<FILL_ME>).equals(Arrays.asList(1, 5, 653)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 194, "humaneval_task_id": "Java/58", "focal_method_name": "common", "focal_method_para": "(List<Integer> l1, List<Integer> l2)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> ret = new HashSet<>(l1);\n        ret.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(ret);\n        Collections.sort(result);\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.common(<FILL_ME>).equals(Arrays.asList(2, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 195, "humaneval_task_id": "Java/58", "focal_method_name": "common", "focal_method_para": "(List<Integer> l1, List<Integer> l2)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> ret = new HashSet<>(l1);\n        ret.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(ret);\n        Collections.sort(result);\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.common(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 196, "humaneval_task_id": "Java/58", "focal_method_name": "common", "focal_method_para": "(List<Integer> l1, List<Integer> l2)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> ret = new HashSet<>(l1);\n        ret.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(ret);\n        Collections.sort(result);\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.common(<FILL_ME>).equals(Arrays.asList(2, 3, 4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 197, "humaneval_task_id": "Java/59", "focal_method_name": "largestPrimeFactor", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestPrimeFactor(<FILL_ME>) == 11)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 198, "humaneval_task_id": "Java/59", "focal_method_name": "largestPrimeFactor", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestPrimeFactor(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 199, "humaneval_task_id": "Java/59", "focal_method_name": "largestPrimeFactor", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestPrimeFactor(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 200, "humaneval_task_id": "Java/59", "focal_method_name": "largestPrimeFactor", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestPrimeFactor(<FILL_ME>) == 29)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 201, "humaneval_task_id": "Java/59", "focal_method_name": "largestPrimeFactor", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestPrimeFactor(<FILL_ME>) == 7)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 202, "humaneval_task_id": "Java/60", "focal_method_name": "sumToN", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumToN(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumToN(<FILL_ME>) == 5050)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 203, "humaneval_task_id": "Java/60", "focal_method_name": "sumToN", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumToN(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumToN(<FILL_ME>) == 465)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 204, "humaneval_task_id": "Java/60", "focal_method_name": "sumToN", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumToN(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumToN(<FILL_ME>) == 21)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 205, "humaneval_task_id": "Java/60", "focal_method_name": "sumToN", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumToN(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumToN(<FILL_ME>) == 66)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 206, "humaneval_task_id": "Java/60", "focal_method_name": "sumToN", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumToN(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumToN(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 207, "humaneval_task_id": "Java/61", "focal_method_name": "correctBracketing", "focal_method_para": "(String brackets)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.correctBracketing(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 208, "humaneval_task_id": "Java/61", "focal_method_name": "correctBracketing", "focal_method_para": "(String brackets)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.correctBracketing(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 209, "humaneval_task_id": "Java/62", "focal_method_name": "derivative", "focal_method_para": "(List<Integer> xs)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.derivative(<FILL_ME>).equals(Arrays.asList(2, 6)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 210, "humaneval_task_id": "Java/62", "focal_method_name": "derivative", "focal_method_para": "(List<Integer> xs)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.derivative(<FILL_ME>).equals(Arrays.asList(2, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 211, "humaneval_task_id": "Java/62", "focal_method_name": "derivative", "focal_method_para": "(List<Integer> xs)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.derivative(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 212, "humaneval_task_id": "Java/62", "focal_method_name": "derivative", "focal_method_para": "(List<Integer> xs)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.derivative(<FILL_ME>).equals(Arrays.asList(2, 2, 0, 16)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 213, "humaneval_task_id": "Java/62", "focal_method_name": "derivative", "focal_method_para": "(List<Integer> xs)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.derivative(<FILL_ME>).equals(Arrays.asList(1, 4, 12, 20)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 214, "humaneval_task_id": "Java/63", "focal_method_name": "fibfib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fibfib(<FILL_ME>) == 927)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 215, "humaneval_task_id": "Java/63", "focal_method_name": "fibfib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fibfib(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 216, "humaneval_task_id": "Java/63", "focal_method_name": "fibfib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fibfib(<FILL_ME>) == 24)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 217, "humaneval_task_id": "Java/63", "focal_method_name": "fibfib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fibfib(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 218, "humaneval_task_id": "Java/63", "focal_method_name": "fibfib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fibfib(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 219, "humaneval_task_id": "Java/63", "focal_method_name": "fibfib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fibfib(<FILL_ME>) == 81)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 220, "humaneval_task_id": "Java/63", "focal_method_name": "fibfib", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fibfib(<FILL_ME>) == 274)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 221, "humaneval_task_id": "Java/64", "focal_method_name": "vowelsCount", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowelsCount(String s) {\n        String vowels = \"aeiouAEIOU\";\n        int n_vowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                n_vowels += 1;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.vowelsCount(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 222, "humaneval_task_id": "Java/64", "focal_method_name": "vowelsCount", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowelsCount(String s) {\n        String vowels = \"aeiouAEIOU\";\n        int n_vowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                n_vowels += 1;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.vowelsCount(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 223, "humaneval_task_id": "Java/64", "focal_method_name": "vowelsCount", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowelsCount(String s) {\n        String vowels = \"aeiouAEIOU\";\n        int n_vowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                n_vowels += 1;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.vowelsCount(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 224, "humaneval_task_id": "Java/65", "focal_method_name": "circularShift", "focal_method_para": "(int x, int shift)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.circularShift(<FILL_ME>).equals(\"12\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 225, "humaneval_task_id": "Java/65", "focal_method_name": "circularShift", "focal_method_para": "(int x, int shift)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.circularShift(<FILL_ME>).equals(\"001\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 226, "humaneval_task_id": "Java/65", "focal_method_name": "circularShift", "focal_method_para": "(int x, int shift)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.circularShift(<FILL_ME>).equals(\"21\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 227, "humaneval_task_id": "Java/65", "focal_method_name": "circularShift", "focal_method_para": "(int x, int shift)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.circularShift(<FILL_ME>).equals(\"79\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 228, "humaneval_task_id": "Java/65", "focal_method_name": "circularShift", "focal_method_para": "(int x, int shift)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.circularShift(<FILL_ME>).equals(\"11\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 229, "humaneval_task_id": "Java/66", "focal_method_name": "digitSum", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.digitSum(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 230, "humaneval_task_id": "Java/66", "focal_method_name": "digitSum", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.digitSum(<FILL_ME>) == 327)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 231, "humaneval_task_id": "Java/66", "focal_method_name": "digitSum", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.digitSum(<FILL_ME>) == 151)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 232, "humaneval_task_id": "Java/66", "focal_method_name": "digitSum", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.digitSum(<FILL_ME>) == 131)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 233, "humaneval_task_id": "Java/66", "focal_method_name": "digitSum", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.digitSum(<FILL_ME>) == 67)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 234, "humaneval_task_id": "Java/66", "focal_method_name": "digitSum", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.digitSum(<FILL_ME>) == 69)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 235, "humaneval_task_id": "Java/66", "focal_method_name": "digitSum", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.digitSum(<FILL_ME>) == 153)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 236, "humaneval_task_id": "Java/67", "focal_method_name": "fruitDistribution", "focal_method_para": "(String s, int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fruitDistribution(<FILL_ME>) == 8)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 237, "humaneval_task_id": "Java/67", "focal_method_name": "fruitDistribution", "focal_method_para": "(String s, int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fruitDistribution(<FILL_ME>) == 10)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 238, "humaneval_task_id": "Java/67", "focal_method_name": "fruitDistribution", "focal_method_para": "(String s, int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fruitDistribution(<FILL_ME>) == 95)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 239, "humaneval_task_id": "Java/67", "focal_method_name": "fruitDistribution", "focal_method_para": "(String s, int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fruitDistribution(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 240, "humaneval_task_id": "Java/67", "focal_method_name": "fruitDistribution", "focal_method_para": "(String s, int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fruitDistribution(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 241, "humaneval_task_id": "Java/67", "focal_method_name": "fruitDistribution", "focal_method_para": "(String s, int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.fruitDistribution(<FILL_ME>) == 19)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 242, "humaneval_task_id": "Java/68", "focal_method_name": "pluck", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.pluck(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 243, "humaneval_task_id": "Java/68", "focal_method_name": "pluck", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.pluck(<FILL_ME>).equals(Arrays.asList(6, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 244, "humaneval_task_id": "Java/68", "focal_method_name": "pluck", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.pluck(<FILL_ME>).equals(Arrays.asList(4, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 245, "humaneval_task_id": "Java/68", "focal_method_name": "pluck", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.pluck(<FILL_ME>).equals(Arrays.asList(0, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 246, "humaneval_task_id": "Java/68", "focal_method_name": "pluck", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.pluck(<FILL_ME>).equals(Arrays.asList(0, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 247, "humaneval_task_id": "Java/68", "focal_method_name": "pluck", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.pluck(<FILL_ME>).equals(Arrays.asList(2, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 248, "humaneval_task_id": "Java/69", "focal_method_name": "search", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.search(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 249, "humaneval_task_id": "Java/69", "focal_method_name": "search", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.search(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 250, "humaneval_task_id": "Java/69", "focal_method_name": "search", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.search(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 251, "humaneval_task_id": "Java/69", "focal_method_name": "search", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.search(<FILL_ME>) == -1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 252, "humaneval_task_id": "Java/69", "focal_method_name": "search", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.search(<FILL_ME>) == 8)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 253, "humaneval_task_id": "Java/69", "focal_method_name": "search", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.search(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 254, "humaneval_task_id": "Java/70", "focal_method_name": "strangeSortList", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strangeSortList(<FILL_ME>).equals(Arrays.asList(1, 5, 2, 4, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 255, "humaneval_task_id": "Java/70", "focal_method_name": "strangeSortList", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strangeSortList(<FILL_ME>).equals(Arrays.asList(1, 4, 2, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 256, "humaneval_task_id": "Java/70", "focal_method_name": "strangeSortList", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strangeSortList(<FILL_ME>).equals(Arrays.asList(1, 9, 5, 8, 6, 7)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 257, "humaneval_task_id": "Java/70", "focal_method_name": "strangeSortList", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strangeSortList(<FILL_ME>).equals(Arrays.asList(5, 9, 6, 8, 7)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 258, "humaneval_task_id": "Java/70", "focal_method_name": "strangeSortList", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strangeSortList(<FILL_ME>).equals(List.of(111111)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 259, "humaneval_task_id": "Java/70", "focal_method_name": "strangeSortList", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strangeSortList(<FILL_ME>).equals(Arrays.asList(5, 5, 5, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 260, "humaneval_task_id": "Java/70", "focal_method_name": "strangeSortList", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strangeSortList(<FILL_ME>).equals(Arrays.asList(1, 8, 2, 7, 3, 6, 4, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 261, "humaneval_task_id": "Java/70", "focal_method_name": "strangeSortList", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strangeSortList(<FILL_ME>).equals(Arrays.asList(-5, 5, -5, 5, 0, 2, 2, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 262, "humaneval_task_id": "Java/70", "focal_method_name": "strangeSortList", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.strangeSortList(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 263, "humaneval_task_id": "Java/71", "focal_method_name": "triangleArea", "focal_method_para": "(double a, double b, double c)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.triangleArea(<FILL_ME>) == 6.00)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 264, "humaneval_task_id": "Java/71", "focal_method_name": "triangleArea", "focal_method_para": "(double a, double b, double c)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.triangleArea(<FILL_ME>) == -1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 265, "humaneval_task_id": "Java/71", "focal_method_name": "triangleArea", "focal_method_para": "(double a, double b, double c)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.triangleArea(<FILL_ME>) == 0.43)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 266, "humaneval_task_id": "Java/71", "focal_method_name": "triangleArea", "focal_method_para": "(double a, double b, double c)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.triangleArea(<FILL_ME>) == 16.25)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 267, "humaneval_task_id": "Java/71", "focal_method_name": "triangleArea", "focal_method_para": "(double a, double b, double c)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.triangleArea(<FILL_ME>) == 8.18)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 268, "humaneval_task_id": "Java/71", "focal_method_name": "triangleArea", "focal_method_para": "(double a, double b, double c)", "focal_method_return_type": "double", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.triangleArea(<FILL_ME>) == 1.73)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 269, "humaneval_task_id": "Java/72", "focal_method_name": "willItFly", "focal_method_para": "(List<Integer> q, int w)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (!Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.willItFly(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 270, "humaneval_task_id": "Java/72", "focal_method_name": "willItFly", "focal_method_para": "(List<Integer> q, int w)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (!Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.willItFly(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 271, "humaneval_task_id": "Java/73", "focal_method_name": "smallestChange", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.smallestChange(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 272, "humaneval_task_id": "Java/73", "focal_method_name": "smallestChange", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.smallestChange(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 273, "humaneval_task_id": "Java/73", "focal_method_name": "smallestChange", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.smallestChange(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 274, "humaneval_task_id": "Java/74", "focal_method_name": "totalMatch", "focal_method_para": "(List<String> lst1, List<String> lst2)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.totalMatch(<FILL_ME>).equals(Arrays.asList(\"hI\", \"hi\", \"hi\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 275, "humaneval_task_id": "Java/74", "focal_method_name": "totalMatch", "focal_method_para": "(List<String> lst1, List<String> lst2)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.totalMatch(<FILL_ME>).equals(List.of(\"4\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 276, "humaneval_task_id": "Java/74", "focal_method_name": "totalMatch", "focal_method_para": "(List<String> lst1, List<String> lst2)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.totalMatch(<FILL_ME>).equals(Arrays.asList(\"hi\", \"admin\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 277, "humaneval_task_id": "Java/74", "focal_method_name": "totalMatch", "focal_method_para": "(List<String> lst1, List<String> lst2)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.totalMatch(<FILL_ME>).equals(Arrays.asList(\"hi\", \"hi\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 278, "humaneval_task_id": "Java/74", "focal_method_name": "totalMatch", "focal_method_para": "(List<String> lst1, List<String> lst2)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.totalMatch(<FILL_ME>).equals(Arrays.asList(\"hI\", \"Hi\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 279, "humaneval_task_id": "Java/74", "focal_method_name": "totalMatch", "focal_method_para": "(List<String> lst1, List<String> lst2)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.totalMatch(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 280, "humaneval_task_id": "Java/75", "focal_method_name": "isMultiplyPrime", "focal_method_para": "(int a)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isMultiplyPrime(int a) {\n        class IsPrime {\n            public static boolean is_prime(int n) {\n                for (int j = 2; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.is_prime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.is_prime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.is_prime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isMultiplyPrime(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 281, "humaneval_task_id": "Java/75", "focal_method_name": "isMultiplyPrime", "focal_method_para": "(int a)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isMultiplyPrime(int a) {\n        class IsPrime {\n            public static boolean is_prime(int n) {\n                for (int j = 2; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.is_prime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.is_prime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.is_prime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.isMultiplyPrime(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 282, "humaneval_task_id": "Java/76", "focal_method_name": "isSimplePower", "focal_method_para": "(int x, int n)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isSimplePower(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 283, "humaneval_task_id": "Java/76", "focal_method_name": "isSimplePower", "focal_method_para": "(int x, int n)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.isSimplePower(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 284, "humaneval_task_id": "Java/77", "focal_method_name": "iscube", "focal_method_para": "(int a)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        a = Math.abs(a);\n        return Math.round(Math.pow(Math.round(Math.pow(a, 1. / 3)), 3)) == a;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.iscube(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 285, "humaneval_task_id": "Java/77", "focal_method_name": "iscube", "focal_method_para": "(int a)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        a = Math.abs(a);\n        return Math.round(Math.pow(Math.round(Math.pow(a, 1. / 3)), 3)) == a;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.iscube(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 286, "humaneval_task_id": "Java/78", "focal_method_name": "hexKey", "focal_method_para": "(String num)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hexKey(String num) {\n        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.hexKey(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 287, "humaneval_task_id": "Java/78", "focal_method_name": "hexKey", "focal_method_para": "(String num)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hexKey(String num) {\n        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.hexKey(<FILL_ME>) == 12)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 288, "humaneval_task_id": "Java/78", "focal_method_name": "hexKey", "focal_method_para": "(String num)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hexKey(String num) {\n        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.hexKey(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 289, "humaneval_task_id": "Java/78", "focal_method_name": "hexKey", "focal_method_para": "(String num)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hexKey(String num) {\n        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.hexKey(<FILL_ME>) == 6)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 290, "humaneval_task_id": "Java/78", "focal_method_name": "hexKey", "focal_method_para": "(String num)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hexKey(String num) {\n        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.hexKey(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 291, "humaneval_task_id": "Java/78", "focal_method_name": "hexKey", "focal_method_para": "(String num)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hexKey(String num) {\n        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.hexKey(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 292, "humaneval_task_id": "Java/79", "focal_method_name": "decimalToBinary", "focal_method_para": "(int decimal)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimalToBinary(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.decimalToBinary(<FILL_ME>), \"db1100111db\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 293, "humaneval_task_id": "Java/79", "focal_method_name": "decimalToBinary", "focal_method_para": "(int decimal)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimalToBinary(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.decimalToBinary(<FILL_ME>), \"db1111db\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 294, "humaneval_task_id": "Java/79", "focal_method_name": "decimalToBinary", "focal_method_para": "(int decimal)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimalToBinary(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.decimalToBinary(<FILL_ME>), \"db0db\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 295, "humaneval_task_id": "Java/79", "focal_method_name": "decimalToBinary", "focal_method_para": "(int decimal)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimalToBinary(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.decimalToBinary(<FILL_ME>), \"db100000db\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 296, "humaneval_task_id": "Java/80", "focal_method_name": "isHappy", "focal_method_para": "(String s)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.isHappy(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 297, "humaneval_task_id": "Java/80", "focal_method_name": "isHappy", "focal_method_para": "(String s)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isHappy(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 298, "humaneval_task_id": "Java/81", "focal_method_name": "numericalLetterGrade", "focal_method_para": "(List<Double> grades)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.numericalLetterGrade(<FILL_ME>).equals(Arrays.asList(\"E\", \"D-\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 299, "humaneval_task_id": "Java/81", "focal_method_name": "numericalLetterGrade", "focal_method_para": "(List<Double> grades)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.numericalLetterGrade(<FILL_ME>).equals(List.of(\"E\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 300, "humaneval_task_id": "Java/81", "focal_method_name": "numericalLetterGrade", "focal_method_para": "(List<Double> grades)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.numericalLetterGrade(<FILL_ME>).equals(List.of(\"D-\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 301, "humaneval_task_id": "Java/81", "focal_method_name": "numericalLetterGrade", "focal_method_para": "(List<Double> grades)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.numericalLetterGrade(<FILL_ME>).equals(List.of(\"D+\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 302, "humaneval_task_id": "Java/81", "focal_method_name": "numericalLetterGrade", "focal_method_para": "(List<Double> grades)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.numericalLetterGrade(<FILL_ME>).equals(Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 303, "humaneval_task_id": "Java/81", "focal_method_name": "numericalLetterGrade", "focal_method_para": "(List<Double> grades)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.numericalLetterGrade(<FILL_ME>).equals(Arrays.asList(\"D\", \"D-\", \"C-\", \"B\", \"B+\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 304, "humaneval_task_id": "Java/82", "focal_method_name": "primeLength", "focal_method_para": "(String string)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeLength(<FILL_ME>) == false)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 305, "humaneval_task_id": "Java/82", "focal_method_name": "primeLength", "focal_method_para": "(String string)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean primeLength(String string) {\n        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.primeLength(<FILL_ME>) == true)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 306, "humaneval_task_id": "Java/83", "focal_method_name": "startsOneEnds", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.startsOneEnds(<FILL_ME>) == 18000)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 307, "humaneval_task_id": "Java/83", "focal_method_name": "startsOneEnds", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.startsOneEnds(<FILL_ME>) == 180)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 308, "humaneval_task_id": "Java/83", "focal_method_name": "startsOneEnds", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.startsOneEnds(<FILL_ME>) == 18)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 309, "humaneval_task_id": "Java/83", "focal_method_name": "startsOneEnds", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.startsOneEnds(<FILL_ME>) == 1800)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 310, "humaneval_task_id": "Java/83", "focal_method_name": "startsOneEnds", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.startsOneEnds(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 311, "humaneval_task_id": "Java/84", "focal_method_name": "solve", "focal_method_para": "(int N)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"1100\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 312, "humaneval_task_id": "Java/84", "focal_method_name": "solve", "focal_method_para": "(int N)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"1\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 313, "humaneval_task_id": "Java/84", "focal_method_name": "solve", "focal_method_para": "(int N)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"1001\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 314, "humaneval_task_id": "Java/84", "focal_method_name": "solve", "focal_method_para": "(int N)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"10010\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 315, "humaneval_task_id": "Java/84", "focal_method_name": "solve", "focal_method_para": "(int N)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"110\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 316, "humaneval_task_id": "Java/85", "focal_method_name": "add", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.add(<FILL_ME>) == 88)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 317, "humaneval_task_id": "Java/85", "focal_method_name": "add", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.add(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 318, "humaneval_task_id": "Java/85", "focal_method_name": "add", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.add(<FILL_ME>) == 122)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 319, "humaneval_task_id": "Java/85", "focal_method_name": "add", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.add(<FILL_ME>) == 12)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 320, "humaneval_task_id": "Java/86", "focal_method_name": "antiShuffle", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String antiShuffle(String s) {\n        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.antiShuffle(<FILL_ME>), \"bemnru\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 321, "humaneval_task_id": "Java/86", "focal_method_name": "antiShuffle", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String antiShuffle(String s) {\n        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.antiShuffle(<FILL_ME>), \".Hi My aemn is Meirst .Rboot How aer ?ouy\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 322, "humaneval_task_id": "Java/86", "focal_method_name": "antiShuffle", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String antiShuffle(String s) {\n        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.antiShuffle(<FILL_ME>), \"Hello !!!Wdlor\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 323, "humaneval_task_id": "Java/86", "focal_method_name": "antiShuffle", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String antiShuffle(String s) {\n        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.antiShuffle(<FILL_ME>), \"\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 324, "humaneval_task_id": "Java/86", "focal_method_name": "antiShuffle", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String antiShuffle(String s) {\n        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.antiShuffle(<FILL_ME>), \"ehllo\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 325, "humaneval_task_id": "Java/86", "focal_method_name": "antiShuffle", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String antiShuffle(String s) {\n        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.antiShuffle(<FILL_ME>), \"abcd\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 326, "humaneval_task_id": "Java/86", "focal_method_name": "antiShuffle", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String antiShuffle(String s) {\n        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.antiShuffle(<FILL_ME>), \"Hi\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 327, "humaneval_task_id": "Java/87", "focal_method_name": "getRow", "focal_method_para": "(List<List<Integer>> lst, int x)", "focal_method_return_type": "List<List<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!((<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 328, "humaneval_task_id": "Java/87", "focal_method_name": "getRow", "focal_method_para": "(List<List<Integer>> lst, int x)", "focal_method_return_type": "List<List<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getRow(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 329, "humaneval_task_id": "Java/87", "focal_method_name": "getRow", "focal_method_para": "(List<List<Integer>> lst, int x)", "focal_method_return_type": "List<List<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!((<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 330, "humaneval_task_id": "Java/87", "focal_method_name": "getRow", "focal_method_para": "(List<List<Integer>> lst, int x)", "focal_method_return_type": "List<List<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!((<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 331, "humaneval_task_id": "Java/87", "focal_method_name": "getRow", "focal_method_para": "(List<List<Integer>> lst, int x)", "focal_method_return_type": "List<List<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getRow(<FILL_ME>).equals(List.of(Arrays.asList(2, 2))))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 332, "humaneval_task_id": "Java/88", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> array)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(List.of(5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 333, "humaneval_task_id": "Java/88", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> array)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(Arrays.asList(0, 11, 15, 32, 42, 87)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 334, "humaneval_task_id": "Java/88", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> array)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 335, "humaneval_task_id": "Java/88", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> array)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(Arrays.asList(0, 1, 2, 3, 4, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 336, "humaneval_task_id": "Java/88", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> array)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(Arrays.asList(6, 5, 4, 3, 2, 1, 0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 337, "humaneval_task_id": "Java/88", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> array)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(Arrays.asList(1, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 338, "humaneval_task_id": "Java/88", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> array)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(Arrays.asList(23, 21, 14, 11)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 339, "humaneval_task_id": "Java/89", "focal_method_name": "encrypt", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encrypt(<FILL_ME>), \"ix\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 340, "humaneval_task_id": "Java/89", "focal_method_name": "encrypt", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encrypt(<FILL_ME>), \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 341, "humaneval_task_id": "Java/89", "focal_method_name": "encrypt", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encrypt(<FILL_ME>), \"kj\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 342, "humaneval_task_id": "Java/89", "focal_method_name": "encrypt", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encrypt(<FILL_ME>), \"ewhjklnop\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 343, "humaneval_task_id": "Java/89", "focal_method_name": "encrypt", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encrypt(<FILL_ME>), \"e\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 344, "humaneval_task_id": "Java/89", "focal_method_name": "encrypt", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encrypt(<FILL_ME>), \"lm\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 345, "humaneval_task_id": "Java/89", "focal_method_name": "encrypt", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encrypt(<FILL_ME>), \"jeiajeaijeiak\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 346, "humaneval_task_id": "Java/89", "focal_method_name": "encrypt", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encrypt(<FILL_ME>), \"lippsqcjvmirh\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 347, "humaneval_task_id": "Java/90", "focal_method_name": "nextSmallest", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "Optional<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.nextSmallest(<FILL_ME>).isEmpty())) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 348, "humaneval_task_id": "Java/90", "focal_method_name": "nextSmallest", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "Optional<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.nextSmallest(<FILL_ME>).get() == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 349, "humaneval_task_id": "Java/90", "focal_method_name": "nextSmallest", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "Optional<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.nextSmallest(<FILL_ME>).get() == -35)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 350, "humaneval_task_id": "Java/90", "focal_method_name": "nextSmallest", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "Optional<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.nextSmallest(<FILL_ME>).get() == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 351, "humaneval_task_id": "Java/91", "focal_method_name": "isBored", "focal_method_para": "(String S)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int isBored(String S) {\n        String [] sentences = S.split(\"[.?!]\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isBored(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 352, "humaneval_task_id": "Java/91", "focal_method_name": "isBored", "focal_method_para": "(String S)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int isBored(String S) {\n        String [] sentences = S.split(\"[.?!]\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isBored(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 353, "humaneval_task_id": "Java/91", "focal_method_name": "isBored", "focal_method_para": "(String S)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int isBored(String S) {\n        String [] sentences = S.split(\"[.?!]\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isBored(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 354, "humaneval_task_id": "Java/92", "focal_method_name": "anyInt", "focal_method_para": "(Object x, Object y, Object z)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.anyInt(<FILL_ME>) == true)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 355, "humaneval_task_id": "Java/92", "focal_method_name": "anyInt", "focal_method_para": "(Object x, Object y, Object z)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.anyInt(<FILL_ME>) == false)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 356, "humaneval_task_id": "Java/93", "focal_method_name": "encode", "focal_method_para": "(String message)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encode(<FILL_ME>), \"tHKS KS C MGSSCGG\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 357, "humaneval_task_id": "Java/93", "focal_method_name": "encode", "focal_method_para": "(String message)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encode(<FILL_ME>), \"mWDCSKR\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 358, "humaneval_task_id": "Java/93", "focal_method_name": "encode", "focal_method_para": "(String message)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encode(<FILL_ME>), \"tgst\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 359, "humaneval_task_id": "Java/93", "focal_method_name": "encode", "focal_method_para": "(String message)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encode(<FILL_ME>), \"k dQnT kNqW wHcT Tq wRkTg\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 360, "humaneval_task_id": "Java/93", "focal_method_name": "encode", "focal_method_para": "(String message)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.encode(<FILL_ME>), \"ygs\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 361, "humaneval_task_id": "Java/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.skjkasdkd(<FILL_ME>) == 11)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 362, "humaneval_task_id": "Java/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.skjkasdkd(<FILL_ME>) == 19)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 363, "humaneval_task_id": "Java/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.skjkasdkd(<FILL_ME>) == 13)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 364, "humaneval_task_id": "Java/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.skjkasdkd(<FILL_ME>) == 25)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 365, "humaneval_task_id": "Java/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.skjkasdkd(<FILL_ME>) == 7)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 366, "humaneval_task_id": "Java/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.skjkasdkd(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 367, "humaneval_task_id": "Java/94", "focal_method_name": "skjkasdkd", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.skjkasdkd(<FILL_ME>) == 10)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 368, "humaneval_task_id": "Java/95", "focal_method_name": "checkDictCase", "focal_method_para": "(Map<Object, Object> dict)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean is_upper = true, is_lower = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    is_upper = false;\n                } else if (Character.isUpperCase(c)) {\n                    is_lower = false;\n                } else {\n                    is_upper = false;\n                    is_lower = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (is_upper) {\n                    state = \"upper\";\n                } else if (is_lower) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !is_upper) || (state.equals(\"lower\") && !is_lower)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.checkDictCase(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 369, "humaneval_task_id": "Java/95", "focal_method_name": "checkDictCase", "focal_method_para": "(Map<Object, Object> dict)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean is_upper = true, is_lower = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    is_upper = false;\n                } else if (Character.isUpperCase(c)) {\n                    is_lower = false;\n                } else {\n                    is_upper = false;\n                    is_lower = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (is_upper) {\n                    state = \"upper\";\n                } else if (is_lower) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !is_upper) || (state.equals(\"lower\") && !is_lower)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.checkDictCase(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 370, "humaneval_task_id": "Java/96", "focal_method_name": "countUpTo", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpTo(<FILL_ME>).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 371, "humaneval_task_id": "Java/96", "focal_method_name": "countUpTo", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpTo(<FILL_ME>).equals(Arrays.asList(2, 3, 5, 7)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 372, "humaneval_task_id": "Java/96", "focal_method_name": "countUpTo", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpTo(<FILL_ME>).equals(Arrays.asList(2, 3, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 373, "humaneval_task_id": "Java/96", "focal_method_name": "countUpTo", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpTo(<FILL_ME>).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 374, "humaneval_task_id": "Java/96", "focal_method_name": "countUpTo", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpTo(<FILL_ME>).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 375, "humaneval_task_id": "Java/96", "focal_method_name": "countUpTo", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpTo(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 376, "humaneval_task_id": "Java/96", "focal_method_name": "countUpTo", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpTo(<FILL_ME>).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 377, "humaneval_task_id": "Java/96", "focal_method_name": "countUpTo", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpTo(<FILL_ME>).equals(Arrays.asList(2, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 378, "humaneval_task_id": "Java/97", "focal_method_name": "multiply", "focal_method_para": "(int a, int b)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.multiply(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 379, "humaneval_task_id": "Java/97", "focal_method_name": "multiply", "focal_method_para": "(int a, int b)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.multiply(<FILL_ME>) == 42)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 380, "humaneval_task_id": "Java/97", "focal_method_name": "multiply", "focal_method_para": "(int a, int b)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.multiply(<FILL_ME>) == 49)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 381, "humaneval_task_id": "Java/97", "focal_method_name": "multiply", "focal_method_para": "(int a, int b)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.multiply(<FILL_ME>) == 72)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 382, "humaneval_task_id": "Java/97", "focal_method_name": "multiply", "focal_method_para": "(int a, int b)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.multiply(<FILL_ME>) == 20)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 383, "humaneval_task_id": "Java/97", "focal_method_name": "multiply", "focal_method_para": "(int a, int b)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.multiply(<FILL_ME>) == 16)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 384, "humaneval_task_id": "Java/98", "focal_method_name": "countUpper", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpper(<FILL_ME>)  == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 385, "humaneval_task_id": "Java/98", "focal_method_name": "countUpper", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpper(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 386, "humaneval_task_id": "Java/98", "focal_method_name": "countUpper", "focal_method_para": "(String s)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpper(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 387, "humaneval_task_id": "Java/99", "focal_method_name": "countUpper", "focal_method_para": "(String value)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String value) {\n        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpper(<FILL_ME>) == 10)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 388, "humaneval_task_id": "Java/99", "focal_method_name": "countUpper", "focal_method_para": "(String value)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String value) {\n        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpper(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 389, "humaneval_task_id": "Java/99", "focal_method_name": "countUpper", "focal_method_para": "(String value)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String value) {\n        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpper(<FILL_ME>) == 15)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 390, "humaneval_task_id": "Java/99", "focal_method_name": "countUpper", "focal_method_para": "(String value)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String value) {\n        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countUpper(<FILL_ME>) == -16)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 391, "humaneval_task_id": "Java/100", "focal_method_name": "makeAPile", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.makeAPile(<FILL_ME>).equals(Arrays.asList(5, 7, 9, 11, 13)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 392, "humaneval_task_id": "Java/100", "focal_method_name": "makeAPile", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.makeAPile(<FILL_ME>).equals(Arrays.asList(4, 6, 8, 10)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 393, "humaneval_task_id": "Java/100", "focal_method_name": "makeAPile", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.makeAPile(<FILL_ME>).equals(Arrays.asList(8, 10, 12, 14, 16, 18, 20, 22)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 394, "humaneval_task_id": "Java/100", "focal_method_name": "makeAPile", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.makeAPile(<FILL_ME>).equals(Arrays.asList(6, 8, 10, 12, 14, 16)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 395, "humaneval_task_id": "Java/100", "focal_method_name": "makeAPile", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.makeAPile(<FILL_ME>).equals(Arrays.asList(3, 5, 7)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 396, "humaneval_task_id": "Java/101", "focal_method_name": "wordStrings", "focal_method_para": "(String s)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> wordStrings(String s) {\n        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.wordStrings(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 397, "humaneval_task_id": "Java/101", "focal_method_name": "wordStrings", "focal_method_para": "(String s)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> wordStrings(String s) {\n        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.wordStrings(<FILL_ME>).equals(Arrays.asList(\"ahmed\", \"gamal\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 398, "humaneval_task_id": "Java/101", "focal_method_name": "wordStrings", "focal_method_para": "(String s)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> wordStrings(String s) {\n        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.wordStrings(<FILL_ME>).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 399, "humaneval_task_id": "Java/101", "focal_method_name": "wordStrings", "focal_method_para": "(String s)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> wordStrings(String s) {\n        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.wordStrings(<FILL_ME>).equals(Arrays.asList(\"Hi\", \"my\", \"name\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 400, "humaneval_task_id": "Java/101", "focal_method_name": "wordStrings", "focal_method_para": "(String s)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> wordStrings(String s) {\n        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.wordStrings(<FILL_ME>).equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 401, "humaneval_task_id": "Java/102", "focal_method_name": "chooseNum", "focal_method_para": "(int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.chooseNum(<FILL_ME>) == 28)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 402, "humaneval_task_id": "Java/102", "focal_method_name": "chooseNum", "focal_method_para": "(int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.chooseNum(<FILL_ME>) == 546)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 403, "humaneval_task_id": "Java/102", "focal_method_name": "chooseNum", "focal_method_para": "(int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.chooseNum(<FILL_ME>) == -1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 404, "humaneval_task_id": "Java/102", "focal_method_name": "chooseNum", "focal_method_para": "(int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.chooseNum(<FILL_ME>) == 12354)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 405, "humaneval_task_id": "Java/102", "focal_method_name": "chooseNum", "focal_method_para": "(int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.chooseNum(<FILL_ME>) == 14)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 406, "humaneval_task_id": "Java/103", "focal_method_name": "roundedAvg", "focal_method_para": "(int n, int m)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals((String) s.roundedAvg(<FILL_ME>), \"1001110010\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 407, "humaneval_task_id": "Java/103", "focal_method_name": "roundedAvg", "focal_method_para": "(int n, int m)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals((String) s.roundedAvg(<FILL_ME>), \"1111100101\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 408, "humaneval_task_id": "Java/103", "focal_method_name": "roundedAvg", "focal_method_para": "(int n, int m)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals((String) s.roundedAvg(<FILL_ME>), \"110101101\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 409, "humaneval_task_id": "Java/103", "focal_method_name": "roundedAvg", "focal_method_para": "(int n, int m)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals((String) s.roundedAvg(<FILL_ME>), \"101\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 410, "humaneval_task_id": "Java/103", "focal_method_name": "roundedAvg", "focal_method_para": "(int n, int m)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!((int) s.roundedAvg(<FILL_ME>) == -1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 411, "humaneval_task_id": "Java/103", "focal_method_name": "roundedAvg", "focal_method_para": "(int n, int m)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals((String) s.roundedAvg(<FILL_ME>), \"1111001011\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 412, "humaneval_task_id": "Java/103", "focal_method_name": "roundedAvg", "focal_method_para": "(int n, int m)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals((String) s.roundedAvg(<FILL_ME>), \"1010\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 413, "humaneval_task_id": "Java/103", "focal_method_name": "roundedAvg", "focal_method_para": "(int n, int m)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals((String) s.roundedAvg(<FILL_ME>), \"1011000010\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 414, "humaneval_task_id": "Java/103", "focal_method_name": "roundedAvg", "focal_method_para": "(int n, int m)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals((String) s.roundedAvg(<FILL_ME>), \"11010111\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 415, "humaneval_task_id": "Java/103", "focal_method_name": "roundedAvg", "focal_method_para": "(int n, int m)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals((String) s.roundedAvg(<FILL_ME>), \"101101110\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 416, "humaneval_task_id": "Java/103", "focal_method_name": "roundedAvg", "focal_method_para": "(int n, int m)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals((String) s.roundedAvg(<FILL_ME>), \"11\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 417, "humaneval_task_id": "Java/104", "focal_method_name": "uniqueDigits", "focal_method_para": "(List<Integer> x)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> odd_digit_elements = new ArrayList<>();\n        for (int i : x) {\n            boolean is_unique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false;\n                    break;\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.add(i);\n            }\n        }\n        Collections.sort(odd_digit_elements);\n        return odd_digit_elements;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.uniqueDigits(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 418, "humaneval_task_id": "Java/104", "focal_method_name": "uniqueDigits", "focal_method_para": "(List<Integer> x)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> odd_digit_elements = new ArrayList<>();\n        for (int i : x) {\n            boolean is_unique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false;\n                    break;\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.add(i);\n            }\n        }\n        Collections.sort(odd_digit_elements);\n        return odd_digit_elements;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.uniqueDigits(<FILL_ME>).equals(Arrays.asList(31, 135)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 419, "humaneval_task_id": "Java/104", "focal_method_name": "uniqueDigits", "focal_method_para": "(List<Integer> x)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> odd_digit_elements = new ArrayList<>();\n        for (int i : x) {\n            boolean is_unique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false;\n                    break;\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.add(i);\n            }\n        }\n        Collections.sort(odd_digit_elements);\n        return odd_digit_elements;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.uniqueDigits(<FILL_ME>).equals(Arrays.asList(1, 15, 33)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 420, "humaneval_task_id": "Java/104", "focal_method_name": "uniqueDigits", "focal_method_para": "(List<Integer> x)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> odd_digit_elements = new ArrayList<>();\n        for (int i : x) {\n            boolean is_unique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false;\n                    break;\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.add(i);\n            }\n        }\n        Collections.sort(odd_digit_elements);\n        return odd_digit_elements;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.uniqueDigits(<FILL_ME>).equals(Arrays.asList(111, 151)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 421, "humaneval_task_id": "Java/105", "focal_method_name": "byLength", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> byLength(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.byLength(<FILL_ME>).equals(List.of(\"One\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 422, "humaneval_task_id": "Java/105", "focal_method_name": "byLength", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> byLength(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.byLength(<FILL_ME>).equals(Arrays.asList(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 423, "humaneval_task_id": "Java/105", "focal_method_name": "byLength", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> byLength(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.byLength(<FILL_ME>).equals(Arrays.asList(\"Nine\", \"Eight\", \"Four\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 424, "humaneval_task_id": "Java/105", "focal_method_name": "byLength", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> byLength(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.byLength(<FILL_ME>).equals(Arrays.asList(\"Three\", \"Two\", \"One\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 425, "humaneval_task_id": "Java/105", "focal_method_name": "byLength", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> byLength(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.byLength(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 426, "humaneval_task_id": "Java/106", "focal_method_name": "f", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> ret = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int x = 1;\n                for (int j = 1; j <= i; j++) {\n                    x *= j;\n                }\n                ret.add(x);\n            } else {\n                int x = 0;\n                for (int j = 1; j <= i; j++) {\n                    x += j;\n                }\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.f(<FILL_ME>).equals(Arrays.asList(1, 2, 6)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 427, "humaneval_task_id": "Java/106", "focal_method_name": "f", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> ret = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int x = 1;\n                for (int j = 1; j <= i; j++) {\n                    x *= j;\n                }\n                ret.add(x);\n            } else {\n                int x = 0;\n                for (int j = 1; j <= i; j++) {\n                    x += j;\n                }\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.f(<FILL_ME>).equals(Arrays.asList(1, 2, 6, 24, 15)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 428, "humaneval_task_id": "Java/106", "focal_method_name": "f", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> ret = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int x = 1;\n                for (int j = 1; j <= i; j++) {\n                    x *= j;\n                }\n                ret.add(x);\n            } else {\n                int x = 0;\n                for (int j = 1; j <= i; j++) {\n                    x += j;\n                }\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.f(<FILL_ME>).equals(List.of(<FILL_ME>)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 429, "humaneval_task_id": "Java/106", "focal_method_name": "f", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> ret = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int x = 1;\n                for (int j = 1; j <= i; j++) {\n                    x *= j;\n                }\n                ret.add(x);\n            } else {\n                int x = 0;\n                for (int j = 1; j <= i; j++) {\n                    x += j;\n                }\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.f(<FILL_ME>).equals(Arrays.asList(1, 2, 6, 24, 15, 720, 28)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 430, "humaneval_task_id": "Java/107", "focal_method_name": "evenOddPalindrome", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddPalindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddPalindrome(<FILL_ME>).equals(Arrays.asList(4, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 431, "humaneval_task_id": "Java/107", "focal_method_name": "evenOddPalindrome", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddPalindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddPalindrome(<FILL_ME>).equals(Arrays.asList(1, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 432, "humaneval_task_id": "Java/107", "focal_method_name": "evenOddPalindrome", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddPalindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddPalindrome(<FILL_ME>).equals(Arrays.asList(8, 13)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 433, "humaneval_task_id": "Java/107", "focal_method_name": "evenOddPalindrome", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddPalindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddPalindrome(<FILL_ME>).equals(Arrays.asList(6, 8)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 434, "humaneval_task_id": "Java/107", "focal_method_name": "evenOddPalindrome", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddPalindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddPalindrome(<FILL_ME>).equals(Arrays.asList(0, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 435, "humaneval_task_id": "Java/107", "focal_method_name": "evenOddPalindrome", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddPalindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddPalindrome(<FILL_ME>).equals(Arrays.asList(4, 6)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 436, "humaneval_task_id": "Java/107", "focal_method_name": "evenOddPalindrome", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddPalindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddPalindrome(<FILL_ME>).equals(Arrays.asList(5, 6)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 437, "humaneval_task_id": "Java/108", "focal_method_name": "countNums", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countNums(<FILL_ME>) == 6)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 438, "humaneval_task_id": "Java/108", "focal_method_name": "countNums", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countNums(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 439, "humaneval_task_id": "Java/108", "focal_method_name": "countNums", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countNums(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 440, "humaneval_task_id": "Java/108", "focal_method_name": "countNums", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countNums(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 441, "humaneval_task_id": "Java/108", "focal_method_name": "countNums", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.countNums(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 442, "humaneval_task_id": "Java/109", "focal_method_name": "moveOneBall", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n\n        int min_value = Collections.min(arr);\n        int min_index = arr.indexOf(min_value);\n        List<Integer> my_arr = new ArrayList<>(arr.subList(min_index, arr.size()));\n        my_arr.addAll(arr.subList(0, min_index));\n        for (int i = 0; i < arr.size(); i++) {\n            if (my_arr.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.moveOneBall(<FILL_ME>) == true)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 443, "humaneval_task_id": "Java/109", "focal_method_name": "moveOneBall", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n\n        int min_value = Collections.min(arr);\n        int min_index = arr.indexOf(min_value);\n        List<Integer> my_arr = new ArrayList<>(arr.subList(min_index, arr.size()));\n        my_arr.addAll(arr.subList(0, min_index));\n        for (int i = 0; i < arr.size(); i++) {\n            if (my_arr.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.moveOneBall(<FILL_ME>) == false)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 444, "humaneval_task_id": "Java/110", "focal_method_name": "exchange", "focal_method_para": "(List<Integer> lst1, List<Integer> lst2)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int odd = 0, even = 0;\n        for (int i : lst1) {\n            if (i % 2 == 1) {\n                odd += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                even += 1;\n            }\n        }\n        if (even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.exchange(<FILL_ME>), \"NO\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 445, "humaneval_task_id": "Java/110", "focal_method_name": "exchange", "focal_method_para": "(List<Integer> lst1, List<Integer> lst2)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int odd = 0, even = 0;\n        for (int i : lst1) {\n            if (i % 2 == 1) {\n                odd += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                even += 1;\n            }\n        }\n        if (even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.exchange(<FILL_ME>), \"YES\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 446, "humaneval_task_id": "Java/111", "focal_method_name": "histogram", "focal_method_para": "(String test)", "focal_method_return_type": "Map<String, Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.histogram(<FILL_ME>).equals(map4))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 447, "humaneval_task_id": "Java/111", "focal_method_name": "histogram", "focal_method_para": "(String test)", "focal_method_return_type": "Map<String, Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.histogram(<FILL_ME>).equals(map5))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 448, "humaneval_task_id": "Java/111", "focal_method_name": "histogram", "focal_method_para": "(String test)", "focal_method_return_type": "Map<String, Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.histogram(<FILL_ME>).equals(map3))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 449, "humaneval_task_id": "Java/111", "focal_method_name": "histogram", "focal_method_para": "(String test)", "focal_method_return_type": "Map<String, Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.histogram(<FILL_ME>).equals(map8))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 450, "humaneval_task_id": "Java/111", "focal_method_name": "histogram", "focal_method_para": "(String test)", "focal_method_return_type": "Map<String, Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.histogram(<FILL_ME>).equals(map7))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 451, "humaneval_task_id": "Java/111", "focal_method_name": "histogram", "focal_method_para": "(String test)", "focal_method_return_type": "Map<String, Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.histogram(<FILL_ME>).equals(map1))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 452, "humaneval_task_id": "Java/111", "focal_method_name": "histogram", "focal_method_para": "(String test)", "focal_method_return_type": "Map<String, Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.histogram(<FILL_ME>).equals(map6))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 453, "humaneval_task_id": "Java/111", "focal_method_name": "histogram", "focal_method_para": "(String test)", "focal_method_return_type": "Map<String, Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.histogram(<FILL_ME>).equals(map2))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 454, "humaneval_task_id": "Java/112", "focal_method_name": "reverseDelete", "focal_method_para": "(String s, String c)", "focal_method_return_type": "List<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.reverseDelete(<FILL_ME>).equals(Arrays.asList(\"cdedc\", true)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 455, "humaneval_task_id": "Java/112", "focal_method_name": "reverseDelete", "focal_method_para": "(String s, String c)", "focal_method_return_type": "List<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.reverseDelete(<FILL_ME>).equals(Arrays.asList(\"abba\", true)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 456, "humaneval_task_id": "Java/112", "focal_method_name": "reverseDelete", "focal_method_para": "(String s, String c)", "focal_method_return_type": "List<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.reverseDelete(<FILL_ME>).equals(Arrays.asList(\"dik\", false)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 457, "humaneval_task_id": "Java/112", "focal_method_name": "reverseDelete", "focal_method_para": "(String s, String c)", "focal_method_return_type": "List<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.reverseDelete(<FILL_ME>).equals(Arrays.asList(\"\", true)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 458, "humaneval_task_id": "Java/112", "focal_method_name": "reverseDelete", "focal_method_para": "(String s, String c)", "focal_method_return_type": "List<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.reverseDelete(<FILL_ME>).equals(Arrays.asList(\"acdef\", false)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 459, "humaneval_task_id": "Java/112", "focal_method_name": "reverseDelete", "focal_method_para": "(String s, String c)", "focal_method_return_type": "List<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.reverseDelete(<FILL_ME>).equals(Arrays.asList(\"bcd\", false)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 460, "humaneval_task_id": "Java/112", "focal_method_name": "reverseDelete", "focal_method_para": "(String s, String c)", "focal_method_return_type": "List<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.reverseDelete(<FILL_ME>).equals(Arrays.asList(\"abcdedcba\", true)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 461, "humaneval_task_id": "Java/113", "focal_method_name": "oddCount", "focal_method_para": "(List<String> lst)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.oddCount(<FILL_ME>).equals(List.of(\"the number of odd elements 4n the str4ng 4 of the 4nput.\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 462, "humaneval_task_id": "Java/113", "focal_method_name": "oddCount", "focal_method_para": "(List<String> lst)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(                s.oddCount(<FILL_ME>).equals(Arrays.asList(\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n                        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n                )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 463, "humaneval_task_id": "Java/113", "focal_method_name": "oddCount", "focal_method_para": "(List<String> lst)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.oddCount(<FILL_ME>).equals(Arrays.asList(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 464, "humaneval_task_id": "Java/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minSubArraySum(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 465, "humaneval_task_id": "Java/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minSubArraySum(<FILL_ME>) == -6)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 466, "humaneval_task_id": "Java/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minSubArraySum(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 467, "humaneval_task_id": "Java/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minSubArraySum(<FILL_ME>) == -1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 468, "humaneval_task_id": "Java/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minSubArraySum(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 469, "humaneval_task_id": "Java/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minSubArraySum(<FILL_ME>) == -14)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 470, "humaneval_task_id": "Java/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minSubArraySum(<FILL_ME>) == -33)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 471, "humaneval_task_id": "Java/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minSubArraySum(<FILL_ME>) == -999999999)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 472, "humaneval_task_id": "Java/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minSubArraySum(<FILL_ME>) == 7)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 473, "humaneval_task_id": "Java/114", "focal_method_name": "minSubArraySum", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minSubArraySum(<FILL_ME>) == -10)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 474, "humaneval_task_id": "Java/115", "focal_method_name": "maxFill", "focal_method_para": "(List<List<Integer>> grid, int capacity)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maxFill(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 475, "humaneval_task_id": "Java/115", "focal_method_name": "maxFill", "focal_method_para": "(List<List<Integer>> grid, int capacity)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maxFill(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 476, "humaneval_task_id": "Java/115", "focal_method_name": "maxFill", "focal_method_para": "(List<List<Integer>> grid, int capacity)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maxFill(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 477, "humaneval_task_id": "Java/115", "focal_method_name": "maxFill", "focal_method_para": "(List<List<Integer>> grid, int capacity)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maxFill(<FILL_ME>) == 6)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 478, "humaneval_task_id": "Java/115", "focal_method_name": "maxFill", "focal_method_para": "(List<List<Integer>> grid, int capacity)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maxFill(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 479, "humaneval_task_id": "Java/116", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(Arrays.asList(0, 1, 2, 4, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 480, "humaneval_task_id": "Java/116", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(Arrays.asList(32, 3, 5, 6, 12, 44)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 481, "humaneval_task_id": "Java/116", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(Arrays.asList(2, 4, 8, 16, 32)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 482, "humaneval_task_id": "Java/116", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 483, "humaneval_task_id": "Java/116", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(Arrays.asList(-4, -2, -6, -5, -3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 484, "humaneval_task_id": "Java/116", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(Arrays.asList(1, 2, 4, 3, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 485, "humaneval_task_id": "Java/116", "focal_method_name": "sortArray", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sortArray(<FILL_ME>).equals(Arrays.asList(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 486, "humaneval_task_id": "Java/117", "focal_method_name": "selectWords", "focal_method_para": "(String s, int n)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.selectWords(<FILL_ME>).equals(List.of(\"little\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 487, "humaneval_task_id": "Java/117", "focal_method_name": "selectWords", "focal_method_para": "(String s, int n)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.selectWords(<FILL_ME>).equals(Arrays.asList(\"b\", \"c\", \"d\", \"f\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 488, "humaneval_task_id": "Java/117", "focal_method_name": "selectWords", "focal_method_para": "(String s, int n)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.selectWords(<FILL_ME>).equals(List.of(\"world\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 489, "humaneval_task_id": "Java/117", "focal_method_name": "selectWords", "focal_method_para": "(String s, int n)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.selectWords(<FILL_ME>).equals(Arrays.asList(\"Mary\", \"lamb\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 490, "humaneval_task_id": "Java/117", "focal_method_name": "selectWords", "focal_method_para": "(String s, int n)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.selectWords(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 491, "humaneval_task_id": "Java/117", "focal_method_name": "selectWords", "focal_method_para": "(String s, int n)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.selectWords(<FILL_ME>).equals(List.of(\"Uncle\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 492, "humaneval_task_id": "Java/118", "focal_method_name": "getClosestVowel", "focal_method_para": "(String word)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String getClosestVowel(String word) {\n        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getClosestVowel(<FILL_ME>).equals(\"o\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 493, "humaneval_task_id": "Java/118", "focal_method_name": "getClosestVowel", "focal_method_para": "(String word)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String getClosestVowel(String word) {\n        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getClosestVowel(<FILL_ME>).equals(\"\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 494, "humaneval_task_id": "Java/118", "focal_method_name": "getClosestVowel", "focal_method_para": "(String word)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String getClosestVowel(String word) {\n        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getClosestVowel(<FILL_ME>).equals(\"i\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 495, "humaneval_task_id": "Java/118", "focal_method_name": "getClosestVowel", "focal_method_para": "(String word)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String getClosestVowel(String word) {\n        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getClosestVowel(<FILL_ME>).equals(\"u\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 496, "humaneval_task_id": "Java/118", "focal_method_name": "getClosestVowel", "focal_method_para": "(String word)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String getClosestVowel(String word) {\n        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getClosestVowel(<FILL_ME>).equals(\"a\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 497, "humaneval_task_id": "Java/119", "focal_method_name": "matchParens", "focal_method_para": "(List<String> lst)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String matchParens(List<String> lst) {\n        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.matchParens(<FILL_ME>).equals(\"No\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 498, "humaneval_task_id": "Java/119", "focal_method_name": "matchParens", "focal_method_para": "(List<String> lst)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String matchParens(List<String> lst) {\n        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.matchParens(<FILL_ME>).equals(\"Yes\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 499, "humaneval_task_id": "Java/120", "focal_method_name": "maximum", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maximum(<FILL_ME>).equals(Arrays.asList(4, 4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 500, "humaneval_task_id": "Java/120", "focal_method_name": "maximum", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maximum(<FILL_ME>).equals(Arrays.asList(-4, 4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 501, "humaneval_task_id": "Java/120", "focal_method_name": "maximum", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maximum(<FILL_ME>).equals(Arrays.asList(-10, 10)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 502, "humaneval_task_id": "Java/120", "focal_method_name": "maximum", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maximum(<FILL_ME>).equals(Arrays.asList(2, 20, 123)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 503, "humaneval_task_id": "Java/120", "focal_method_name": "maximum", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maximum(<FILL_ME>).equals(List.of(2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 504, "humaneval_task_id": "Java/120", "focal_method_name": "maximum", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maximum(<FILL_ME>).equals(Arrays.asList(3, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 505, "humaneval_task_id": "Java/120", "focal_method_name": "maximum", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maximum(<FILL_ME>).equals(List.of(5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 506, "humaneval_task_id": "Java/120", "focal_method_name": "maximum", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maximum(<FILL_ME>).equals(Arrays.asList(-4, -3, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 507, "humaneval_task_id": "Java/120", "focal_method_name": "maximum", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maximum(<FILL_ME>).equals(Arrays.asList(0, 1, 2, 20)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 508, "humaneval_task_id": "Java/120", "focal_method_name": "maximum", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.maximum(<FILL_ME>).equals(Arrays.asList(-13, -8, 0, 0, 3, 5, 15)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 509, "humaneval_task_id": "Java/121", "focal_method_name": "solution", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.solution(<FILL_ME>) == 23)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 510, "humaneval_task_id": "Java/121", "focal_method_name": "solution", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.solution(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 511, "humaneval_task_id": "Java/121", "focal_method_name": "solution", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.solution(<FILL_ME>) == 12)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 512, "humaneval_task_id": "Java/121", "focal_method_name": "solution", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.solution(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 513, "humaneval_task_id": "Java/121", "focal_method_name": "solution", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.solution(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 514, "humaneval_task_id": "Java/121", "focal_method_name": "solution", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.solution(<FILL_ME>) == 9)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 515, "humaneval_task_id": "Java/122", "focal_method_name": "addElements", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int addElements(List<Integer> arr, int k) {\n        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.addElements(<FILL_ME>) == -4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 516, "humaneval_task_id": "Java/122", "focal_method_name": "addElements", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int addElements(List<Integer> arr, int k) {\n        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.addElements(<FILL_ME>) == 125)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 517, "humaneval_task_id": "Java/122", "focal_method_name": "addElements", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int addElements(List<Integer> arr, int k) {\n        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.addElements(<FILL_ME>) == 24)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 518, "humaneval_task_id": "Java/122", "focal_method_name": "addElements", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int addElements(List<Integer> arr, int k) {\n        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.addElements(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 519, "humaneval_task_id": "Java/122", "focal_method_name": "addElements", "focal_method_para": "(List<Integer> arr, int k)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int addElements(List<Integer> arr, int k) {\n        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.addElements(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 520, "humaneval_task_id": "Java/123", "focal_method_name": "getOddCollatz", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getOddCollatz(<FILL_ME>).equals(Arrays.asList(1, 3, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 521, "humaneval_task_id": "Java/123", "focal_method_name": "getOddCollatz", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getOddCollatz(<FILL_ME>).equals(Arrays.asList(1, 5, 7, 11, 13, 17)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 522, "humaneval_task_id": "Java/123", "focal_method_name": "getOddCollatz", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getOddCollatz(<FILL_ME>).equals(Arrays.asList(1, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 523, "humaneval_task_id": "Java/123", "focal_method_name": "getOddCollatz", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getOddCollatz(<FILL_ME>).equals(List.of(<FILL_ME>)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 524, "humaneval_task_id": "Java/124", "focal_method_name": "validDate", "focal_method_para": "(String date)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean validDate(String date) {\n        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[0];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[1];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.validDate(<FILL_ME>) == false)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 525, "humaneval_task_id": "Java/124", "focal_method_name": "validDate", "focal_method_para": "(String date)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean validDate(String date) {\n        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[0];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[1];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.validDate(<FILL_ME>) == true)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 526, "humaneval_task_id": "Java/125", "focal_method_name": "splitWords", "focal_method_para": "(String txt)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.splitWords(<FILL_ME>), 2))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 527, "humaneval_task_id": "Java/125", "focal_method_name": "splitWords", "focal_method_para": "(String txt)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.splitWords(<FILL_ME>), 0))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 528, "humaneval_task_id": "Java/125", "focal_method_name": "splitWords", "focal_method_para": "(String txt)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.splitWords(<FILL_ME>), Arrays.asList(\"Hello\", \"world!\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 529, "humaneval_task_id": "Java/125", "focal_method_name": "splitWords", "focal_method_para": "(String txt)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.splitWords(<FILL_ME>), 1))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 530, "humaneval_task_id": "Java/125", "focal_method_name": "splitWords", "focal_method_para": "(String txt)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.splitWords(<FILL_ME>), 3))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 531, "humaneval_task_id": "Java/125", "focal_method_name": "splitWords", "focal_method_para": "(String txt)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.splitWords(<FILL_ME>), Arrays.asList(\"Hello,Hello,world\", \"!\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 532, "humaneval_task_id": "Java/125", "focal_method_name": "splitWords", "focal_method_para": "(String txt)", "focal_method_return_type": "Object", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.splitWords(<FILL_ME>), Arrays.asList(\"Hello\", \"world,!\" )))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 533, "humaneval_task_id": "Java/126", "focal_method_name": "isSorted", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n        List<Integer> sorted_lst = new ArrayList<>(lst);\n        Collections.sort(sorted_lst);\n        if (!lst.equals(sorted_lst)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1) && lst.get(i) == lst.get(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isSorted(<FILL_ME>) == false)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 534, "humaneval_task_id": "Java/126", "focal_method_name": "isSorted", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n        List<Integer> sorted_lst = new ArrayList<>(lst);\n        Collections.sort(sorted_lst);\n        if (!lst.equals(sorted_lst)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1) && lst.get(i) == lst.get(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isSorted(<FILL_ME>) == true)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 535, "humaneval_task_id": "Java/127", "focal_method_name": "intersection", "focal_method_para": "(List<Integer> interval1, List<Integer> interval2)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1) {\n            return \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intersection(<FILL_ME>), \"NO\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 536, "humaneval_task_id": "Java/127", "focal_method_name": "intersection", "focal_method_para": "(List<Integer> interval1, List<Integer> interval2)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1) {\n            return \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intersection(<FILL_ME>), \"YES\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 537, "humaneval_task_id": "Java/128", "focal_method_name": "prodSigns", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "Optional<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.prodSigns(<FILL_ME>).get() == -4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 538, "humaneval_task_id": "Java/128", "focal_method_name": "prodSigns", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "Optional<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.prodSigns(<FILL_ME>).get() == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 539, "humaneval_task_id": "Java/128", "focal_method_name": "prodSigns", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "Optional<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.prodSigns(<FILL_ME>).get() == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 540, "humaneval_task_id": "Java/128", "focal_method_name": "prodSigns", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "Optional<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.prodSigns(<FILL_ME>).get() == 20)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 541, "humaneval_task_id": "Java/128", "focal_method_name": "prodSigns", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "Optional<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.prodSigns(<FILL_ME>).get() == -10)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 542, "humaneval_task_id": "Java/128", "focal_method_name": "prodSigns", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "Optional<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.prodSigns(<FILL_ME>).isEmpty())) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 543, "humaneval_task_id": "Java/128", "focal_method_name": "prodSigns", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "Optional<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.prodSigns(<FILL_ME>).get() == -9)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 544, "humaneval_task_id": "Java/129", "focal_method_name": "minPath", "focal_method_para": "(List<List<Integer>> grid, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minPath(<FILL_ME>).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 545, "humaneval_task_id": "Java/129", "focal_method_name": "minPath", "focal_method_para": "(List<List<Integer>> grid, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minPath(<FILL_ME>).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 546, "humaneval_task_id": "Java/129", "focal_method_name": "minPath", "focal_method_para": "(List<List<Integer>> grid, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minPath(<FILL_ME>).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 547, "humaneval_task_id": "Java/129", "focal_method_name": "minPath", "focal_method_para": "(List<List<Integer>> grid, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minPath(<FILL_ME>).equals(Arrays.asList(1, 2, 1, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 548, "humaneval_task_id": "Java/129", "focal_method_name": "minPath", "focal_method_para": "(List<List<Integer>> grid, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minPath(<FILL_ME>).equals(Arrays.asList(1, 5, 1, 5, 1, 5, 1, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 549, "humaneval_task_id": "Java/129", "focal_method_name": "minPath", "focal_method_para": "(List<List<Integer>> grid, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minPath(<FILL_ME>).equals(Arrays.asList(1, 10, 1, 10, 1, 10, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 550, "humaneval_task_id": "Java/129", "focal_method_name": "minPath", "focal_method_para": "(List<List<Integer>> grid, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minPath(<FILL_ME>).equals(Arrays.asList(1, 2, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 551, "humaneval_task_id": "Java/129", "focal_method_name": "minPath", "focal_method_para": "(List<List<Integer>> grid, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minPath(<FILL_ME>).equals(List.of(1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 552, "humaneval_task_id": "Java/129", "focal_method_name": "minPath", "focal_method_para": "(List<List<Integer>> grid, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minPath(<FILL_ME>).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3, 1, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 553, "humaneval_task_id": "Java/129", "focal_method_name": "minPath", "focal_method_para": "(List<List<Integer>> grid, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minPath(<FILL_ME>).equals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 554, "humaneval_task_id": "Java/129", "focal_method_name": "minPath", "focal_method_para": "(List<List<Integer>> grid, int k)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.minPath(<FILL_ME>).equals(Arrays.asList(1, 7, 1, 7, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 555, "humaneval_task_id": "Java/130", "focal_method_name": "tri", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.tri(<FILL_ME>).equals(List.of(1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 556, "humaneval_task_id": "Java/130", "focal_method_name": "tri", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.tri(<FILL_ME>).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 557, "humaneval_task_id": "Java/130", "focal_method_name": "tri", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.tri(<FILL_ME>).equals(Arrays.asList(1, 3, 2, 8)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 558, "humaneval_task_id": "Java/130", "focal_method_name": "tri", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.tri(<FILL_ME>).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 559, "humaneval_task_id": "Java/130", "focal_method_name": "tri", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.tri(<FILL_ME>).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 560, "humaneval_task_id": "Java/130", "focal_method_name": "tri", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.tri(<FILL_ME>).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 561, "humaneval_task_id": "Java/130", "focal_method_name": "tri", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.tri(<FILL_ME>).equals(Arrays.asList(1, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 562, "humaneval_task_id": "Java/130", "focal_method_name": "tri", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.tri(<FILL_ME>).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 563, "humaneval_task_id": "Java/130", "focal_method_name": "tri", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.tri(<FILL_ME>).equals(Arrays.asList(1, 3, 2, 8, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 564, "humaneval_task_id": "Java/130", "focal_method_name": "tri", "focal_method_para": "(int n)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.tri(<FILL_ME>).equals(Arrays.asList(1, 3, 2, 8, 3, 15)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 565, "humaneval_task_id": "Java/131", "focal_method_name": "digits", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.digits(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 566, "humaneval_task_id": "Java/131", "focal_method_name": "digits", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.digits(<FILL_ME>) == 2625)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 567, "humaneval_task_id": "Java/131", "focal_method_name": "digits", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.digits(<FILL_ME>) == 315)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 568, "humaneval_task_id": "Java/131", "focal_method_name": "digits", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.digits(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 569, "humaneval_task_id": "Java/132", "focal_method_name": "isNested", "focal_method_para": "(String string)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isNested(String string) {\n        List<Integer> opening_bracket_index = new ArrayList<>(), closing_bracket_index = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int i = 0, l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isNested(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 570, "humaneval_task_id": "Java/132", "focal_method_name": "isNested", "focal_method_para": "(String string)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isNested(String string) {\n        List<Integer> opening_bracket_index = new ArrayList<>(), closing_bracket_index = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int i = 0, l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(!s.isNested(<FILL_ME>))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 571, "humaneval_task_id": "Java/133", "focal_method_name": "sumSquares", "focal_method_para": "(List<Double> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 10230)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 572, "humaneval_task_id": "Java/133", "focal_method_name": "sumSquares", "focal_method_para": "(List<Double> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 14)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 573, "humaneval_task_id": "Java/133", "focal_method_name": "sumSquares", "focal_method_para": "(List<Double> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 200000000)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 574, "humaneval_task_id": "Java/133", "focal_method_name": "sumSquares", "focal_method_para": "(List<Double> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 575, "humaneval_task_id": "Java/133", "focal_method_name": "sumSquares", "focal_method_para": "(List<Double> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 576, "humaneval_task_id": "Java/133", "focal_method_name": "sumSquares", "focal_method_para": "(List<Double> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 6)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 577, "humaneval_task_id": "Java/133", "focal_method_name": "sumSquares", "focal_method_para": "(List<Double> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 1086)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 578, "humaneval_task_id": "Java/133", "focal_method_name": "sumSquares", "focal_method_para": "(List<Double> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 84)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 579, "humaneval_task_id": "Java/133", "focal_method_name": "sumSquares", "focal_method_para": "(List<Double> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 75)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 580, "humaneval_task_id": "Java/133", "focal_method_name": "sumSquares", "focal_method_para": "(List<Double> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 581, "humaneval_task_id": "Java/133", "focal_method_name": "sumSquares", "focal_method_para": "(List<Double> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 29)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 582, "humaneval_task_id": "Java/134", "focal_method_name": "checkIfLastCharIsALetter", "focal_method_para": "(String txt)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkIfLastCharIsALetter(String txt) {\n        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 && Character.isLetter(check.charAt(0));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.checkIfLastCharIsALetter(<FILL_ME>) == false)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 583, "humaneval_task_id": "Java/134", "focal_method_name": "checkIfLastCharIsALetter", "focal_method_para": "(String txt)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkIfLastCharIsALetter(String txt) {\n        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 && Character.isLetter(check.charAt(0));\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.checkIfLastCharIsALetter(<FILL_ME>) == true)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 584, "humaneval_task_id": "Java/135", "focal_method_name": "canArrange", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int canArrange(List<Integer> arr) {\n        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.canArrange(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 585, "humaneval_task_id": "Java/135", "focal_method_name": "canArrange", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int canArrange(List<Integer> arr) {\n        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.canArrange(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 586, "humaneval_task_id": "Java/135", "focal_method_name": "canArrange", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int canArrange(List<Integer> arr) {\n        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.canArrange(<FILL_ME>) == -1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 587, "humaneval_task_id": "Java/135", "focal_method_name": "canArrange", "focal_method_para": "(List<Integer> arr)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int canArrange(List<Integer> arr) {\n        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.canArrange(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 588, "humaneval_task_id": "Java/136", "focal_method_name": "largestSmallestIntegers", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Optional<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestSmallestIntegers(<FILL_ME>).equals(Arrays.asList(Optional.of(-7), Optional.of(2))))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 589, "humaneval_task_id": "Java/136", "focal_method_name": "largestSmallestIntegers", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Optional<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestSmallestIntegers(<FILL_ME>).equals(Arrays.asList(Optional.of(-1), Optional.empty())))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 590, "humaneval_task_id": "Java/136", "focal_method_name": "largestSmallestIntegers", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Optional<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestSmallestIntegers(<FILL_ME>).equals(Arrays.asList(Optional.of(-3), Optional.of(1))))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 591, "humaneval_task_id": "Java/136", "focal_method_name": "largestSmallestIntegers", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Optional<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestSmallestIntegers(<FILL_ME>).equals(Arrays.asList(Optional.empty(), Optional.of(1))))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 592, "humaneval_task_id": "Java/136", "focal_method_name": "largestSmallestIntegers", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Optional<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestSmallestIntegers(<FILL_ME>).equals(Arrays.asList(Optional.of(-2), Optional.of(1))))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 593, "humaneval_task_id": "Java/136", "focal_method_name": "largestSmallestIntegers", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Optional<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestSmallestIntegers(<FILL_ME>).equals(Arrays.asList(Optional.of(-9), Optional.of(2))))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 594, "humaneval_task_id": "Java/136", "focal_method_name": "largestSmallestIntegers", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "List<Optional<Integer>>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.largestSmallestIntegers(<FILL_ME>).equals(Arrays.asList(Optional.empty(), Optional.empty())))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 595, "humaneval_task_id": "Java/137", "focal_method_name": "compareOne", "focal_method_para": "(Object a, Object b)", "focal_method_return_type": "Optional<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!((int) s.compareOne(<FILL_ME>).get() == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 596, "humaneval_task_id": "Java/137", "focal_method_name": "compareOne", "focal_method_para": "(Object a, Object b)", "focal_method_return_type": "Optional<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!((String) s.compareOne(<FILL_ME>).get() == \"2\")) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 597, "humaneval_task_id": "Java/137", "focal_method_name": "compareOne", "focal_method_para": "(Object a, Object b)", "focal_method_return_type": "Optional<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!((int) s.compareOne(<FILL_ME>).get() == 6)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 598, "humaneval_task_id": "Java/137", "focal_method_name": "compareOne", "focal_method_para": "(Object a, Object b)", "focal_method_return_type": "Optional<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!((double) s.compareOne(<FILL_ME>).get() == 2.5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 599, "humaneval_task_id": "Java/137", "focal_method_name": "compareOne", "focal_method_para": "(Object a, Object b)", "focal_method_return_type": "Optional<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!((String) s.compareOne(<FILL_ME>).get() == \"6\")) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 600, "humaneval_task_id": "Java/137", "focal_method_name": "compareOne", "focal_method_para": "(Object a, Object b)", "focal_method_return_type": "Optional<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!((int) s.compareOne(<FILL_ME>).get() == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 601, "humaneval_task_id": "Java/137", "focal_method_name": "compareOne", "focal_method_para": "(Object a, Object b)", "focal_method_return_type": "Optional<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.compareOne(<FILL_ME>).isEmpty())) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 602, "humaneval_task_id": "Java/137", "focal_method_name": "compareOne", "focal_method_para": "(Object a, Object b)", "focal_method_return_type": "Optional<Object>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!((String) s.compareOne(<FILL_ME>).get() == \"2,3\")) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 603, "humaneval_task_id": "Java/138", "focal_method_name": "isEqualToSumEven", "focal_method_para": "(int n)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isEqualToSumEven(<FILL_ME>) == false)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 604, "humaneval_task_id": "Java/138", "focal_method_name": "isEqualToSumEven", "focal_method_para": "(int n)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.isEqualToSumEven(<FILL_ME>) == true)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 605, "humaneval_task_id": "Java/139", "focal_method_name": "specialFactorial", "focal_method_para": "(int n)", "focal_method_return_type": "long", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long specialFactorial(int n) {\n        long fact_i = 1, special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.specialFactorial(<FILL_ME>) == 34560)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 606, "humaneval_task_id": "Java/139", "focal_method_name": "specialFactorial", "focal_method_para": "(int n)", "focal_method_return_type": "long", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long specialFactorial(int n) {\n        long fact_i = 1, special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.specialFactorial(<FILL_ME>) == 125411328000L)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 607, "humaneval_task_id": "Java/139", "focal_method_name": "specialFactorial", "focal_method_para": "(int n)", "focal_method_return_type": "long", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long specialFactorial(int n) {\n        long fact_i = 1, special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.specialFactorial(<FILL_ME>) == 288)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 608, "humaneval_task_id": "Java/139", "focal_method_name": "specialFactorial", "focal_method_para": "(int n)", "focal_method_return_type": "long", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long specialFactorial(int n) {\n        long fact_i = 1, special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.specialFactorial(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 609, "humaneval_task_id": "Java/140", "focal_method_name": "fixSpaces", "focal_method_para": "(String text)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.fixSpaces(<FILL_ME>), \"Exa-mple\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 610, "humaneval_task_id": "Java/140", "focal_method_name": "fixSpaces", "focal_method_para": "(String text)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.fixSpaces(<FILL_ME>), \"Yellow_Yellow__Dirty__Fellow\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 611, "humaneval_task_id": "Java/140", "focal_method_name": "fixSpaces", "focal_method_para": "(String text)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.fixSpaces(<FILL_ME>), \"Mudasir_Hanif_\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 612, "humaneval_task_id": "Java/140", "focal_method_name": "fixSpaces", "focal_method_para": "(String text)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.fixSpaces(<FILL_ME>), \"-Exa_1_2_2_mple\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 613, "humaneval_task_id": "Java/140", "focal_method_name": "fixSpaces", "focal_method_para": "(String text)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.fixSpaces(<FILL_ME>), \"Example\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 614, "humaneval_task_id": "Java/141", "focal_method_name": "filenameCheck", "focal_method_para": "(String file_name)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String filenameCheck(String file_name) {\n        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = file_name.split(\"\\\\.\" );\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.filenameCheck(<FILL_ME>), \"No\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 615, "humaneval_task_id": "Java/141", "focal_method_name": "filenameCheck", "focal_method_para": "(String file_name)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String filenameCheck(String file_name) {\n        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = file_name.split(\"\\\\.\" );\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.filenameCheck(<FILL_ME>), \"Yes\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 616, "humaneval_task_id": "Java/142", "focal_method_name": "sumSquares", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == -126)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 617, "humaneval_task_id": "Java/142", "focal_method_name": "sumSquares", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 6)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 618, "humaneval_task_id": "Java/142", "focal_method_name": "sumSquares", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == -14196)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 619, "humaneval_task_id": "Java/142", "focal_method_name": "sumSquares", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 620, "humaneval_task_id": "Java/142", "focal_method_name": "sumSquares", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 9)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 621, "humaneval_task_id": "Java/142", "focal_method_name": "sumSquares", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 14)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 622, "humaneval_task_id": "Java/142", "focal_method_name": "sumSquares", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == 3030)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 623, "humaneval_task_id": "Java/142", "focal_method_name": "sumSquares", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == -1448)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 624, "humaneval_task_id": "Java/142", "focal_method_name": "sumSquares", "focal_method_para": "(List<Integer> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.sumSquares(<FILL_ME>) == -3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 625, "humaneval_task_id": "Java/143", "focal_method_name": "wordsInSentence", "focal_method_para": "(String sentence)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String wordsInSentence(String sentence) {\n        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.wordsInSentence(<FILL_ME>), \"go for it\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 626, "humaneval_task_id": "Java/143", "focal_method_name": "wordsInSentence", "focal_method_para": "(String sentence)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String wordsInSentence(String sentence) {\n        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.wordsInSentence(<FILL_ME>), \"go for\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 627, "humaneval_task_id": "Java/143", "focal_method_name": "wordsInSentence", "focal_method_para": "(String sentence)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String wordsInSentence(String sentence) {\n        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.wordsInSentence(<FILL_ME>), \"is\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 628, "humaneval_task_id": "Java/143", "focal_method_name": "wordsInSentence", "focal_method_para": "(String sentence)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String wordsInSentence(String sentence) {\n        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.wordsInSentence(<FILL_ME>), \"\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 629, "humaneval_task_id": "Java/143", "focal_method_name": "wordsInSentence", "focal_method_para": "(String sentence)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String wordsInSentence(String sentence) {\n        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.wordsInSentence(<FILL_ME>), \"there is no place\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 630, "humaneval_task_id": "Java/143", "focal_method_name": "wordsInSentence", "focal_method_para": "(String sentence)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String wordsInSentence(String sentence) {\n        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.wordsInSentence(<FILL_ME>), \"Hi am Hussein\" ))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 631, "humaneval_task_id": "Java/144", "focal_method_name": "simplify", "focal_method_para": "(String x, String n)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        return numerator / denom * denom == numerator;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.simplify(<FILL_ME>) == true)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 632, "humaneval_task_id": "Java/144", "focal_method_name": "simplify", "focal_method_para": "(String x, String n)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        return numerator / denom * denom == numerator;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.simplify(<FILL_ME>) == false)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 633, "humaneval_task_id": "Java/145", "focal_method_name": "orderByPoints", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.orderByPoints(<FILL_ME>).equals(Arrays.asList(-1, -11, 1, -12, 11)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 634, "humaneval_task_id": "Java/145", "focal_method_name": "orderByPoints", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.orderByPoints(<FILL_ME>).equals(Arrays.asList(-76, -21, 0, 4, 23, 6, 6)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 635, "humaneval_task_id": "Java/145", "focal_method_name": "orderByPoints", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.orderByPoints(<FILL_ME>).equals(Arrays.asList(-3, -32, -98, -11, 1, 2, 43, 54)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 636, "humaneval_task_id": "Java/145", "focal_method_name": "orderByPoints", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.orderByPoints(<FILL_ME>).equals(Arrays.asList(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 637, "humaneval_task_id": "Java/145", "focal_method_name": "orderByPoints", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.orderByPoints(<FILL_ME>).equals(Arrays.asList(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 638, "humaneval_task_id": "Java/145", "focal_method_name": "orderByPoints", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.orderByPoints(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 639, "humaneval_task_id": "Java/146", "focal_method_name": "specialFilter", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.specialFilter(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 640, "humaneval_task_id": "Java/146", "focal_method_name": "specialFilter", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.specialFilter(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 641, "humaneval_task_id": "Java/146", "focal_method_name": "specialFilter", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.specialFilter(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 642, "humaneval_task_id": "Java/146", "focal_method_name": "specialFilter", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.specialFilter(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 643, "humaneval_task_id": "Java/146", "focal_method_name": "specialFilter", "focal_method_para": "(List<Integer> nums)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.specialFilter(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 644, "humaneval_task_id": "Java/147", "focal_method_name": "getMaxTriples", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int getMaxTriples(int n) {\n        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getMaxTriples(<FILL_ME>) == 4)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 645, "humaneval_task_id": "Java/147", "focal_method_name": "getMaxTriples", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int getMaxTriples(int n) {\n        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getMaxTriples(<FILL_ME>) == 1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 646, "humaneval_task_id": "Java/147", "focal_method_name": "getMaxTriples", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int getMaxTriples(int n) {\n        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getMaxTriples(<FILL_ME>) == 53361)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 647, "humaneval_task_id": "Java/147", "focal_method_name": "getMaxTriples", "focal_method_para": "(int n)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int getMaxTriples(int n) {\n        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.getMaxTriples(<FILL_ME>) == 36)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 648, "humaneval_task_id": "Java/148", "focal_method_name": "bf", "focal_method_para": "(String planet1, String planet2)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.bf(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 649, "humaneval_task_id": "Java/148", "focal_method_name": "bf", "focal_method_para": "(String planet1, String planet2)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.bf(<FILL_ME>).equals(List.of(\"Venus\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 650, "humaneval_task_id": "Java/148", "focal_method_name": "bf", "focal_method_para": "(String planet1, String planet2)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.bf(<FILL_ME>).equals(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 651, "humaneval_task_id": "Java/148", "focal_method_name": "bf", "focal_method_para": "(String planet1, String planet2)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.bf(<FILL_ME>).equals(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 652, "humaneval_task_id": "Java/148", "focal_method_name": "bf", "focal_method_para": "(String planet1, String planet2)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.bf(<FILL_ME>).equals(Arrays.asList(\"Saturn\", \"Uranus\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 653, "humaneval_task_id": "Java/149", "focal_method_name": "listSort", "focal_method_para": "(List<String> lst)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> listSort(List<String> lst) {\n        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.listSort(<FILL_ME>).equals(Arrays.asList(\"AI\", \"asdf\", \"school\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 654, "humaneval_task_id": "Java/149", "focal_method_name": "listSort", "focal_method_para": "(List<String> lst)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> listSort(List<String> lst) {\n        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.listSort(<FILL_ME>).equals(Arrays.asList(\"abcd\", \"dcba\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 655, "humaneval_task_id": "Java/149", "focal_method_name": "listSort", "focal_method_para": "(List<String> lst)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> listSort(List<String> lst) {\n        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.listSort(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 656, "humaneval_task_id": "Java/149", "focal_method_name": "listSort", "focal_method_para": "(List<String> lst)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> listSort(List<String> lst) {\n        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.listSort(<FILL_ME>).equals(Arrays.asList(\"AI\", \"ai\", \"au\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 657, "humaneval_task_id": "Java/149", "focal_method_name": "listSort", "focal_method_para": "(List<String> lst)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> listSort(List<String> lst) {\n        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.listSort(<FILL_ME>).equals(Arrays.asList(\"cc\", \"dd\", \"aaaa\", \"bbbb\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 658, "humaneval_task_id": "Java/149", "focal_method_name": "listSort", "focal_method_para": "(List<String> lst)", "focal_method_return_type": "List<String>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> listSort(List<String> lst) {\n        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.listSort(<FILL_ME>).equals(List.of(\"aa\")))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 659, "humaneval_task_id": "Java/150", "focal_method_name": "xOrY", "focal_method_para": "(int n, int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.xOrY(<FILL_ME>) == 34)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 660, "humaneval_task_id": "Java/150", "focal_method_name": "xOrY", "focal_method_para": "(int n, int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.xOrY(<FILL_ME>) == 33)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 661, "humaneval_task_id": "Java/150", "focal_method_name": "xOrY", "focal_method_para": "(int n, int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.xOrY(<FILL_ME>) == 5)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 662, "humaneval_task_id": "Java/150", "focal_method_name": "xOrY", "focal_method_para": "(int n, int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.xOrY(<FILL_ME>) == -1)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 663, "humaneval_task_id": "Java/150", "focal_method_name": "xOrY", "focal_method_para": "(int n, int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.xOrY(<FILL_ME>) == 583)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 664, "humaneval_task_id": "Java/150", "focal_method_name": "xOrY", "focal_method_para": "(int n, int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.xOrY(<FILL_ME>) == 129)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 665, "humaneval_task_id": "Java/150", "focal_method_name": "xOrY", "focal_method_para": "(int n, int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.xOrY(<FILL_ME>) == 2)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 666, "humaneval_task_id": "Java/150", "focal_method_name": "xOrY", "focal_method_para": "(int n, int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.xOrY(<FILL_ME>) == 3)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 667, "humaneval_task_id": "Java/150", "focal_method_name": "xOrY", "focal_method_para": "(int n, int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.xOrY(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 668, "humaneval_task_id": "Java/150", "focal_method_name": "xOrY", "focal_method_para": "(int n, int x, int y)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.xOrY(<FILL_ME>) == 1234)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 669, "humaneval_task_id": "Java/151", "focal_method_name": "doubleTheDifference", "focal_method_para": "(List<Object> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doubleTheDifference(List<Object> lst) {\n        return lst.stream().filter(i -> i instanceof Integer p && p > 0 && p % 2 != 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.doubleTheDifference(<FILL_ME>) == 25)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 670, "humaneval_task_id": "Java/151", "focal_method_name": "doubleTheDifference", "focal_method_para": "(List<Object> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doubleTheDifference(List<Object> lst) {\n        return lst.stream().filter(i -> i instanceof Integer p && p > 0 && p % 2 != 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.doubleTheDifference(<FILL_ME>) == 0)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 671, "humaneval_task_id": "Java/151", "focal_method_name": "doubleTheDifference", "focal_method_para": "(List<Object> lst)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doubleTheDifference(List<Object> lst) {\n        return lst.stream().filter(i -> i instanceof Integer p && p > 0 && p % 2 != 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.doubleTheDifference(<FILL_ME>) == 34)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 672, "humaneval_task_id": "Java/152", "focal_method_name": "compare", "focal_method_para": "(List<Integer> game, List<Integer> guess)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.compare(<FILL_ME>).equals(Arrays.asList(0, 0, 0, 0, 3, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 673, "humaneval_task_id": "Java/152", "focal_method_name": "compare", "focal_method_para": "(List<Integer> game, List<Integer> guess)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.compare(<FILL_ME>).equals(Arrays.asList(2, 4, 6)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 674, "humaneval_task_id": "Java/152", "focal_method_name": "compare", "focal_method_para": "(List<Integer> game, List<Integer> guess)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.compare(<FILL_ME>).equals(Arrays.asList(4,4,1,0,0,6)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 675, "humaneval_task_id": "Java/152", "focal_method_name": "compare", "focal_method_para": "(List<Integer> game, List<Integer> guess)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.compare(<FILL_ME>).equals(Arrays.asList(0, 0, 0, 0, 0, 0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 676, "humaneval_task_id": "Java/152", "focal_method_name": "compare", "focal_method_para": "(List<Integer> game, List<Integer> guess)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.compare(<FILL_ME>).equals(Arrays.asList(2, 0, 0, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 677, "humaneval_task_id": "Java/153", "focal_method_name": "StrongestExtension", "focal_method_para": "(String class_name, List<String> extensions)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.StrongestExtension(<FILL_ME>), \"finNNalLLly.WoW\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 678, "humaneval_task_id": "Java/153", "focal_method_name": "StrongestExtension", "focal_method_para": "(String class_name, List<String> extensions)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.StrongestExtension(<FILL_ME>), \"K.TAR\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 679, "humaneval_task_id": "Java/153", "focal_method_name": "StrongestExtension", "focal_method_para": "(String class_name, List<String> extensions)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.StrongestExtension(<FILL_ME>), \"Watashi.eIGHt8OKe\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 680, "humaneval_task_id": "Java/153", "focal_method_name": "StrongestExtension", "focal_method_para": "(String class_name, List<String> extensions)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.StrongestExtension(<FILL_ME>), \"YameRore.okIWILL123\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 681, "humaneval_task_id": "Java/153", "focal_method_name": "StrongestExtension", "focal_method_para": "(String class_name, List<String> extensions)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.StrongestExtension(<FILL_ME>), \"Sp.671235\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 682, "humaneval_task_id": "Java/153", "focal_method_name": "StrongestExtension", "focal_method_para": "(String class_name, List<String> extensions)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.StrongestExtension(<FILL_ME>), \"_.Bb\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 683, "humaneval_task_id": "Java/153", "focal_method_name": "StrongestExtension", "focal_method_para": "(String class_name, List<String> extensions)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.StrongestExtension(<FILL_ME>), \"__YESIMHERE.NuLl__\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 684, "humaneval_task_id": "Java/153", "focal_method_name": "StrongestExtension", "focal_method_para": "(String class_name, List<String> extensions)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.StrongestExtension(<FILL_ME>), \"__HAHA.123\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 685, "humaneval_task_id": "Java/153", "focal_method_name": "StrongestExtension", "focal_method_para": "(String class_name, List<String> extensions)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.StrongestExtension(<FILL_ME>), \"Boku123.YEs.WeCaNe\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 686, "humaneval_task_id": "Java/154", "focal_method_name": "cycpatternCheck", "focal_method_para": "(String a, String b)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpatternCheck(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.cycpatternCheck(<FILL_ME>) == false)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 687, "humaneval_task_id": "Java/154", "focal_method_name": "cycpatternCheck", "focal_method_para": "(String a, String b)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpatternCheck(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.cycpatternCheck(<FILL_ME>) == true)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 688, "humaneval_task_id": "Java/155", "focal_method_name": "evenOddCount", "focal_method_para": "(int num)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddCount(int num) {\n        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddCount(<FILL_ME>).equals(Arrays.asList(1, 0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 689, "humaneval_task_id": "Java/155", "focal_method_name": "evenOddCount", "focal_method_para": "(int num)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddCount(int num) {\n        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddCount(<FILL_ME>).equals(Arrays.asList(3, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 690, "humaneval_task_id": "Java/155", "focal_method_name": "evenOddCount", "focal_method_para": "(int num)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddCount(int num) {\n        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddCount(<FILL_ME>).equals(Arrays.asList(1, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 691, "humaneval_task_id": "Java/155", "focal_method_name": "evenOddCount", "focal_method_para": "(int num)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddCount(int num) {\n        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddCount(<FILL_ME>).equals(Arrays.asList(0, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 692, "humaneval_task_id": "Java/155", "focal_method_name": "evenOddCount", "focal_method_para": "(int num)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddCount(int num) {\n        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddCount(<FILL_ME>).equals(Arrays.asList(2, 3)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 693, "humaneval_task_id": "Java/155", "focal_method_name": "evenOddCount", "focal_method_para": "(int num)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddCount(int num) {\n        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.evenOddCount(<FILL_ME>).equals(Arrays.asList(2, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 694, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"i\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 695, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"cm\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 696, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"xix\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 697, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"xciv\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 698, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"ccli\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 699, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"m\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 700, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"d\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 701, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"cmxciv\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 702, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"cdxxvi\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 703, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"iv\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 704, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"xliii\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 705, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"clii\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 706, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"xc\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 707, "humaneval_task_id": "Java/156", "focal_method_name": "intToMiniRoman", "focal_method_para": "(int number)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.intToMiniRoman(<FILL_ME>), \"dxxxii\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 708, "humaneval_task_id": "Java/157", "focal_method_name": "rightAngleTriangle", "focal_method_para": "(int a, int b, int c)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.rightAngleTriangle(<FILL_ME>) == true)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 709, "humaneval_task_id": "Java/157", "focal_method_name": "rightAngleTriangle", "focal_method_para": "(int a, int b, int c)", "focal_method_return_type": "boolean", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.rightAngleTriangle(<FILL_ME>) == false)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 710, "humaneval_task_id": "Java/158", "focal_method_name": "findMax", "focal_method_para": "(List<String> words)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findMax(<FILL_ME>).equals(\"gonna\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 711, "humaneval_task_id": "Java/158", "focal_method_name": "findMax", "focal_method_para": "(List<String> words)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findMax(<FILL_ME>).equals(\"play\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 712, "humaneval_task_id": "Java/158", "focal_method_name": "findMax", "focal_method_para": "(List<String> words)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findMax(<FILL_ME>).equals(\"string\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 713, "humaneval_task_id": "Java/158", "focal_method_name": "findMax", "focal_method_para": "(List<String> words)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findMax(<FILL_ME>).equals(\"nation\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 714, "humaneval_task_id": "Java/158", "focal_method_name": "findMax", "focal_method_para": "(List<String> words)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findMax(<FILL_ME>).equals(\"b\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 715, "humaneval_task_id": "Java/158", "focal_method_name": "findMax", "focal_method_para": "(List<String> words)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findMax(<FILL_ME>).equals(\"aaaaaaa\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 716, "humaneval_task_id": "Java/158", "focal_method_name": "findMax", "focal_method_para": "(List<String> words)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findMax(<FILL_ME>).equals(\"abc\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 717, "humaneval_task_id": "Java/158", "focal_method_name": "findMax", "focal_method_para": "(List<String> words)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findMax(<FILL_ME>).equals(\"footbott\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 718, "humaneval_task_id": "Java/158", "focal_method_name": "findMax", "focal_method_para": "(List<String> words)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findMax(<FILL_ME>).equals(\"enam\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 719, "humaneval_task_id": "Java/158", "focal_method_name": "findMax", "focal_method_para": "(List<String> words)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.findMax(<FILL_ME>).equals(\"this\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 720, "humaneval_task_id": "Java/159", "focal_method_name": "eat", "focal_method_para": "(int number, int need, int remaining)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.eat(<FILL_ME>).equals(Arrays.asList(9, 2)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 721, "humaneval_task_id": "Java/159", "focal_method_name": "eat", "focal_method_para": "(int number, int need, int remaining)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.eat(<FILL_ME>).equals(Arrays.asList(12, 1)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 722, "humaneval_task_id": "Java/159", "focal_method_name": "eat", "focal_method_para": "(int number, int need, int remaining)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.eat(<FILL_ME>).equals(Arrays.asList(5, 0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 723, "humaneval_task_id": "Java/159", "focal_method_name": "eat", "focal_method_para": "(int number, int need, int remaining)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.eat(<FILL_ME>).equals(Arrays.asList(7, 0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 724, "humaneval_task_id": "Java/159", "focal_method_name": "eat", "focal_method_para": "(int number, int need, int remaining)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.eat(<FILL_ME>).equals(Arrays.asList(11, 0)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 725, "humaneval_task_id": "Java/159", "focal_method_name": "eat", "focal_method_para": "(int number, int need, int remaining)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.eat(<FILL_ME>).equals(Arrays.asList(11, 4)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 726, "humaneval_task_id": "Java/160", "focal_method_name": "doAlgebra", "focal_method_para": "(List<String> operator, List<Integer> operand)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.doAlgebra(<FILL_ME>) == 8)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 727, "humaneval_task_id": "Java/160", "focal_method_name": "doAlgebra", "focal_method_para": "(List<String> operator, List<Integer> operand)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.doAlgebra(<FILL_ME>) == 37)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 728, "humaneval_task_id": "Java/160", "focal_method_name": "doAlgebra", "focal_method_para": "(List<String> operator, List<Integer> operand)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.doAlgebra(<FILL_ME>) == 9)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 729, "humaneval_task_id": "Java/160", "focal_method_name": "doAlgebra", "focal_method_para": "(List<String> operator, List<Integer> operand)", "focal_method_return_type": "int", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.doAlgebra(<FILL_ME>) == 1953132)) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 730, "humaneval_task_id": "Java/161", "focal_method_name": "solve", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"4321\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 731, "humaneval_task_id": "Java/161", "focal_method_name": "solve", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"aSdF\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 732, "humaneval_task_id": "Java/161", "focal_method_name": "solve", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"#aSDFw^45\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 733, "humaneval_task_id": "Java/161", "focal_method_name": "solve", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"AB\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 734, "humaneval_task_id": "Java/161", "focal_method_name": "solve", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"#CCC\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 735, "humaneval_task_id": "Java/161", "focal_method_name": "solve", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"2@6#\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 736, "humaneval_task_id": "Java/161", "focal_method_name": "solve", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"#A@c\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 737, "humaneval_task_id": "Java/161", "focal_method_name": "solve", "focal_method_para": "(String s)", "focal_method_return_type": "String", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(Objects.equals(s.solve(<FILL_ME>), \"#$A^d\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 738, "humaneval_task_id": "Java/162", "focal_method_name": "stringToMd5", "focal_method_para": "(String text)", "focal_method_return_type": "Optional<String>", "focal_method": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(32 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.stringToMd5(<FILL_ME>).get().equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 739, "humaneval_task_id": "Java/162", "focal_method_name": "stringToMd5", "focal_method_para": "(String text)", "focal_method_return_type": "Optional<String>", "focal_method": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(32 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.stringToMd5(<FILL_ME>).isEmpty())) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 740, "humaneval_task_id": "Java/162", "focal_method_name": "stringToMd5", "focal_method_para": "(String text)", "focal_method_return_type": "Optional<String>", "focal_method": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(32 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.stringToMd5(<FILL_ME>).get().equals(\"0ef78513b0cb8cef12743f5aeb35f888\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 741, "humaneval_task_id": "Java/162", "focal_method_name": "stringToMd5", "focal_method_para": "(String text)", "focal_method_return_type": "Optional<String>", "focal_method": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(32 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.stringToMd5(<FILL_ME>).get().equals(\"3e25960a79dbc69b674cd4ec67a72c62\"))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 742, "humaneval_task_id": "Java/163", "focal_method_name": "generateIntegers", "focal_method_para": "(int a, int b)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.generateIntegers(<FILL_ME>).equals(Arrays.asList(2, 4, 6, 8)))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
{"index": 743, "humaneval_task_id": "Java/163", "focal_method_name": "generateIntegers", "focal_method_para": "(int a, int b)", "focal_method_return_type": "List<Integer>", "focal_method": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}\n", "target": "public class Main {\n        public static void main(String[] args) {\n            Solution s = new Solution();\n            if (!(s.generateIntegers(<FILL_ME>).equals(List.of()))) {\n                    throw new AssertionError();\n            }\n    }\n}"}
